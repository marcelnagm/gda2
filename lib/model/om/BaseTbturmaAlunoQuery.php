<?php


/**
 * Base class that represents a query for the 'tbturma_aluno' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:40 2013
 *
 * @method TbturmaAlunoQuery orderByIdAluno($order = Criteria::ASC) Order by the id_aluno column
 * @method TbturmaAlunoQuery orderByIdTurma($order = Criteria::ASC) Order by the id_turma column
 * @method TbturmaAlunoQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbturmaAlunoQuery orderByFaltas($order = Criteria::ASC) Order by the faltas column
 * @method TbturmaAlunoQuery orderByMediaParcial($order = Criteria::ASC) Order by the media_parcial column
 * @method TbturmaAlunoQuery orderByExameRecuperacao($order = Criteria::ASC) Order by the exame_recuperacao column
 * @method TbturmaAlunoQuery orderByMediaFinal($order = Criteria::ASC) Order by the media_final column
 * @method TbturmaAlunoQuery orderByIdConceito($order = Criteria::ASC) Order by the id_conceito column
 * @method TbturmaAlunoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbturmaAlunoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbturmaAlunoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbturmaAlunoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbturmaAlunoQuery groupByIdAluno() Group by the id_aluno column
 * @method TbturmaAlunoQuery groupByIdTurma() Group by the id_turma column
 * @method TbturmaAlunoQuery groupByMatricula() Group by the matricula column
 * @method TbturmaAlunoQuery groupByFaltas() Group by the faltas column
 * @method TbturmaAlunoQuery groupByMediaParcial() Group by the media_parcial column
 * @method TbturmaAlunoQuery groupByExameRecuperacao() Group by the exame_recuperacao column
 * @method TbturmaAlunoQuery groupByMediaFinal() Group by the media_final column
 * @method TbturmaAlunoQuery groupByIdConceito() Group by the id_conceito column
 * @method TbturmaAlunoQuery groupByCreatedAt() Group by the created_at column
 * @method TbturmaAlunoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbturmaAlunoQuery groupByCreatedBy() Group by the created_by column
 * @method TbturmaAlunoQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbturmaAlunoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbturmaAlunoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbturmaAlunoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbturmaAlunoQuery leftJoinTbturma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturma relation
 * @method TbturmaAlunoQuery rightJoinTbturma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturma relation
 * @method TbturmaAlunoQuery innerJoinTbturma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturma relation
 *
 * @method TbturmaAlunoQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbturmaAlunoQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbturmaAlunoQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method TbturmaAlunoQuery leftJoinTbconceito($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbconceito relation
 * @method TbturmaAlunoQuery rightJoinTbconceito($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbconceito relation
 * @method TbturmaAlunoQuery innerJoinTbconceito($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbconceito relation
 *
 * @method TbturmaAlunoQuery leftJoinTbturmaNota($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbturmaNota relation
 * @method TbturmaAlunoQuery rightJoinTbturmaNota($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbturmaNota relation
 * @method TbturmaAlunoQuery innerJoinTbturmaNota($relationAlias = null) Adds a INNER JOIN clause to the query using the TbturmaNota relation
 *
 * @method TbturmaAluno findOne(PropelPDO $con = null) Return the first TbturmaAluno matching the query
 * @method TbturmaAluno findOneOrCreate(PropelPDO $con = null) Return the first TbturmaAluno matching the query, or a new TbturmaAluno object populated from the query conditions when no match is found
 *
 * @method TbturmaAluno findOneByIdAluno(int $id_aluno) Return the first TbturmaAluno filtered by the id_aluno column
 * @method TbturmaAluno findOneByIdTurma(int $id_turma) Return the first TbturmaAluno filtered by the id_turma column
 * @method TbturmaAluno findOneByMatricula(string $matricula) Return the first TbturmaAluno filtered by the matricula column
 * @method TbturmaAluno findOneByFaltas(int $faltas) Return the first TbturmaAluno filtered by the faltas column
 * @method TbturmaAluno findOneByMediaParcial(string $media_parcial) Return the first TbturmaAluno filtered by the media_parcial column
 * @method TbturmaAluno findOneByExameRecuperacao(string $exame_recuperacao) Return the first TbturmaAluno filtered by the exame_recuperacao column
 * @method TbturmaAluno findOneByMediaFinal(string $media_final) Return the first TbturmaAluno filtered by the media_final column
 * @method TbturmaAluno findOneByIdConceito(int $id_conceito) Return the first TbturmaAluno filtered by the id_conceito column
 * @method TbturmaAluno findOneByCreatedAt(string $created_at) Return the first TbturmaAluno filtered by the created_at column
 * @method TbturmaAluno findOneByUpdatedAt(string $updated_at) Return the first TbturmaAluno filtered by the updated_at column
 * @method TbturmaAluno findOneByCreatedBy(string $created_by) Return the first TbturmaAluno filtered by the created_by column
 * @method TbturmaAluno findOneByUpdatedBy(string $updated_by) Return the first TbturmaAluno filtered by the updated_by column
 *
 * @method array findByIdAluno(int $id_aluno) Return TbturmaAluno objects filtered by the id_aluno column
 * @method array findByIdTurma(int $id_turma) Return TbturmaAluno objects filtered by the id_turma column
 * @method array findByMatricula(string $matricula) Return TbturmaAluno objects filtered by the matricula column
 * @method array findByFaltas(int $faltas) Return TbturmaAluno objects filtered by the faltas column
 * @method array findByMediaParcial(string $media_parcial) Return TbturmaAluno objects filtered by the media_parcial column
 * @method array findByExameRecuperacao(string $exame_recuperacao) Return TbturmaAluno objects filtered by the exame_recuperacao column
 * @method array findByMediaFinal(string $media_final) Return TbturmaAluno objects filtered by the media_final column
 * @method array findByIdConceito(int $id_conceito) Return TbturmaAluno objects filtered by the id_conceito column
 * @method array findByCreatedAt(string $created_at) Return TbturmaAluno objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return TbturmaAluno objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return TbturmaAluno objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return TbturmaAluno objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbturmaAlunoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbturmaAlunoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'TbturmaAluno', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbturmaAlunoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbturmaAlunoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbturmaAlunoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbturmaAlunoQuery) {
            return $criteria;
        }
        $query = new TbturmaAlunoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   TbturmaAluno|TbturmaAluno[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbturmaAlunoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbturmaAlunoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   TbturmaAluno A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_ALUNO, ID_TURMA, MATRICULA, FALTAS, MEDIA_PARCIAL, EXAME_RECUPERACAO, MEDIA_FINAL, ID_CONCEITO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbturma_aluno WHERE ID_ALUNO = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new TbturmaAluno();
            $obj->hydrate($row);
            TbturmaAlunoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return TbturmaAluno|TbturmaAluno[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|TbturmaAluno[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbturmaAlunoPeer::ID_ALUNO, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbturmaAlunoPeer::ID_ALUNO, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_aluno column
     *
     * Example usage:
     * <code>
     * $query->filterByIdAluno(1234); // WHERE id_aluno = 1234
     * $query->filterByIdAluno(array(12, 34)); // WHERE id_aluno IN (12, 34)
     * $query->filterByIdAluno(array('min' => 12)); // WHERE id_aluno > 12
     * </code>
     *
     * @param     mixed $idAluno The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByIdAluno($idAluno = null, $comparison = null)
    {
        if (is_array($idAluno) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::ID_ALUNO, $idAluno, $comparison);
    }

    /**
     * Filter the query on the id_turma column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTurma(1234); // WHERE id_turma = 1234
     * $query->filterByIdTurma(array(12, 34)); // WHERE id_turma IN (12, 34)
     * $query->filterByIdTurma(array('min' => 12)); // WHERE id_turma > 12
     * </code>
     *
     * @see       filterByTbturma()
     *
     * @param     mixed $idTurma The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByIdTurma($idTurma = null, $comparison = null)
    {
        if (is_array($idTurma)) {
            $useMinMax = false;
            if (isset($idTurma['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::ID_TURMA, $idTurma['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTurma['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::ID_TURMA, $idTurma['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::ID_TURMA, $idTurma, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @see       filterByTbaluno()
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the faltas column
     *
     * Example usage:
     * <code>
     * $query->filterByFaltas(1234); // WHERE faltas = 1234
     * $query->filterByFaltas(array(12, 34)); // WHERE faltas IN (12, 34)
     * $query->filterByFaltas(array('min' => 12)); // WHERE faltas > 12
     * </code>
     *
     * @param     mixed $faltas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByFaltas($faltas = null, $comparison = null)
    {
        if (is_array($faltas)) {
            $useMinMax = false;
            if (isset($faltas['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::FALTAS, $faltas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($faltas['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::FALTAS, $faltas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::FALTAS, $faltas, $comparison);
    }

    /**
     * Filter the query on the media_parcial column
     *
     * Example usage:
     * <code>
     * $query->filterByMediaParcial(1234); // WHERE media_parcial = 1234
     * $query->filterByMediaParcial(array(12, 34)); // WHERE media_parcial IN (12, 34)
     * $query->filterByMediaParcial(array('min' => 12)); // WHERE media_parcial > 12
     * </code>
     *
     * @param     mixed $mediaParcial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByMediaParcial($mediaParcial = null, $comparison = null)
    {
        if (is_array($mediaParcial)) {
            $useMinMax = false;
            if (isset($mediaParcial['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::MEDIA_PARCIAL, $mediaParcial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mediaParcial['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::MEDIA_PARCIAL, $mediaParcial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::MEDIA_PARCIAL, $mediaParcial, $comparison);
    }

    /**
     * Filter the query on the exame_recuperacao column
     *
     * Example usage:
     * <code>
     * $query->filterByExameRecuperacao(1234); // WHERE exame_recuperacao = 1234
     * $query->filterByExameRecuperacao(array(12, 34)); // WHERE exame_recuperacao IN (12, 34)
     * $query->filterByExameRecuperacao(array('min' => 12)); // WHERE exame_recuperacao > 12
     * </code>
     *
     * @param     mixed $exameRecuperacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByExameRecuperacao($exameRecuperacao = null, $comparison = null)
    {
        if (is_array($exameRecuperacao)) {
            $useMinMax = false;
            if (isset($exameRecuperacao['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::EXAME_RECUPERACAO, $exameRecuperacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($exameRecuperacao['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::EXAME_RECUPERACAO, $exameRecuperacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::EXAME_RECUPERACAO, $exameRecuperacao, $comparison);
    }

    /**
     * Filter the query on the media_final column
     *
     * Example usage:
     * <code>
     * $query->filterByMediaFinal(1234); // WHERE media_final = 1234
     * $query->filterByMediaFinal(array(12, 34)); // WHERE media_final IN (12, 34)
     * $query->filterByMediaFinal(array('min' => 12)); // WHERE media_final > 12
     * </code>
     *
     * @param     mixed $mediaFinal The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByMediaFinal($mediaFinal = null, $comparison = null)
    {
        if (is_array($mediaFinal)) {
            $useMinMax = false;
            if (isset($mediaFinal['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::MEDIA_FINAL, $mediaFinal['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mediaFinal['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::MEDIA_FINAL, $mediaFinal['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::MEDIA_FINAL, $mediaFinal, $comparison);
    }

    /**
     * Filter the query on the id_conceito column
     *
     * Example usage:
     * <code>
     * $query->filterByIdConceito(1234); // WHERE id_conceito = 1234
     * $query->filterByIdConceito(array(12, 34)); // WHERE id_conceito IN (12, 34)
     * $query->filterByIdConceito(array('min' => 12)); // WHERE id_conceito > 12
     * </code>
     *
     * @see       filterByTbconceito()
     *
     * @param     mixed $idConceito The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByIdConceito($idConceito = null, $comparison = null)
    {
        if (is_array($idConceito)) {
            $useMinMax = false;
            if (isset($idConceito['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::ID_CONCEITO, $idConceito['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idConceito['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::ID_CONCEITO, $idConceito['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::ID_CONCEITO, $idConceito, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbturmaAlunoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaAlunoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbturma object
     *
     * @param   Tbturma|PropelObjectCollection $tbturma The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaAlunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturma($tbturma, $comparison = null)
    {
        if ($tbturma instanceof Tbturma) {
            return $this
                ->addUsingAlias(TbturmaAlunoPeer::ID_TURMA, $tbturma->getIdTurma(), $comparison);
        } elseif ($tbturma instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaAlunoPeer::ID_TURMA, $tbturma->toKeyValue('PrimaryKey', 'IdTurma'), $comparison);
        } else {
            throw new PropelException('filterByTbturma() only accepts arguments of type Tbturma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function joinTbturma($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturma');
        }

        return $this;
    }

    /**
     * Use the Tbturma relation Tbturma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturma', 'TbturmaQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaAlunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbturmaAlunoPeer::MATRICULA, $tbaluno->getMatricula(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaAlunoPeer::MATRICULA, $tbaluno->toKeyValue('PrimaryKey', 'Matricula'), $comparison);
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbconceito object
     *
     * @param   Tbconceito|PropelObjectCollection $tbconceito The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaAlunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbconceito($tbconceito, $comparison = null)
    {
        if ($tbconceito instanceof Tbconceito) {
            return $this
                ->addUsingAlias(TbturmaAlunoPeer::ID_CONCEITO, $tbconceito->getIdConceito(), $comparison);
        } elseif ($tbconceito instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaAlunoPeer::ID_CONCEITO, $tbconceito->toKeyValue('PrimaryKey', 'IdConceito'), $comparison);
        } else {
            throw new PropelException('filterByTbconceito() only accepts arguments of type Tbconceito or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbconceito relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function joinTbconceito($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbconceito');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbconceito');
        }

        return $this;
    }

    /**
     * Use the Tbconceito relation Tbconceito object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbconceitoQuery A secondary query class using the current class as primary query
     */
    public function useTbconceitoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbconceito($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbconceito', 'TbconceitoQuery');
    }

    /**
     * Filter the query by a related TbturmaNota object
     *
     * @param   TbturmaNota|PropelObjectCollection $tbturmaNota  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaAlunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturmaNota($tbturmaNota, $comparison = null)
    {
        if ($tbturmaNota instanceof TbturmaNota) {
            return $this
                ->addUsingAlias(TbturmaAlunoPeer::ID_ALUNO, $tbturmaNota->getIdAluno(), $comparison);
        } elseif ($tbturmaNota instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaNotaQuery()
                ->filterByPrimaryKeys($tbturmaNota->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturmaNota() only accepts arguments of type TbturmaNota or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbturmaNota relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function joinTbturmaNota($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbturmaNota');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbturmaNota');
        }

        return $this;
    }

    /**
     * Use the TbturmaNota relation TbturmaNota object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaNotaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaNotaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturmaNota($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbturmaNota', 'TbturmaNotaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   TbturmaAluno $tbturmaAluno Object to remove from the list of results
     *
     * @return TbturmaAlunoQuery The current query, for fluid interface
     */
    public function prune($tbturmaAluno = null)
    {
        if ($tbturmaAluno) {
            $this->addUsingAlias(TbturmaAlunoPeer::ID_ALUNO, $tbturmaAluno->getIdAluno(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
