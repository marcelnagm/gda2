<?php

/**
 * Base class that represents a row from the 'tbprofessor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:55 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbprofessor extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbprofessorPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_pessoa field.
	 * @var        int
	 */
	protected $id_pessoa;

	/**
	 * The value for the matricula_prof field.
	 * @var        int
	 */
	protected $matricula_prof;

	/**
	 * The value for the cpf field.
	 * @var        string
	 */
	protected $cpf;

	/**
	 * The value for the siape field.
	 * @var        int
	 */
	protected $siape;

	/**
	 * The value for the nome field.
	 * @var        string
	 */
	protected $nome;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the fone_residencial field.
	 * @var        string
	 */
	protected $fone_residencial;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the foto field.
	 * @var        resource
	 */
	protected $foto;

	/**
	 * The value for the id_neces_especial field.
	 * @var        string
	 */
	protected $id_neces_especial;

	/**
	 * The value for the cod_curso field.
	 * @var        int
	 */
	protected $cod_curso;

	/**
	 * The value for the id_tipo_vinculo field.
	 * @var        int
	 */
	protected $id_tipo_vinculo;

	/**
	 * The value for the id_formacao field.
	 * @var        int
	 */
	protected $id_formacao;

	/**
	 * The value for the id_prof_sit field.
	 * @var        int
	 */
	protected $id_prof_sit;

	/**
	 * The value for the id_setor field.
	 * @var        string
	 */
	protected $id_setor;

	/**
	 * The value for the coordenador field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $coordenador;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbnecesespecial
	 */
	protected $aTbnecesespecial;

	/**
	 * @var        Tbcurso
	 */
	protected $aTbcurso;

	/**
	 * @var        Tbproftipovinculo
	 */
	protected $aTbproftipovinculo;

	/**
	 * @var        Tbformacao
	 */
	protected $aTbformacao;

	/**
	 * @var        Tbprofessorsituacao
	 */
	protected $aTbprofessorsituacao;

	/**
	 * @var        Tbsetor
	 */
	protected $aTbsetor;

	/**
	 * @var        array Tboferta[] Collection to store aggregation of Tboferta objects.
	 */
	protected $collTbofertasRelatedByIdMatriculaProf;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertasRelatedByIdMatriculaProf.
	 */
	private $lastTbofertaRelatedByIdMatriculaProfCriteria = null;

	/**
	 * @var        array Tboferta[] Collection to store aggregation of Tboferta objects.
	 */
	protected $collTbofertasRelatedByIdMatriculaProf2;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertasRelatedByIdMatriculaProf2.
	 */
	private $lastTbofertaRelatedByIdMatriculaProf2Criteria = null;

	/**
	 * @var        array Tbofertacoordenador[] Collection to store aggregation of Tbofertacoordenador objects.
	 */
	protected $collTbofertacoordenadors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertacoordenadors.
	 */
	private $lastTbofertacoordenadorCriteria = null;

	/**
	 * @var        array Tbcoordenadorcurso[] Collection to store aggregation of Tbcoordenadorcurso objects.
	 */
	protected $collTbcoordenadorcursos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbcoordenadorcursos.
	 */
	private $lastTbcoordenadorcursoCriteria = null;

	/**
	 * @var        array Tbprofessorsenha[] Collection to store aggregation of Tbprofessorsenha objects.
	 */
	protected $collTbprofessorsenhas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbprofessorsenhas.
	 */
	private $lastTbprofessorsenhaCriteria = null;

	/**
	 * @var        array Tbprofessorticket[] Collection to store aggregation of Tbprofessorticket objects.
	 */
	protected $collTbprofessortickets;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbprofessortickets.
	 */
	private $lastTbprofessorticketCriteria = null;

	/**
	 * @var        array TbturmaProfessor[] Collection to store aggregation of TbturmaProfessor objects.
	 */
	protected $collTbturmaProfessors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbturmaProfessors.
	 */
	private $lastTbturmaProfessorCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbprofessorPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->coordenador = false;
	}

	/**
	 * Initializes internal state of BaseTbprofessor object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id_pessoa] column value.
	 * 
	 * @return     int
	 */
	public function getIdPessoa()
	{
		return $this->id_pessoa;
	}

	/**
	 * Get the [matricula_prof] column value.
	 * 
	 * @return     int
	 */
	public function getMatriculaProf()
	{
		return $this->matricula_prof;
	}

	/**
	 * Get the [cpf] column value.
	 * 
	 * @return     string
	 */
	public function getCpf()
	{
		return $this->cpf;
	}

	/**
	 * Get the [siape] column value.
	 * 
	 * @return     int
	 */
	public function getSiape()
	{
		return $this->siape;
	}

	/**
	 * Get the [nome] column value.
	 * 
	 * @return     string
	 */
	public function getNome()
	{
		return $this->nome;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [fone_residencial] column value.
	 * 
	 * @return     string
	 */
	public function getFoneResidencial()
	{
		return $this->fone_residencial;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [foto] column value.
	 * 
	 * @return     resource
	 */
	public function getFoto()
	{
		return $this->foto;
	}

	/**
	 * Get the [id_neces_especial] column value.
	 * 
	 * @return     string
	 */
	public function getIdNecesEspecial()
	{
		return $this->id_neces_especial;
	}

	/**
	 * Get the [cod_curso] column value.
	 * 
	 * @return     int
	 */
	public function getCodCurso()
	{
		return $this->cod_curso;
	}

	/**
	 * Get the [id_tipo_vinculo] column value.
	 * 
	 * @return     int
	 */
	public function getIdTipoVinculo()
	{
		return $this->id_tipo_vinculo;
	}

	/**
	 * Get the [id_formacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdFormacao()
	{
		return $this->id_formacao;
	}

	/**
	 * Get the [id_prof_sit] column value.
	 * 
	 * @return     int
	 */
	public function getIdProfSit()
	{
		return $this->id_prof_sit;
	}

	/**
	 * Get the [id_setor] column value.
	 * 
	 * @return     string
	 */
	public function getIdSetor()
	{
		return $this->id_setor;
	}

	/**
	 * Get the [coordenador] column value.
	 * 
	 * @return     boolean
	 */
	public function getCoordenador()
	{
		return $this->coordenador;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [id_pessoa] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setIdPessoa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pessoa !== $v) {
			$this->id_pessoa = $v;
			$this->modifiedColumns[] = TbprofessorPeer::ID_PESSOA;
		}

		return $this;
	} // setIdPessoa()

	/**
	 * Set the value of [matricula_prof] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setMatriculaProf($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->matricula_prof !== $v) {
			$this->matricula_prof = $v;
			$this->modifiedColumns[] = TbprofessorPeer::MATRICULA_PROF;
		}

		return $this;
	} // setMatriculaProf()

	/**
	 * Set the value of [cpf] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setCpf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cpf !== $v) {
			$this->cpf = $v;
			$this->modifiedColumns[] = TbprofessorPeer::CPF;
		}

		return $this;
	} // setCpf()

	/**
	 * Set the value of [siape] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setSiape($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->siape !== $v) {
			$this->siape = $v;
			$this->modifiedColumns[] = TbprofessorPeer::SIAPE;
		}

		return $this;
	} // setSiape()

	/**
	 * Set the value of [nome] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setNome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome !== $v) {
			$this->nome = $v;
			$this->modifiedColumns[] = TbprofessorPeer::NOME;
		}

		return $this;
	} // setNome()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = TbprofessorPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [fone_residencial] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setFoneResidencial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fone_residencial !== $v) {
			$this->fone_residencial = $v;
			$this->modifiedColumns[] = TbprofessorPeer::FONE_RESIDENCIAL;
		}

		return $this;
	} // setFoneResidencial()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = TbprofessorPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [foto] column.
	 * 
	 * @param      resource $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setFoto($v)
	{
		// Because BLOB columns are streams in PDO we have to assume that they are
		// always modified when a new value is passed in.  For example, the contents
		// of the stream itself may have changed externally.
		if (!is_resource($v) && $v !== null) {
			$this->foto = fopen('php://memory', 'r+');
			fwrite($this->foto, $v);
			rewind($this->foto);
		} else { // it's already a stream
			$this->foto = $v;
		}
		$this->modifiedColumns[] = TbprofessorPeer::FOTO;

		return $this;
	} // setFoto()

	/**
	 * Set the value of [id_neces_especial] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setIdNecesEspecial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id_neces_especial !== $v) {
			$this->id_neces_especial = $v;
			$this->modifiedColumns[] = TbprofessorPeer::ID_NECES_ESPECIAL;
		}

		if ($this->aTbnecesespecial !== null && $this->aTbnecesespecial->getIdNecesEspecial() !== $v) {
			$this->aTbnecesespecial = null;
		}

		return $this;
	} // setIdNecesEspecial()

	/**
	 * Set the value of [cod_curso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setCodCurso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cod_curso !== $v) {
			$this->cod_curso = $v;
			$this->modifiedColumns[] = TbprofessorPeer::COD_CURSO;
		}

		if ($this->aTbcurso !== null && $this->aTbcurso->getCodCurso() !== $v) {
			$this->aTbcurso = null;
		}

		return $this;
	} // setCodCurso()

	/**
	 * Set the value of [id_tipo_vinculo] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setIdTipoVinculo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tipo_vinculo !== $v) {
			$this->id_tipo_vinculo = $v;
			$this->modifiedColumns[] = TbprofessorPeer::ID_TIPO_VINCULO;
		}

		if ($this->aTbproftipovinculo !== null && $this->aTbproftipovinculo->getIdTipoVinculo() !== $v) {
			$this->aTbproftipovinculo = null;
		}

		return $this;
	} // setIdTipoVinculo()

	/**
	 * Set the value of [id_formacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setIdFormacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_formacao !== $v) {
			$this->id_formacao = $v;
			$this->modifiedColumns[] = TbprofessorPeer::ID_FORMACAO;
		}

		if ($this->aTbformacao !== null && $this->aTbformacao->getIdFormacao() !== $v) {
			$this->aTbformacao = null;
		}

		return $this;
	} // setIdFormacao()

	/**
	 * Set the value of [id_prof_sit] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setIdProfSit($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_prof_sit !== $v) {
			$this->id_prof_sit = $v;
			$this->modifiedColumns[] = TbprofessorPeer::ID_PROF_SIT;
		}

		if ($this->aTbprofessorsituacao !== null && $this->aTbprofessorsituacao->getIdSituacao() !== $v) {
			$this->aTbprofessorsituacao = null;
		}

		return $this;
	} // setIdProfSit()

	/**
	 * Set the value of [id_setor] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setIdSetor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id_setor !== $v) {
			$this->id_setor = $v;
			$this->modifiedColumns[] = TbprofessorPeer::ID_SETOR;
		}

		if ($this->aTbsetor !== null && $this->aTbsetor->getIdSetor() !== $v) {
			$this->aTbsetor = null;
		}

		return $this;
	} // setIdSetor()

	/**
	 * Set the value of [coordenador] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setCoordenador($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->coordenador !== $v || $this->isNew()) {
			$this->coordenador = $v;
			$this->modifiedColumns[] = TbprofessorPeer::COORDENADOR;
		}

		return $this;
	} // setCoordenador()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbprofessorPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbprofessorPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbprofessorPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbprofessor The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbprofessorPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->coordenador !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_pessoa = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->matricula_prof = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cpf = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->siape = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->nome = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->celular = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->fone_residencial = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->foto = $row[$startcol + 8];
			$this->id_neces_especial = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->cod_curso = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->id_tipo_vinculo = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->id_formacao = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->id_prof_sit = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->id_setor = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->coordenador = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->created_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->updated_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->created_by = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->updated_by = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 20; // 20 = TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tbprofessor object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbnecesespecial !== null && $this->id_neces_especial !== $this->aTbnecesespecial->getIdNecesEspecial()) {
			$this->aTbnecesespecial = null;
		}
		if ($this->aTbcurso !== null && $this->cod_curso !== $this->aTbcurso->getCodCurso()) {
			$this->aTbcurso = null;
		}
		if ($this->aTbproftipovinculo !== null && $this->id_tipo_vinculo !== $this->aTbproftipovinculo->getIdTipoVinculo()) {
			$this->aTbproftipovinculo = null;
		}
		if ($this->aTbformacao !== null && $this->id_formacao !== $this->aTbformacao->getIdFormacao()) {
			$this->aTbformacao = null;
		}
		if ($this->aTbprofessorsituacao !== null && $this->id_prof_sit !== $this->aTbprofessorsituacao->getIdSituacao()) {
			$this->aTbprofessorsituacao = null;
		}
		if ($this->aTbsetor !== null && $this->id_setor !== $this->aTbsetor->getIdSetor()) {
			$this->aTbsetor = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbprofessorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbprofessorPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbnecesespecial = null;
			$this->aTbcurso = null;
			$this->aTbproftipovinculo = null;
			$this->aTbformacao = null;
			$this->aTbprofessorsituacao = null;
			$this->aTbsetor = null;
			$this->collTbofertasRelatedByIdMatriculaProf = null;
			$this->lastTbofertaRelatedByIdMatriculaProfCriteria = null;

			$this->collTbofertasRelatedByIdMatriculaProf2 = null;
			$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = null;

			$this->collTbofertacoordenadors = null;
			$this->lastTbofertacoordenadorCriteria = null;

			$this->collTbcoordenadorcursos = null;
			$this->lastTbcoordenadorcursoCriteria = null;

			$this->collTbprofessorsenhas = null;
			$this->lastTbprofessorsenhaCriteria = null;

			$this->collTbprofessortickets = null;
			$this->lastTbprofessorticketCriteria = null;

			$this->collTbturmaProfessors = null;
			$this->lastTbturmaProfessorCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbprofessorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbprofessor:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbprofessorPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbprofessor:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbprofessorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbprofessor:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbprofessorPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbprofessorPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbprofessor:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbprofessorPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbnecesespecial !== null) {
				if ($this->aTbnecesespecial->isModified() || $this->aTbnecesespecial->isNew()) {
					$affectedRows += $this->aTbnecesespecial->save($con);
				}
				$this->setTbnecesespecial($this->aTbnecesespecial);
			}

			if ($this->aTbcurso !== null) {
				if ($this->aTbcurso->isModified() || $this->aTbcurso->isNew()) {
					$affectedRows += $this->aTbcurso->save($con);
				}
				$this->setTbcurso($this->aTbcurso);
			}

			if ($this->aTbproftipovinculo !== null) {
				if ($this->aTbproftipovinculo->isModified() || $this->aTbproftipovinculo->isNew()) {
					$affectedRows += $this->aTbproftipovinculo->save($con);
				}
				$this->setTbproftipovinculo($this->aTbproftipovinculo);
			}

			if ($this->aTbformacao !== null) {
				if ($this->aTbformacao->isModified() || $this->aTbformacao->isNew()) {
					$affectedRows += $this->aTbformacao->save($con);
				}
				$this->setTbformacao($this->aTbformacao);
			}

			if ($this->aTbprofessorsituacao !== null) {
				if ($this->aTbprofessorsituacao->isModified() || $this->aTbprofessorsituacao->isNew()) {
					$affectedRows += $this->aTbprofessorsituacao->save($con);
				}
				$this->setTbprofessorsituacao($this->aTbprofessorsituacao);
			}

			if ($this->aTbsetor !== null) {
				if ($this->aTbsetor->isModified() || $this->aTbsetor->isNew()) {
					$affectedRows += $this->aTbsetor->save($con);
				}
				$this->setTbsetor($this->aTbsetor);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbprofessorPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += TbprofessorPeer::doUpdate($this, $con);
				}

				// Rewind the foto LOB column, since PDO does not rewind after inserting value.
				if ($this->foto !== null && is_resource($this->foto)) {
					rewind($this->foto);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTbofertasRelatedByIdMatriculaProf !== null) {
				foreach ($this->collTbofertasRelatedByIdMatriculaProf as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertasRelatedByIdMatriculaProf2 !== null) {
				foreach ($this->collTbofertasRelatedByIdMatriculaProf2 as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertacoordenadors !== null) {
				foreach ($this->collTbofertacoordenadors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbcoordenadorcursos !== null) {
				foreach ($this->collTbcoordenadorcursos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbprofessorsenhas !== null) {
				foreach ($this->collTbprofessorsenhas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbprofessortickets !== null) {
				foreach ($this->collTbprofessortickets as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbturmaProfessors !== null) {
				foreach ($this->collTbturmaProfessors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbnecesespecial !== null) {
				if (!$this->aTbnecesespecial->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbnecesespecial->getValidationFailures());
				}
			}

			if ($this->aTbcurso !== null) {
				if (!$this->aTbcurso->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcurso->getValidationFailures());
				}
			}

			if ($this->aTbproftipovinculo !== null) {
				if (!$this->aTbproftipovinculo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbproftipovinculo->getValidationFailures());
				}
			}

			if ($this->aTbformacao !== null) {
				if (!$this->aTbformacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbformacao->getValidationFailures());
				}
			}

			if ($this->aTbprofessorsituacao !== null) {
				if (!$this->aTbprofessorsituacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbprofessorsituacao->getValidationFailures());
				}
			}

			if ($this->aTbsetor !== null) {
				if (!$this->aTbsetor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbsetor->getValidationFailures());
				}
			}


			if (($retval = TbprofessorPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTbofertasRelatedByIdMatriculaProf !== null) {
					foreach ($this->collTbofertasRelatedByIdMatriculaProf as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertasRelatedByIdMatriculaProf2 !== null) {
					foreach ($this->collTbofertasRelatedByIdMatriculaProf2 as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertacoordenadors !== null) {
					foreach ($this->collTbofertacoordenadors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbcoordenadorcursos !== null) {
					foreach ($this->collTbcoordenadorcursos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbprofessorsenhas !== null) {
					foreach ($this->collTbprofessorsenhas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbprofessortickets !== null) {
					foreach ($this->collTbprofessortickets as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbturmaProfessors !== null) {
					foreach ($this->collTbturmaProfessors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbprofessorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdPessoa();
				break;
			case 1:
				return $this->getMatriculaProf();
				break;
			case 2:
				return $this->getCpf();
				break;
			case 3:
				return $this->getSiape();
				break;
			case 4:
				return $this->getNome();
				break;
			case 5:
				return $this->getCelular();
				break;
			case 6:
				return $this->getFoneResidencial();
				break;
			case 7:
				return $this->getEmail();
				break;
			case 8:
				return $this->getFoto();
				break;
			case 9:
				return $this->getIdNecesEspecial();
				break;
			case 10:
				return $this->getCodCurso();
				break;
			case 11:
				return $this->getIdTipoVinculo();
				break;
			case 12:
				return $this->getIdFormacao();
				break;
			case 13:
				return $this->getIdProfSit();
				break;
			case 14:
				return $this->getIdSetor();
				break;
			case 15:
				return $this->getCoordenador();
				break;
			case 16:
				return $this->getCreatedAt();
				break;
			case 17:
				return $this->getUpdatedAt();
				break;
			case 18:
				return $this->getCreatedBy();
				break;
			case 19:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbprofessorPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdPessoa(),
			$keys[1] => $this->getMatriculaProf(),
			$keys[2] => $this->getCpf(),
			$keys[3] => $this->getSiape(),
			$keys[4] => $this->getNome(),
			$keys[5] => $this->getCelular(),
			$keys[6] => $this->getFoneResidencial(),
			$keys[7] => $this->getEmail(),
			$keys[8] => $this->getFoto(),
			$keys[9] => $this->getIdNecesEspecial(),
			$keys[10] => $this->getCodCurso(),
			$keys[11] => $this->getIdTipoVinculo(),
			$keys[12] => $this->getIdFormacao(),
			$keys[13] => $this->getIdProfSit(),
			$keys[14] => $this->getIdSetor(),
			$keys[15] => $this->getCoordenador(),
			$keys[16] => $this->getCreatedAt(),
			$keys[17] => $this->getUpdatedAt(),
			$keys[18] => $this->getCreatedBy(),
			$keys[19] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbprofessorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdPessoa($value);
				break;
			case 1:
				$this->setMatriculaProf($value);
				break;
			case 2:
				$this->setCpf($value);
				break;
			case 3:
				$this->setSiape($value);
				break;
			case 4:
				$this->setNome($value);
				break;
			case 5:
				$this->setCelular($value);
				break;
			case 6:
				$this->setFoneResidencial($value);
				break;
			case 7:
				$this->setEmail($value);
				break;
			case 8:
				$this->setFoto($value);
				break;
			case 9:
				$this->setIdNecesEspecial($value);
				break;
			case 10:
				$this->setCodCurso($value);
				break;
			case 11:
				$this->setIdTipoVinculo($value);
				break;
			case 12:
				$this->setIdFormacao($value);
				break;
			case 13:
				$this->setIdProfSit($value);
				break;
			case 14:
				$this->setIdSetor($value);
				break;
			case 15:
				$this->setCoordenador($value);
				break;
			case 16:
				$this->setCreatedAt($value);
				break;
			case 17:
				$this->setUpdatedAt($value);
				break;
			case 18:
				$this->setCreatedBy($value);
				break;
			case 19:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbprofessorPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdPessoa($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMatriculaProf($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCpf($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSiape($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNome($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCelular($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFoneResidencial($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFoto($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdNecesEspecial($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCodCurso($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIdTipoVinculo($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIdFormacao($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIdProfSit($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setIdSetor($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCoordenador($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCreatedAt($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setUpdatedAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCreatedBy($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUpdatedBy($arr[$keys[19]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbprofessorPeer::ID_PESSOA)) $criteria->add(TbprofessorPeer::ID_PESSOA, $this->id_pessoa);
		if ($this->isColumnModified(TbprofessorPeer::MATRICULA_PROF)) $criteria->add(TbprofessorPeer::MATRICULA_PROF, $this->matricula_prof);
		if ($this->isColumnModified(TbprofessorPeer::CPF)) $criteria->add(TbprofessorPeer::CPF, $this->cpf);
		if ($this->isColumnModified(TbprofessorPeer::SIAPE)) $criteria->add(TbprofessorPeer::SIAPE, $this->siape);
		if ($this->isColumnModified(TbprofessorPeer::NOME)) $criteria->add(TbprofessorPeer::NOME, $this->nome);
		if ($this->isColumnModified(TbprofessorPeer::CELULAR)) $criteria->add(TbprofessorPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(TbprofessorPeer::FONE_RESIDENCIAL)) $criteria->add(TbprofessorPeer::FONE_RESIDENCIAL, $this->fone_residencial);
		if ($this->isColumnModified(TbprofessorPeer::EMAIL)) $criteria->add(TbprofessorPeer::EMAIL, $this->email);
		if ($this->isColumnModified(TbprofessorPeer::FOTO)) $criteria->add(TbprofessorPeer::FOTO, $this->foto);
		if ($this->isColumnModified(TbprofessorPeer::ID_NECES_ESPECIAL)) $criteria->add(TbprofessorPeer::ID_NECES_ESPECIAL, $this->id_neces_especial);
		if ($this->isColumnModified(TbprofessorPeer::COD_CURSO)) $criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);
		if ($this->isColumnModified(TbprofessorPeer::ID_TIPO_VINCULO)) $criteria->add(TbprofessorPeer::ID_TIPO_VINCULO, $this->id_tipo_vinculo);
		if ($this->isColumnModified(TbprofessorPeer::ID_FORMACAO)) $criteria->add(TbprofessorPeer::ID_FORMACAO, $this->id_formacao);
		if ($this->isColumnModified(TbprofessorPeer::ID_PROF_SIT)) $criteria->add(TbprofessorPeer::ID_PROF_SIT, $this->id_prof_sit);
		if ($this->isColumnModified(TbprofessorPeer::ID_SETOR)) $criteria->add(TbprofessorPeer::ID_SETOR, $this->id_setor);
		if ($this->isColumnModified(TbprofessorPeer::COORDENADOR)) $criteria->add(TbprofessorPeer::COORDENADOR, $this->coordenador);
		if ($this->isColumnModified(TbprofessorPeer::CREATED_AT)) $criteria->add(TbprofessorPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbprofessorPeer::UPDATED_AT)) $criteria->add(TbprofessorPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbprofessorPeer::CREATED_BY)) $criteria->add(TbprofessorPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbprofessorPeer::UPDATED_BY)) $criteria->add(TbprofessorPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);

		$criteria->add(TbprofessorPeer::MATRICULA_PROF, $this->matricula_prof);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getMatriculaProf();
	}

	/**
	 * Generic method to set the primary key (matricula_prof column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setMatriculaProf($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tbprofessor (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMatriculaProf($this->matricula_prof);

		$copyObj->setCpf($this->cpf);

		$copyObj->setSiape($this->siape);

		$copyObj->setNome($this->nome);

		$copyObj->setCelular($this->celular);

		$copyObj->setFoneResidencial($this->fone_residencial);

		$copyObj->setEmail($this->email);

		$copyObj->setFoto($this->foto);

		$copyObj->setIdNecesEspecial($this->id_neces_especial);

		$copyObj->setCodCurso($this->cod_curso);

		$copyObj->setIdTipoVinculo($this->id_tipo_vinculo);

		$copyObj->setIdFormacao($this->id_formacao);

		$copyObj->setIdProfSit($this->id_prof_sit);

		$copyObj->setIdSetor($this->id_setor);

		$copyObj->setCoordenador($this->coordenador);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTbofertasRelatedByIdMatriculaProf() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertaRelatedByIdMatriculaProf($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertasRelatedByIdMatriculaProf2() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertaRelatedByIdMatriculaProf2($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertacoordenadors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertacoordenador($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbcoordenadorcursos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbcoordenadorcurso($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbprofessorsenhas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbprofessorsenha($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbprofessortickets() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbprofessorticket($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbturmaProfessors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbturmaProfessor($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdPessoa(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tbprofessor Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbprofessorPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbprofessorPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbnecesespecial object.
	 *
	 * @param      Tbnecesespecial $v
	 * @return     Tbprofessor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbnecesespecial(Tbnecesespecial $v = null)
	{
		if ($v === null) {
			$this->setIdNecesEspecial(NULL);
		} else {
			$this->setIdNecesEspecial($v->getIdNecesEspecial());
		}

		$this->aTbnecesespecial = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbnecesespecial object, it will not be re-added.
		if ($v !== null) {
			$v->addTbprofessor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbnecesespecial object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbnecesespecial The associated Tbnecesespecial object.
	 * @throws     PropelException
	 */
	public function getTbnecesespecial(PropelPDO $con = null)
	{
		if ($this->aTbnecesespecial === null && (($this->id_neces_especial !== "" && $this->id_neces_especial !== null))) {
			$this->aTbnecesespecial = TbnecesespecialPeer::retrieveByPk($this->id_neces_especial);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbnecesespecial->addTbprofessors($this);
			 */
		}
		return $this->aTbnecesespecial;
	}

	/**
	 * Declares an association between this object and a Tbcurso object.
	 *
	 * @param      Tbcurso $v
	 * @return     Tbprofessor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcurso(Tbcurso $v = null)
	{
		if ($v === null) {
			$this->setCodCurso(NULL);
		} else {
			$this->setCodCurso($v->getCodCurso());
		}

		$this->aTbcurso = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcurso object, it will not be re-added.
		if ($v !== null) {
			$v->addTbprofessor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcurso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcurso The associated Tbcurso object.
	 * @throws     PropelException
	 */
	public function getTbcurso(PropelPDO $con = null)
	{
		if ($this->aTbcurso === null && ($this->cod_curso !== null)) {
			$this->aTbcurso = TbcursoPeer::retrieveByPk($this->cod_curso);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcurso->addTbprofessors($this);
			 */
		}
		return $this->aTbcurso;
	}

	/**
	 * Declares an association between this object and a Tbproftipovinculo object.
	 *
	 * @param      Tbproftipovinculo $v
	 * @return     Tbprofessor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbproftipovinculo(Tbproftipovinculo $v = null)
	{
		if ($v === null) {
			$this->setIdTipoVinculo(NULL);
		} else {
			$this->setIdTipoVinculo($v->getIdTipoVinculo());
		}

		$this->aTbproftipovinculo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbproftipovinculo object, it will not be re-added.
		if ($v !== null) {
			$v->addTbprofessor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbproftipovinculo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbproftipovinculo The associated Tbproftipovinculo object.
	 * @throws     PropelException
	 */
	public function getTbproftipovinculo(PropelPDO $con = null)
	{
		if ($this->aTbproftipovinculo === null && ($this->id_tipo_vinculo !== null)) {
			$this->aTbproftipovinculo = TbproftipovinculoPeer::retrieveByPk($this->id_tipo_vinculo);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbproftipovinculo->addTbprofessors($this);
			 */
		}
		return $this->aTbproftipovinculo;
	}

	/**
	 * Declares an association between this object and a Tbformacao object.
	 *
	 * @param      Tbformacao $v
	 * @return     Tbprofessor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbformacao(Tbformacao $v = null)
	{
		if ($v === null) {
			$this->setIdFormacao(NULL);
		} else {
			$this->setIdFormacao($v->getIdFormacao());
		}

		$this->aTbformacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbformacao object, it will not be re-added.
		if ($v !== null) {
			$v->addTbprofessor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbformacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbformacao The associated Tbformacao object.
	 * @throws     PropelException
	 */
	public function getTbformacao(PropelPDO $con = null)
	{
		if ($this->aTbformacao === null && ($this->id_formacao !== null)) {
			$this->aTbformacao = TbformacaoPeer::retrieveByPk($this->id_formacao);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbformacao->addTbprofessors($this);
			 */
		}
		return $this->aTbformacao;
	}

	/**
	 * Declares an association between this object and a Tbprofessorsituacao object.
	 *
	 * @param      Tbprofessorsituacao $v
	 * @return     Tbprofessor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbprofessorsituacao(Tbprofessorsituacao $v = null)
	{
		if ($v === null) {
			$this->setIdProfSit(NULL);
		} else {
			$this->setIdProfSit($v->getIdSituacao());
		}

		$this->aTbprofessorsituacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbprofessorsituacao object, it will not be re-added.
		if ($v !== null) {
			$v->addTbprofessor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbprofessorsituacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbprofessorsituacao The associated Tbprofessorsituacao object.
	 * @throws     PropelException
	 */
	public function getTbprofessorsituacao(PropelPDO $con = null)
	{
		if ($this->aTbprofessorsituacao === null && ($this->id_prof_sit !== null)) {
			$this->aTbprofessorsituacao = TbprofessorsituacaoPeer::retrieveByPk($this->id_prof_sit);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbprofessorsituacao->addTbprofessors($this);
			 */
		}
		return $this->aTbprofessorsituacao;
	}

	/**
	 * Declares an association between this object and a Tbsetor object.
	 *
	 * @param      Tbsetor $v
	 * @return     Tbprofessor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbsetor(Tbsetor $v = null)
	{
		if ($v === null) {
			$this->setIdSetor(NULL);
		} else {
			$this->setIdSetor($v->getIdSetor());
		}

		$this->aTbsetor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbsetor object, it will not be re-added.
		if ($v !== null) {
			$v->addTbprofessor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbsetor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbsetor The associated Tbsetor object.
	 * @throws     PropelException
	 */
	public function getTbsetor(PropelPDO $con = null)
	{
		if ($this->aTbsetor === null && (($this->id_setor !== "" && $this->id_setor !== null))) {
			$this->aTbsetor = TbsetorPeer::retrieveByPk($this->id_setor);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbsetor->addTbprofessors($this);
			 */
		}
		return $this->aTbsetor;
	}

	/**
	 * Clears out the collTbofertasRelatedByIdMatriculaProf collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertasRelatedByIdMatriculaProf()
	 */
	public function clearTbofertasRelatedByIdMatriculaProf()
	{
		$this->collTbofertasRelatedByIdMatriculaProf = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertasRelatedByIdMatriculaProf collection (array).
	 *
	 * By default this just sets the collTbofertasRelatedByIdMatriculaProf collection to an empty array (like clearcollTbofertasRelatedByIdMatriculaProf());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertasRelatedByIdMatriculaProf()
	{
		$this->collTbofertasRelatedByIdMatriculaProf = array();
	}

	/**
	 * Gets an array of Tboferta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related TbofertasRelatedByIdMatriculaProf from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tboferta[]
	 * @throws     PropelException
	 */
	public function getTbofertasRelatedByIdMatriculaProf($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
			   $this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				TbofertaPeer::addSelectColumns($criteria);
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				TbofertaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
					$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;
		return $this->collTbofertasRelatedByIdMatriculaProf;
	}

	/**
	 * Returns the number of related Tboferta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tboferta objects.
	 * @throws     PropelException
	 */
	public function countTbofertasRelatedByIdMatriculaProf(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$count = TbofertaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
					$count = TbofertaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertasRelatedByIdMatriculaProf);
				}
			} else {
				$count = count($this->collTbofertasRelatedByIdMatriculaProf);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tboferta object to this object
	 * through the Tboferta foreign key attribute.
	 *
	 * @param      Tboferta $l Tboferta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertaRelatedByIdMatriculaProf(Tboferta $l)
	{
		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			$this->initTbofertasRelatedByIdMatriculaProf();
		}
		if (!in_array($l, $this->collTbofertasRelatedByIdMatriculaProf, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertasRelatedByIdMatriculaProf, $l);
			$l->setTbprofessorRelatedByIdMatriculaProf($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbcursoRelatedByCodCurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbcursoRelatedByCodCursoDestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbsala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbofertasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProfJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProfCriteria) || !$this->lastTbofertaRelatedByIdMatriculaProfCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProfCriteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf;
	}

	/**
	 * Clears out the collTbofertasRelatedByIdMatriculaProf2 collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertasRelatedByIdMatriculaProf2()
	 */
	public function clearTbofertasRelatedByIdMatriculaProf2()
	{
		$this->collTbofertasRelatedByIdMatriculaProf2 = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertasRelatedByIdMatriculaProf2 collection (array).
	 *
	 * By default this just sets the collTbofertasRelatedByIdMatriculaProf2 collection to an empty array (like clearcollTbofertasRelatedByIdMatriculaProf2());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertasRelatedByIdMatriculaProf2()
	{
		$this->collTbofertasRelatedByIdMatriculaProf2 = array();
	}

	/**
	 * Gets an array of Tboferta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related TbofertasRelatedByIdMatriculaProf2 from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tboferta[]
	 * @throws     PropelException
	 */
	public function getTbofertasRelatedByIdMatriculaProf2($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
			   $this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				TbofertaPeer::addSelectColumns($criteria);
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				TbofertaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
					$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;
		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}

	/**
	 * Returns the number of related Tboferta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tboferta objects.
	 * @throws     PropelException
	 */
	public function countTbofertasRelatedByIdMatriculaProf2(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$count = TbofertaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
					$count = TbofertaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertasRelatedByIdMatriculaProf2);
				}
			} else {
				$count = count($this->collTbofertasRelatedByIdMatriculaProf2);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tboferta object to this object
	 * through the Tboferta foreign key attribute.
	 *
	 * @param      Tboferta $l Tboferta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertaRelatedByIdMatriculaProf2(Tboferta $l)
	{
		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			$this->initTbofertasRelatedByIdMatriculaProf2();
		}
		if (!in_array($l, $this->collTbofertasRelatedByIdMatriculaProf2, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertasRelatedByIdMatriculaProf2, $l);
			$l->setTbprofessorRelatedByIdMatriculaProf2($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbcursoRelatedByCodCurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbcursoRelatedByCodCursoDestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbsala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbofertasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbofertasRelatedByIdMatriculaProf2 from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertasRelatedByIdMatriculaProf2JoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByIdMatriculaProf2 === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = array();
			} else {

				$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->matricula_prof);

			if (!isset($this->lastTbofertaRelatedByIdMatriculaProf2Criteria) || !$this->lastTbofertaRelatedByIdMatriculaProf2Criteria->equals($criteria)) {
				$this->collTbofertasRelatedByIdMatriculaProf2 = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByIdMatriculaProf2Criteria = $criteria;

		return $this->collTbofertasRelatedByIdMatriculaProf2;
	}

	/**
	 * Clears out the collTbofertacoordenadors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertacoordenadors()
	 */
	public function clearTbofertacoordenadors()
	{
		$this->collTbofertacoordenadors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertacoordenadors collection (array).
	 *
	 * By default this just sets the collTbofertacoordenadors collection to an empty array (like clearcollTbofertacoordenadors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertacoordenadors()
	{
		$this->collTbofertacoordenadors = array();
	}

	/**
	 * Gets an array of Tbofertacoordenador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related Tbofertacoordenadors from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbofertacoordenador[]
	 * @throws     PropelException
	 */
	public function getTbofertacoordenadors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertacoordenadors === null) {
			if ($this->isNew()) {
			   $this->collTbofertacoordenadors = array();
			} else {

				$criteria->add(TbofertacoordenadorPeer::MATRICULA_PROF, $this->matricula_prof);

				TbofertacoordenadorPeer::addSelectColumns($criteria);
				$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertacoordenadorPeer::MATRICULA_PROF, $this->matricula_prof);

				TbofertacoordenadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertacoordenadorCriteria) || !$this->lastTbofertacoordenadorCriteria->equals($criteria)) {
					$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertacoordenadorCriteria = $criteria;
		return $this->collTbofertacoordenadors;
	}

	/**
	 * Returns the number of related Tbofertacoordenador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbofertacoordenador objects.
	 * @throws     PropelException
	 */
	public function countTbofertacoordenadors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertacoordenadors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertacoordenadorPeer::MATRICULA_PROF, $this->matricula_prof);

				$count = TbofertacoordenadorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertacoordenadorPeer::MATRICULA_PROF, $this->matricula_prof);

				if (!isset($this->lastTbofertacoordenadorCriteria) || !$this->lastTbofertacoordenadorCriteria->equals($criteria)) {
					$count = TbofertacoordenadorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertacoordenadors);
				}
			} else {
				$count = count($this->collTbofertacoordenadors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbofertacoordenador object to this object
	 * through the Tbofertacoordenador foreign key attribute.
	 *
	 * @param      Tbofertacoordenador $l Tbofertacoordenador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertacoordenador(Tbofertacoordenador $l)
	{
		if ($this->collTbofertacoordenadors === null) {
			$this->initTbofertacoordenadors();
		}
		if (!in_array($l, $this->collTbofertacoordenadors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertacoordenadors, $l);
			$l->setTbprofessor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related Tbofertacoordenadors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbofertacoordenadorsJoinTboferta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertacoordenadors === null) {
			if ($this->isNew()) {
				$this->collTbofertacoordenadors = array();
			} else {

				$criteria->add(TbofertacoordenadorPeer::MATRICULA_PROF, $this->matricula_prof);

				$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertacoordenadorPeer::MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbofertacoordenadorCriteria) || !$this->lastTbofertacoordenadorCriteria->equals($criteria)) {
				$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertacoordenadorCriteria = $criteria;

		return $this->collTbofertacoordenadors;
	}

	/**
	 * Clears out the collTbcoordenadorcursos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbcoordenadorcursos()
	 */
	public function clearTbcoordenadorcursos()
	{
		$this->collTbcoordenadorcursos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbcoordenadorcursos collection (array).
	 *
	 * By default this just sets the collTbcoordenadorcursos collection to an empty array (like clearcollTbcoordenadorcursos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbcoordenadorcursos()
	{
		$this->collTbcoordenadorcursos = array();
	}

	/**
	 * Gets an array of Tbcoordenadorcurso objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related Tbcoordenadorcursos from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbcoordenadorcurso[]
	 * @throws     PropelException
	 */
	public function getTbcoordenadorcursos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcoordenadorcursos === null) {
			if ($this->isNew()) {
			   $this->collTbcoordenadorcursos = array();
			} else {

				$criteria->add(TbcoordenadorcursoPeer::MATRICULA_PROF, $this->matricula_prof);

				TbcoordenadorcursoPeer::addSelectColumns($criteria);
				$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbcoordenadorcursoPeer::MATRICULA_PROF, $this->matricula_prof);

				TbcoordenadorcursoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbcoordenadorcursoCriteria) || !$this->lastTbcoordenadorcursoCriteria->equals($criteria)) {
					$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbcoordenadorcursoCriteria = $criteria;
		return $this->collTbcoordenadorcursos;
	}

	/**
	 * Returns the number of related Tbcoordenadorcurso objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbcoordenadorcurso objects.
	 * @throws     PropelException
	 */
	public function countTbcoordenadorcursos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbcoordenadorcursos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbcoordenadorcursoPeer::MATRICULA_PROF, $this->matricula_prof);

				$count = TbcoordenadorcursoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbcoordenadorcursoPeer::MATRICULA_PROF, $this->matricula_prof);

				if (!isset($this->lastTbcoordenadorcursoCriteria) || !$this->lastTbcoordenadorcursoCriteria->equals($criteria)) {
					$count = TbcoordenadorcursoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbcoordenadorcursos);
				}
			} else {
				$count = count($this->collTbcoordenadorcursos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbcoordenadorcurso object to this object
	 * through the Tbcoordenadorcurso foreign key attribute.
	 *
	 * @param      Tbcoordenadorcurso $l Tbcoordenadorcurso
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbcoordenadorcurso(Tbcoordenadorcurso $l)
	{
		if ($this->collTbcoordenadorcursos === null) {
			$this->initTbcoordenadorcursos();
		}
		if (!in_array($l, $this->collTbcoordenadorcursos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbcoordenadorcursos, $l);
			$l->setTbprofessor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related Tbcoordenadorcursos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbcoordenadorcursosJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcoordenadorcursos === null) {
			if ($this->isNew()) {
				$this->collTbcoordenadorcursos = array();
			} else {

				$criteria->add(TbcoordenadorcursoPeer::MATRICULA_PROF, $this->matricula_prof);

				$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcoordenadorcursoPeer::MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbcoordenadorcursoCriteria) || !$this->lastTbcoordenadorcursoCriteria->equals($criteria)) {
				$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcoordenadorcursoCriteria = $criteria;

		return $this->collTbcoordenadorcursos;
	}

	/**
	 * Clears out the collTbprofessorsenhas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbprofessorsenhas()
	 */
	public function clearTbprofessorsenhas()
	{
		$this->collTbprofessorsenhas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbprofessorsenhas collection (array).
	 *
	 * By default this just sets the collTbprofessorsenhas collection to an empty array (like clearcollTbprofessorsenhas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbprofessorsenhas()
	{
		$this->collTbprofessorsenhas = array();
	}

	/**
	 * Gets an array of Tbprofessorsenha objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related Tbprofessorsenhas from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbprofessorsenha[]
	 * @throws     PropelException
	 */
	public function getTbprofessorsenhas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessorsenhas === null) {
			if ($this->isNew()) {
			   $this->collTbprofessorsenhas = array();
			} else {

				$criteria->add(TbprofessorsenhaPeer::MATRICULA_PROF, $this->matricula_prof);

				TbprofessorsenhaPeer::addSelectColumns($criteria);
				$this->collTbprofessorsenhas = TbprofessorsenhaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbprofessorsenhaPeer::MATRICULA_PROF, $this->matricula_prof);

				TbprofessorsenhaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbprofessorsenhaCriteria) || !$this->lastTbprofessorsenhaCriteria->equals($criteria)) {
					$this->collTbprofessorsenhas = TbprofessorsenhaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbprofessorsenhaCriteria = $criteria;
		return $this->collTbprofessorsenhas;
	}

	/**
	 * Returns the number of related Tbprofessorsenha objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbprofessorsenha objects.
	 * @throws     PropelException
	 */
	public function countTbprofessorsenhas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbprofessorsenhas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbprofessorsenhaPeer::MATRICULA_PROF, $this->matricula_prof);

				$count = TbprofessorsenhaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbprofessorsenhaPeer::MATRICULA_PROF, $this->matricula_prof);

				if (!isset($this->lastTbprofessorsenhaCriteria) || !$this->lastTbprofessorsenhaCriteria->equals($criteria)) {
					$count = TbprofessorsenhaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbprofessorsenhas);
				}
			} else {
				$count = count($this->collTbprofessorsenhas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbprofessorsenha object to this object
	 * through the Tbprofessorsenha foreign key attribute.
	 *
	 * @param      Tbprofessorsenha $l Tbprofessorsenha
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbprofessorsenha(Tbprofessorsenha $l)
	{
		if ($this->collTbprofessorsenhas === null) {
			$this->initTbprofessorsenhas();
		}
		if (!in_array($l, $this->collTbprofessorsenhas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbprofessorsenhas, $l);
			$l->setTbprofessor($this);
		}
	}

	/**
	 * Clears out the collTbprofessortickets collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbprofessortickets()
	 */
	public function clearTbprofessortickets()
	{
		$this->collTbprofessortickets = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbprofessortickets collection (array).
	 *
	 * By default this just sets the collTbprofessortickets collection to an empty array (like clearcollTbprofessortickets());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbprofessortickets()
	{
		$this->collTbprofessortickets = array();
	}

	/**
	 * Gets an array of Tbprofessorticket objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related Tbprofessortickets from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbprofessorticket[]
	 * @throws     PropelException
	 */
	public function getTbprofessortickets($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessortickets === null) {
			if ($this->isNew()) {
			   $this->collTbprofessortickets = array();
			} else {

				$criteria->add(TbprofessorticketPeer::MATRICULA_PROF, $this->matricula_prof);

				TbprofessorticketPeer::addSelectColumns($criteria);
				$this->collTbprofessortickets = TbprofessorticketPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbprofessorticketPeer::MATRICULA_PROF, $this->matricula_prof);

				TbprofessorticketPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbprofessorticketCriteria) || !$this->lastTbprofessorticketCriteria->equals($criteria)) {
					$this->collTbprofessortickets = TbprofessorticketPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbprofessorticketCriteria = $criteria;
		return $this->collTbprofessortickets;
	}

	/**
	 * Returns the number of related Tbprofessorticket objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbprofessorticket objects.
	 * @throws     PropelException
	 */
	public function countTbprofessortickets(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbprofessortickets === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbprofessorticketPeer::MATRICULA_PROF, $this->matricula_prof);

				$count = TbprofessorticketPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbprofessorticketPeer::MATRICULA_PROF, $this->matricula_prof);

				if (!isset($this->lastTbprofessorticketCriteria) || !$this->lastTbprofessorticketCriteria->equals($criteria)) {
					$count = TbprofessorticketPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbprofessortickets);
				}
			} else {
				$count = count($this->collTbprofessortickets);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbprofessorticket object to this object
	 * through the Tbprofessorticket foreign key attribute.
	 *
	 * @param      Tbprofessorticket $l Tbprofessorticket
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbprofessorticket(Tbprofessorticket $l)
	{
		if ($this->collTbprofessortickets === null) {
			$this->initTbprofessortickets();
		}
		if (!in_array($l, $this->collTbprofessortickets, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbprofessortickets, $l);
			$l->setTbprofessor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related Tbprofessortickets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbprofessorticketsJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessortickets === null) {
			if ($this->isNew()) {
				$this->collTbprofessortickets = array();
			} else {

				$criteria->add(TbprofessorticketPeer::MATRICULA_PROF, $this->matricula_prof);

				$this->collTbprofessortickets = TbprofessorticketPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorticketPeer::MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbprofessorticketCriteria) || !$this->lastTbprofessorticketCriteria->equals($criteria)) {
				$this->collTbprofessortickets = TbprofessorticketPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorticketCriteria = $criteria;

		return $this->collTbprofessortickets;
	}

	/**
	 * Clears out the collTbturmaProfessors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbturmaProfessors()
	 */
	public function clearTbturmaProfessors()
	{
		$this->collTbturmaProfessors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbturmaProfessors collection (array).
	 *
	 * By default this just sets the collTbturmaProfessors collection to an empty array (like clearcollTbturmaProfessors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbturmaProfessors()
	{
		$this->collTbturmaProfessors = array();
	}

	/**
	 * Gets an array of TbturmaProfessor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbprofessor has previously been saved, it will retrieve
	 * related TbturmaProfessors from storage. If this Tbprofessor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TbturmaProfessor[]
	 * @throws     PropelException
	 */
	public function getTbturmaProfessors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmaProfessors === null) {
			if ($this->isNew()) {
			   $this->collTbturmaProfessors = array();
			} else {

				$criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->matricula_prof);

				TbturmaProfessorPeer::addSelectColumns($criteria);
				$this->collTbturmaProfessors = TbturmaProfessorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->matricula_prof);

				TbturmaProfessorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbturmaProfessorCriteria) || !$this->lastTbturmaProfessorCriteria->equals($criteria)) {
					$this->collTbturmaProfessors = TbturmaProfessorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbturmaProfessorCriteria = $criteria;
		return $this->collTbturmaProfessors;
	}

	/**
	 * Returns the number of related TbturmaProfessor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TbturmaProfessor objects.
	 * @throws     PropelException
	 */
	public function countTbturmaProfessors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbturmaProfessors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->matricula_prof);

				$count = TbturmaProfessorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->matricula_prof);

				if (!isset($this->lastTbturmaProfessorCriteria) || !$this->lastTbturmaProfessorCriteria->equals($criteria)) {
					$count = TbturmaProfessorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbturmaProfessors);
				}
			} else {
				$count = count($this->collTbturmaProfessors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TbturmaProfessor object to this object
	 * through the TbturmaProfessor foreign key attribute.
	 *
	 * @param      TbturmaProfessor $l TbturmaProfessor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbturmaProfessor(TbturmaProfessor $l)
	{
		if ($this->collTbturmaProfessors === null) {
			$this->initTbturmaProfessors();
		}
		if (!in_array($l, $this->collTbturmaProfessors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbturmaProfessors, $l);
			$l->setTbprofessor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbprofessor is new, it will return
	 * an empty collection; or if this Tbprofessor has previously
	 * been saved, it will retrieve related TbturmaProfessors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbprofessor.
	 */
	public function getTbturmaProfessorsJoinTbturma($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbprofessorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmaProfessors === null) {
			if ($this->isNew()) {
				$this->collTbturmaProfessors = array();
			} else {

				$criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->matricula_prof);

				$this->collTbturmaProfessors = TbturmaProfessorPeer::doSelectJoinTbturma($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->matricula_prof);

			if (!isset($this->lastTbturmaProfessorCriteria) || !$this->lastTbturmaProfessorCriteria->equals($criteria)) {
				$this->collTbturmaProfessors = TbturmaProfessorPeer::doSelectJoinTbturma($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaProfessorCriteria = $criteria;

		return $this->collTbturmaProfessors;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTbofertasRelatedByIdMatriculaProf) {
				foreach ((array) $this->collTbofertasRelatedByIdMatriculaProf as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertasRelatedByIdMatriculaProf2) {
				foreach ((array) $this->collTbofertasRelatedByIdMatriculaProf2 as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertacoordenadors) {
				foreach ((array) $this->collTbofertacoordenadors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbcoordenadorcursos) {
				foreach ((array) $this->collTbcoordenadorcursos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbprofessorsenhas) {
				foreach ((array) $this->collTbprofessorsenhas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbprofessortickets) {
				foreach ((array) $this->collTbprofessortickets as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbturmaProfessors) {
				foreach ((array) $this->collTbturmaProfessors as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTbofertasRelatedByIdMatriculaProf = null;
		$this->collTbofertasRelatedByIdMatriculaProf2 = null;
		$this->collTbofertacoordenadors = null;
		$this->collTbcoordenadorcursos = null;
		$this->collTbprofessorsenhas = null;
		$this->collTbprofessortickets = null;
		$this->collTbturmaProfessors = null;
			$this->aTbnecesespecial = null;
			$this->aTbcurso = null;
			$this->aTbproftipovinculo = null;
			$this->aTbformacao = null;
			$this->aTbprofessorsituacao = null;
			$this->aTbsetor = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTbprofessor:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTbprofessor::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTbprofessor
