<?php


/**
 * Base class that represents a query for the 'tbperiodo' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbperiodoQuery orderByIdPeriodo($order = Criteria::ASC) Order by the id_periodo column
 * @method TbperiodoQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbperiodoQuery orderByAno($order = Criteria::ASC) Order by the ano column
 * @method TbperiodoQuery orderBySemestre($order = Criteria::ASC) Order by the semestre column
 * @method TbperiodoQuery orderByPeriodo($order = Criteria::ASC) Order by the periodo column
 * @method TbperiodoQuery orderByDtInicio($order = Criteria::ASC) Order by the dt_inicio column
 * @method TbperiodoQuery orderByDtFim($order = Criteria::ASC) Order by the dt_fim column
 * @method TbperiodoQuery orderByDtFimNotas($order = Criteria::ASC) Order by the dt_fim_notas column
 * @method TbperiodoQuery orderByDtInicioOferta($order = Criteria::ASC) Order by the dt_inicio_oferta column
 * @method TbperiodoQuery orderByDtFimOferta($order = Criteria::ASC) Order by the dt_fim_oferta column
 * @method TbperiodoQuery orderByDtInicioFila($order = Criteria::ASC) Order by the dt_inicio_fila column
 * @method TbperiodoQuery orderByDtFimFila($order = Criteria::ASC) Order by the dt_fim_fila column
 * @method TbperiodoQuery orderByDtInicioResultado($order = Criteria::ASC) Order by the dt_inicio_resultado column
 * @method TbperiodoQuery orderByDtFimResultado($order = Criteria::ASC) Order by the dt_fim_resultado column
 * @method TbperiodoQuery orderByDtInicioOfertaCadastro($order = Criteria::ASC) Order by the dt_inicio_oferta_cadastro column
 * @method TbperiodoQuery orderByDtFimOfertaCadastro($order = Criteria::ASC) Order by the dt_fim_oferta_cadastro column
 * @method TbperiodoQuery orderByDtInicioCadastro($order = Criteria::ASC) Order by the dt_inicio_cadastro column
 * @method TbperiodoQuery orderByDtFimCadastro($order = Criteria::ASC) Order by the dt_fim_cadastro column
 * @method TbperiodoQuery orderByDtInicioAjuste($order = Criteria::ASC) Order by the dt_inicio_ajuste column
 * @method TbperiodoQuery orderByDtFimAjuste($order = Criteria::ASC) Order by the dt_fim_ajuste column
 * @method TbperiodoQuery orderByDtInicioAjusteFila($order = Criteria::ASC) Order by the dt_inicio_ajuste_fila column
 * @method TbperiodoQuery orderByDtFimAjusteFila($order = Criteria::ASC) Order by the dt_fim_ajuste_fila column
 * @method TbperiodoQuery orderByDtInicioAjusteResultado($order = Criteria::ASC) Order by the dt_inicio_ajuste_resultado column
 * @method TbperiodoQuery orderByDtFimAjusteResultado($order = Criteria::ASC) Order by the dt_fim_ajuste_resultado column
 * @method TbperiodoQuery orderByDtInicioTrancamento($order = Criteria::ASC) Order by the dt_inicio_trancamento column
 * @method TbperiodoQuery orderByDtFimTrancamento($order = Criteria::ASC) Order by the dt_fim_trancamento column
 * @method TbperiodoQuery orderBySucinto($order = Criteria::ASC) Order by the sucinto column
 * @method TbperiodoQuery orderByIdNivel($order = Criteria::ASC) Order by the id_nivel column
 * @method TbperiodoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbperiodoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbperiodoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbperiodoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbperiodoQuery groupByIdPeriodo() Group by the id_periodo column
 * @method TbperiodoQuery groupByDescricao() Group by the descricao column
 * @method TbperiodoQuery groupByAno() Group by the ano column
 * @method TbperiodoQuery groupBySemestre() Group by the semestre column
 * @method TbperiodoQuery groupByPeriodo() Group by the periodo column
 * @method TbperiodoQuery groupByDtInicio() Group by the dt_inicio column
 * @method TbperiodoQuery groupByDtFim() Group by the dt_fim column
 * @method TbperiodoQuery groupByDtFimNotas() Group by the dt_fim_notas column
 * @method TbperiodoQuery groupByDtInicioOferta() Group by the dt_inicio_oferta column
 * @method TbperiodoQuery groupByDtFimOferta() Group by the dt_fim_oferta column
 * @method TbperiodoQuery groupByDtInicioFila() Group by the dt_inicio_fila column
 * @method TbperiodoQuery groupByDtFimFila() Group by the dt_fim_fila column
 * @method TbperiodoQuery groupByDtInicioResultado() Group by the dt_inicio_resultado column
 * @method TbperiodoQuery groupByDtFimResultado() Group by the dt_fim_resultado column
 * @method TbperiodoQuery groupByDtInicioOfertaCadastro() Group by the dt_inicio_oferta_cadastro column
 * @method TbperiodoQuery groupByDtFimOfertaCadastro() Group by the dt_fim_oferta_cadastro column
 * @method TbperiodoQuery groupByDtInicioCadastro() Group by the dt_inicio_cadastro column
 * @method TbperiodoQuery groupByDtFimCadastro() Group by the dt_fim_cadastro column
 * @method TbperiodoQuery groupByDtInicioAjuste() Group by the dt_inicio_ajuste column
 * @method TbperiodoQuery groupByDtFimAjuste() Group by the dt_fim_ajuste column
 * @method TbperiodoQuery groupByDtInicioAjusteFila() Group by the dt_inicio_ajuste_fila column
 * @method TbperiodoQuery groupByDtFimAjusteFila() Group by the dt_fim_ajuste_fila column
 * @method TbperiodoQuery groupByDtInicioAjusteResultado() Group by the dt_inicio_ajuste_resultado column
 * @method TbperiodoQuery groupByDtFimAjusteResultado() Group by the dt_fim_ajuste_resultado column
 * @method TbperiodoQuery groupByDtInicioTrancamento() Group by the dt_inicio_trancamento column
 * @method TbperiodoQuery groupByDtFimTrancamento() Group by the dt_fim_trancamento column
 * @method TbperiodoQuery groupBySucinto() Group by the sucinto column
 * @method TbperiodoQuery groupByIdNivel() Group by the id_nivel column
 * @method TbperiodoQuery groupByCreatedAt() Group by the created_at column
 * @method TbperiodoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbperiodoQuery groupByCreatedBy() Group by the created_by column
 * @method TbperiodoQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbperiodoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbperiodoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbperiodoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbperiodoQuery leftJoinTbcursonivel($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcursonivel relation
 * @method TbperiodoQuery rightJoinTbcursonivel($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcursonivel relation
 * @method TbperiodoQuery innerJoinTbcursonivel($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcursonivel relation
 *
 * @method TbperiodoQuery leftJoinTbfilacalouros($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbfilacalouros relation
 * @method TbperiodoQuery rightJoinTbfilacalouros($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbfilacalouros relation
 * @method TbperiodoQuery innerJoinTbfilacalouros($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbfilacalouros relation
 *
 * @method TbperiodoQuery leftJoinTbhistorico($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbhistorico relation
 * @method TbperiodoQuery rightJoinTbhistorico($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbhistorico relation
 * @method TbperiodoQuery innerJoinTbhistorico($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbhistorico relation
 *
 * @method TbperiodoQuery leftJoinTboferta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tboferta relation
 * @method TbperiodoQuery rightJoinTboferta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tboferta relation
 * @method TbperiodoQuery innerJoinTboferta($relationAlias = null) Adds a INNER JOIN clause to the query using the Tboferta relation
 *
 * @method TbperiodoQuery leftJoinTbprofessorticket($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbprofessorticket relation
 * @method TbperiodoQuery rightJoinTbprofessorticket($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbprofessorticket relation
 * @method TbperiodoQuery innerJoinTbprofessorticket($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbprofessorticket relation
 *
 * @method TbperiodoQuery leftJoinTbturma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturma relation
 * @method TbperiodoQuery rightJoinTbturma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturma relation
 * @method TbperiodoQuery innerJoinTbturma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturma relation
 *
 * @method Tbperiodo findOne(PropelPDO $con = null) Return the first Tbperiodo matching the query
 * @method Tbperiodo findOneOrCreate(PropelPDO $con = null) Return the first Tbperiodo matching the query, or a new Tbperiodo object populated from the query conditions when no match is found
 *
 * @method Tbperiodo findOneByIdPeriodo(int $id_periodo) Return the first Tbperiodo filtered by the id_periodo column
 * @method Tbperiodo findOneByDescricao(string $descricao) Return the first Tbperiodo filtered by the descricao column
 * @method Tbperiodo findOneByAno(int $ano) Return the first Tbperiodo filtered by the ano column
 * @method Tbperiodo findOneBySemestre(int $semestre) Return the first Tbperiodo filtered by the semestre column
 * @method Tbperiodo findOneByPeriodo(int $periodo) Return the first Tbperiodo filtered by the periodo column
 * @method Tbperiodo findOneByDtInicio(string $dt_inicio) Return the first Tbperiodo filtered by the dt_inicio column
 * @method Tbperiodo findOneByDtFim(string $dt_fim) Return the first Tbperiodo filtered by the dt_fim column
 * @method Tbperiodo findOneByDtFimNotas(string $dt_fim_notas) Return the first Tbperiodo filtered by the dt_fim_notas column
 * @method Tbperiodo findOneByDtInicioOferta(string $dt_inicio_oferta) Return the first Tbperiodo filtered by the dt_inicio_oferta column
 * @method Tbperiodo findOneByDtFimOferta(string $dt_fim_oferta) Return the first Tbperiodo filtered by the dt_fim_oferta column
 * @method Tbperiodo findOneByDtInicioFila(string $dt_inicio_fila) Return the first Tbperiodo filtered by the dt_inicio_fila column
 * @method Tbperiodo findOneByDtFimFila(string $dt_fim_fila) Return the first Tbperiodo filtered by the dt_fim_fila column
 * @method Tbperiodo findOneByDtInicioResultado(string $dt_inicio_resultado) Return the first Tbperiodo filtered by the dt_inicio_resultado column
 * @method Tbperiodo findOneByDtFimResultado(string $dt_fim_resultado) Return the first Tbperiodo filtered by the dt_fim_resultado column
 * @method Tbperiodo findOneByDtInicioOfertaCadastro(string $dt_inicio_oferta_cadastro) Return the first Tbperiodo filtered by the dt_inicio_oferta_cadastro column
 * @method Tbperiodo findOneByDtFimOfertaCadastro(string $dt_fim_oferta_cadastro) Return the first Tbperiodo filtered by the dt_fim_oferta_cadastro column
 * @method Tbperiodo findOneByDtInicioCadastro(string $dt_inicio_cadastro) Return the first Tbperiodo filtered by the dt_inicio_cadastro column
 * @method Tbperiodo findOneByDtFimCadastro(string $dt_fim_cadastro) Return the first Tbperiodo filtered by the dt_fim_cadastro column
 * @method Tbperiodo findOneByDtInicioAjuste(string $dt_inicio_ajuste) Return the first Tbperiodo filtered by the dt_inicio_ajuste column
 * @method Tbperiodo findOneByDtFimAjuste(string $dt_fim_ajuste) Return the first Tbperiodo filtered by the dt_fim_ajuste column
 * @method Tbperiodo findOneByDtInicioAjusteFila(string $dt_inicio_ajuste_fila) Return the first Tbperiodo filtered by the dt_inicio_ajuste_fila column
 * @method Tbperiodo findOneByDtFimAjusteFila(string $dt_fim_ajuste_fila) Return the first Tbperiodo filtered by the dt_fim_ajuste_fila column
 * @method Tbperiodo findOneByDtInicioAjusteResultado(string $dt_inicio_ajuste_resultado) Return the first Tbperiodo filtered by the dt_inicio_ajuste_resultado column
 * @method Tbperiodo findOneByDtFimAjusteResultado(string $dt_fim_ajuste_resultado) Return the first Tbperiodo filtered by the dt_fim_ajuste_resultado column
 * @method Tbperiodo findOneByDtInicioTrancamento(string $dt_inicio_trancamento) Return the first Tbperiodo filtered by the dt_inicio_trancamento column
 * @method Tbperiodo findOneByDtFimTrancamento(string $dt_fim_trancamento) Return the first Tbperiodo filtered by the dt_fim_trancamento column
 * @method Tbperiodo findOneBySucinto(string $sucinto) Return the first Tbperiodo filtered by the sucinto column
 * @method Tbperiodo findOneByIdNivel(int $id_nivel) Return the first Tbperiodo filtered by the id_nivel column
 * @method Tbperiodo findOneByCreatedAt(string $created_at) Return the first Tbperiodo filtered by the created_at column
 * @method Tbperiodo findOneByUpdatedAt(string $updated_at) Return the first Tbperiodo filtered by the updated_at column
 * @method Tbperiodo findOneByCreatedBy(string $created_by) Return the first Tbperiodo filtered by the created_by column
 * @method Tbperiodo findOneByUpdatedBy(string $updated_by) Return the first Tbperiodo filtered by the updated_by column
 *
 * @method array findByIdPeriodo(int $id_periodo) Return Tbperiodo objects filtered by the id_periodo column
 * @method array findByDescricao(string $descricao) Return Tbperiodo objects filtered by the descricao column
 * @method array findByAno(int $ano) Return Tbperiodo objects filtered by the ano column
 * @method array findBySemestre(int $semestre) Return Tbperiodo objects filtered by the semestre column
 * @method array findByPeriodo(int $periodo) Return Tbperiodo objects filtered by the periodo column
 * @method array findByDtInicio(string $dt_inicio) Return Tbperiodo objects filtered by the dt_inicio column
 * @method array findByDtFim(string $dt_fim) Return Tbperiodo objects filtered by the dt_fim column
 * @method array findByDtFimNotas(string $dt_fim_notas) Return Tbperiodo objects filtered by the dt_fim_notas column
 * @method array findByDtInicioOferta(string $dt_inicio_oferta) Return Tbperiodo objects filtered by the dt_inicio_oferta column
 * @method array findByDtFimOferta(string $dt_fim_oferta) Return Tbperiodo objects filtered by the dt_fim_oferta column
 * @method array findByDtInicioFila(string $dt_inicio_fila) Return Tbperiodo objects filtered by the dt_inicio_fila column
 * @method array findByDtFimFila(string $dt_fim_fila) Return Tbperiodo objects filtered by the dt_fim_fila column
 * @method array findByDtInicioResultado(string $dt_inicio_resultado) Return Tbperiodo objects filtered by the dt_inicio_resultado column
 * @method array findByDtFimResultado(string $dt_fim_resultado) Return Tbperiodo objects filtered by the dt_fim_resultado column
 * @method array findByDtInicioOfertaCadastro(string $dt_inicio_oferta_cadastro) Return Tbperiodo objects filtered by the dt_inicio_oferta_cadastro column
 * @method array findByDtFimOfertaCadastro(string $dt_fim_oferta_cadastro) Return Tbperiodo objects filtered by the dt_fim_oferta_cadastro column
 * @method array findByDtInicioCadastro(string $dt_inicio_cadastro) Return Tbperiodo objects filtered by the dt_inicio_cadastro column
 * @method array findByDtFimCadastro(string $dt_fim_cadastro) Return Tbperiodo objects filtered by the dt_fim_cadastro column
 * @method array findByDtInicioAjuste(string $dt_inicio_ajuste) Return Tbperiodo objects filtered by the dt_inicio_ajuste column
 * @method array findByDtFimAjuste(string $dt_fim_ajuste) Return Tbperiodo objects filtered by the dt_fim_ajuste column
 * @method array findByDtInicioAjusteFila(string $dt_inicio_ajuste_fila) Return Tbperiodo objects filtered by the dt_inicio_ajuste_fila column
 * @method array findByDtFimAjusteFila(string $dt_fim_ajuste_fila) Return Tbperiodo objects filtered by the dt_fim_ajuste_fila column
 * @method array findByDtInicioAjusteResultado(string $dt_inicio_ajuste_resultado) Return Tbperiodo objects filtered by the dt_inicio_ajuste_resultado column
 * @method array findByDtFimAjusteResultado(string $dt_fim_ajuste_resultado) Return Tbperiodo objects filtered by the dt_fim_ajuste_resultado column
 * @method array findByDtInicioTrancamento(string $dt_inicio_trancamento) Return Tbperiodo objects filtered by the dt_inicio_trancamento column
 * @method array findByDtFimTrancamento(string $dt_fim_trancamento) Return Tbperiodo objects filtered by the dt_fim_trancamento column
 * @method array findBySucinto(string $sucinto) Return Tbperiodo objects filtered by the sucinto column
 * @method array findByIdNivel(int $id_nivel) Return Tbperiodo objects filtered by the id_nivel column
 * @method array findByCreatedAt(string $created_at) Return Tbperiodo objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbperiodo objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbperiodo objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbperiodo objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbperiodoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbperiodoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbperiodo', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbperiodoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbperiodoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbperiodoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbperiodoQuery) {
            return $criteria;
        }
        $query = new TbperiodoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbperiodo|Tbperiodo[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbperiodoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbperiodoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbperiodo A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_PERIODO, DESCRICAO, ANO, SEMESTRE, PERIODO, DT_INICIO, DT_FIM, DT_FIM_NOTAS, DT_INICIO_OFERTA, DT_FIM_OFERTA, DT_INICIO_FILA, DT_FIM_FILA, DT_INICIO_RESULTADO, DT_FIM_RESULTADO, DT_INICIO_OFERTA_CADASTRO, DT_FIM_OFERTA_CADASTRO, DT_INICIO_CADASTRO, DT_FIM_CADASTRO, DT_INICIO_AJUSTE, DT_FIM_AJUSTE, DT_INICIO_AJUSTE_FILA, DT_FIM_AJUSTE_FILA, DT_INICIO_AJUSTE_RESULTADO, DT_FIM_AJUSTE_RESULTADO, DT_INICIO_TRANCAMENTO, DT_FIM_TRANCAMENTO, SUCINTO, ID_NIVEL, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbperiodo WHERE ID_PERIODO = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbperiodo();
            $obj->hydrate($row);
            TbperiodoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbperiodo|Tbperiodo[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbperiodo[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbperiodoPeer::ID_PERIODO, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbperiodoPeer::ID_PERIODO, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPeriodo(1234); // WHERE id_periodo = 1234
     * $query->filterByIdPeriodo(array(12, 34)); // WHERE id_periodo IN (12, 34)
     * $query->filterByIdPeriodo(array('min' => 12)); // WHERE id_periodo > 12
     * </code>
     *
     * @param     mixed $idPeriodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByIdPeriodo($idPeriodo = null, $comparison = null)
    {
        if (is_array($idPeriodo) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbperiodoPeer::ID_PERIODO, $idPeriodo, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the ano column
     *
     * Example usage:
     * <code>
     * $query->filterByAno(1234); // WHERE ano = 1234
     * $query->filterByAno(array(12, 34)); // WHERE ano IN (12, 34)
     * $query->filterByAno(array('min' => 12)); // WHERE ano > 12
     * </code>
     *
     * @param     mixed $ano The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByAno($ano = null, $comparison = null)
    {
        if (is_array($ano)) {
            $useMinMax = false;
            if (isset($ano['min'])) {
                $this->addUsingAlias(TbperiodoPeer::ANO, $ano['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ano['max'])) {
                $this->addUsingAlias(TbperiodoPeer::ANO, $ano['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::ANO, $ano, $comparison);
    }

    /**
     * Filter the query on the semestre column
     *
     * Example usage:
     * <code>
     * $query->filterBySemestre(1234); // WHERE semestre = 1234
     * $query->filterBySemestre(array(12, 34)); // WHERE semestre IN (12, 34)
     * $query->filterBySemestre(array('min' => 12)); // WHERE semestre > 12
     * </code>
     *
     * @param     mixed $semestre The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterBySemestre($semestre = null, $comparison = null)
    {
        if (is_array($semestre)) {
            $useMinMax = false;
            if (isset($semestre['min'])) {
                $this->addUsingAlias(TbperiodoPeer::SEMESTRE, $semestre['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($semestre['max'])) {
                $this->addUsingAlias(TbperiodoPeer::SEMESTRE, $semestre['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::SEMESTRE, $semestre, $comparison);
    }

    /**
     * Filter the query on the periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByPeriodo(1234); // WHERE periodo = 1234
     * $query->filterByPeriodo(array(12, 34)); // WHERE periodo IN (12, 34)
     * $query->filterByPeriodo(array('min' => 12)); // WHERE periodo > 12
     * </code>
     *
     * @param     mixed $periodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByPeriodo($periodo = null, $comparison = null)
    {
        if (is_array($periodo)) {
            $useMinMax = false;
            if (isset($periodo['min'])) {
                $this->addUsingAlias(TbperiodoPeer::PERIODO, $periodo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($periodo['max'])) {
                $this->addUsingAlias(TbperiodoPeer::PERIODO, $periodo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::PERIODO, $periodo, $comparison);
    }

    /**
     * Filter the query on the dt_inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicio('2011-03-14'); // WHERE dt_inicio = '2011-03-14'
     * $query->filterByDtInicio('now'); // WHERE dt_inicio = '2011-03-14'
     * $query->filterByDtInicio(array('max' => 'yesterday')); // WHERE dt_inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicio($dtInicio = null, $comparison = null)
    {
        if (is_array($dtInicio)) {
            $useMinMax = false;
            if (isset($dtInicio['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO, $dtInicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicio['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO, $dtInicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO, $dtInicio, $comparison);
    }

    /**
     * Filter the query on the dt_fim column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFim('2011-03-14'); // WHERE dt_fim = '2011-03-14'
     * $query->filterByDtFim('now'); // WHERE dt_fim = '2011-03-14'
     * $query->filterByDtFim(array('max' => 'yesterday')); // WHERE dt_fim > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFim The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFim($dtFim = null, $comparison = null)
    {
        if (is_array($dtFim)) {
            $useMinMax = false;
            if (isset($dtFim['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM, $dtFim['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFim['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM, $dtFim['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM, $dtFim, $comparison);
    }

    /**
     * Filter the query on the dt_fim_notas column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimNotas('2011-03-14'); // WHERE dt_fim_notas = '2011-03-14'
     * $query->filterByDtFimNotas('now'); // WHERE dt_fim_notas = '2011-03-14'
     * $query->filterByDtFimNotas(array('max' => 'yesterday')); // WHERE dt_fim_notas > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimNotas The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimNotas($dtFimNotas = null, $comparison = null)
    {
        if (is_array($dtFimNotas)) {
            $useMinMax = false;
            if (isset($dtFimNotas['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_NOTAS, $dtFimNotas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimNotas['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_NOTAS, $dtFimNotas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_NOTAS, $dtFimNotas, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_oferta column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioOferta('2011-03-14'); // WHERE dt_inicio_oferta = '2011-03-14'
     * $query->filterByDtInicioOferta('now'); // WHERE dt_inicio_oferta = '2011-03-14'
     * $query->filterByDtInicioOferta(array('max' => 'yesterday')); // WHERE dt_inicio_oferta > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioOferta The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioOferta($dtInicioOferta = null, $comparison = null)
    {
        if (is_array($dtInicioOferta)) {
            $useMinMax = false;
            if (isset($dtInicioOferta['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_OFERTA, $dtInicioOferta['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioOferta['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_OFERTA, $dtInicioOferta['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_OFERTA, $dtInicioOferta, $comparison);
    }

    /**
     * Filter the query on the dt_fim_oferta column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimOferta('2011-03-14'); // WHERE dt_fim_oferta = '2011-03-14'
     * $query->filterByDtFimOferta('now'); // WHERE dt_fim_oferta = '2011-03-14'
     * $query->filterByDtFimOferta(array('max' => 'yesterday')); // WHERE dt_fim_oferta > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimOferta The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimOferta($dtFimOferta = null, $comparison = null)
    {
        if (is_array($dtFimOferta)) {
            $useMinMax = false;
            if (isset($dtFimOferta['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_OFERTA, $dtFimOferta['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimOferta['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_OFERTA, $dtFimOferta['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_OFERTA, $dtFimOferta, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_fila column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioFila('2011-03-14'); // WHERE dt_inicio_fila = '2011-03-14'
     * $query->filterByDtInicioFila('now'); // WHERE dt_inicio_fila = '2011-03-14'
     * $query->filterByDtInicioFila(array('max' => 'yesterday')); // WHERE dt_inicio_fila > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioFila The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioFila($dtInicioFila = null, $comparison = null)
    {
        if (is_array($dtInicioFila)) {
            $useMinMax = false;
            if (isset($dtInicioFila['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_FILA, $dtInicioFila['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioFila['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_FILA, $dtInicioFila['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_FILA, $dtInicioFila, $comparison);
    }

    /**
     * Filter the query on the dt_fim_fila column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimFila('2011-03-14'); // WHERE dt_fim_fila = '2011-03-14'
     * $query->filterByDtFimFila('now'); // WHERE dt_fim_fila = '2011-03-14'
     * $query->filterByDtFimFila(array('max' => 'yesterday')); // WHERE dt_fim_fila > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimFila The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimFila($dtFimFila = null, $comparison = null)
    {
        if (is_array($dtFimFila)) {
            $useMinMax = false;
            if (isset($dtFimFila['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_FILA, $dtFimFila['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimFila['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_FILA, $dtFimFila['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_FILA, $dtFimFila, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_resultado column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioResultado('2011-03-14'); // WHERE dt_inicio_resultado = '2011-03-14'
     * $query->filterByDtInicioResultado('now'); // WHERE dt_inicio_resultado = '2011-03-14'
     * $query->filterByDtInicioResultado(array('max' => 'yesterday')); // WHERE dt_inicio_resultado > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioResultado The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioResultado($dtInicioResultado = null, $comparison = null)
    {
        if (is_array($dtInicioResultado)) {
            $useMinMax = false;
            if (isset($dtInicioResultado['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_RESULTADO, $dtInicioResultado['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioResultado['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_RESULTADO, $dtInicioResultado['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_RESULTADO, $dtInicioResultado, $comparison);
    }

    /**
     * Filter the query on the dt_fim_resultado column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimResultado('2011-03-14'); // WHERE dt_fim_resultado = '2011-03-14'
     * $query->filterByDtFimResultado('now'); // WHERE dt_fim_resultado = '2011-03-14'
     * $query->filterByDtFimResultado(array('max' => 'yesterday')); // WHERE dt_fim_resultado > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimResultado The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimResultado($dtFimResultado = null, $comparison = null)
    {
        if (is_array($dtFimResultado)) {
            $useMinMax = false;
            if (isset($dtFimResultado['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_RESULTADO, $dtFimResultado['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimResultado['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_RESULTADO, $dtFimResultado['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_RESULTADO, $dtFimResultado, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_oferta_cadastro column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioOfertaCadastro('2011-03-14'); // WHERE dt_inicio_oferta_cadastro = '2011-03-14'
     * $query->filterByDtInicioOfertaCadastro('now'); // WHERE dt_inicio_oferta_cadastro = '2011-03-14'
     * $query->filterByDtInicioOfertaCadastro(array('max' => 'yesterday')); // WHERE dt_inicio_oferta_cadastro > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioOfertaCadastro The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioOfertaCadastro($dtInicioOfertaCadastro = null, $comparison = null)
    {
        if (is_array($dtInicioOfertaCadastro)) {
            $useMinMax = false;
            if (isset($dtInicioOfertaCadastro['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO, $dtInicioOfertaCadastro['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioOfertaCadastro['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO, $dtInicioOfertaCadastro['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO, $dtInicioOfertaCadastro, $comparison);
    }

    /**
     * Filter the query on the dt_fim_oferta_cadastro column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimOfertaCadastro('2011-03-14'); // WHERE dt_fim_oferta_cadastro = '2011-03-14'
     * $query->filterByDtFimOfertaCadastro('now'); // WHERE dt_fim_oferta_cadastro = '2011-03-14'
     * $query->filterByDtFimOfertaCadastro(array('max' => 'yesterday')); // WHERE dt_fim_oferta_cadastro > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimOfertaCadastro The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimOfertaCadastro($dtFimOfertaCadastro = null, $comparison = null)
    {
        if (is_array($dtFimOfertaCadastro)) {
            $useMinMax = false;
            if (isset($dtFimOfertaCadastro['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_OFERTA_CADASTRO, $dtFimOfertaCadastro['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimOfertaCadastro['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_OFERTA_CADASTRO, $dtFimOfertaCadastro['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_OFERTA_CADASTRO, $dtFimOfertaCadastro, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_cadastro column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioCadastro('2011-03-14'); // WHERE dt_inicio_cadastro = '2011-03-14'
     * $query->filterByDtInicioCadastro('now'); // WHERE dt_inicio_cadastro = '2011-03-14'
     * $query->filterByDtInicioCadastro(array('max' => 'yesterday')); // WHERE dt_inicio_cadastro > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioCadastro The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioCadastro($dtInicioCadastro = null, $comparison = null)
    {
        if (is_array($dtInicioCadastro)) {
            $useMinMax = false;
            if (isset($dtInicioCadastro['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_CADASTRO, $dtInicioCadastro['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioCadastro['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_CADASTRO, $dtInicioCadastro['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_CADASTRO, $dtInicioCadastro, $comparison);
    }

    /**
     * Filter the query on the dt_fim_cadastro column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimCadastro('2011-03-14'); // WHERE dt_fim_cadastro = '2011-03-14'
     * $query->filterByDtFimCadastro('now'); // WHERE dt_fim_cadastro = '2011-03-14'
     * $query->filterByDtFimCadastro(array('max' => 'yesterday')); // WHERE dt_fim_cadastro > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimCadastro The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimCadastro($dtFimCadastro = null, $comparison = null)
    {
        if (is_array($dtFimCadastro)) {
            $useMinMax = false;
            if (isset($dtFimCadastro['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_CADASTRO, $dtFimCadastro['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimCadastro['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_CADASTRO, $dtFimCadastro['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_CADASTRO, $dtFimCadastro, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_ajuste column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioAjuste('2011-03-14'); // WHERE dt_inicio_ajuste = '2011-03-14'
     * $query->filterByDtInicioAjuste('now'); // WHERE dt_inicio_ajuste = '2011-03-14'
     * $query->filterByDtInicioAjuste(array('max' => 'yesterday')); // WHERE dt_inicio_ajuste > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioAjuste The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioAjuste($dtInicioAjuste = null, $comparison = null)
    {
        if (is_array($dtInicioAjuste)) {
            $useMinMax = false;
            if (isset($dtInicioAjuste['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE, $dtInicioAjuste['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioAjuste['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE, $dtInicioAjuste['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE, $dtInicioAjuste, $comparison);
    }

    /**
     * Filter the query on the dt_fim_ajuste column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimAjuste('2011-03-14'); // WHERE dt_fim_ajuste = '2011-03-14'
     * $query->filterByDtFimAjuste('now'); // WHERE dt_fim_ajuste = '2011-03-14'
     * $query->filterByDtFimAjuste(array('max' => 'yesterday')); // WHERE dt_fim_ajuste > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimAjuste The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimAjuste($dtFimAjuste = null, $comparison = null)
    {
        if (is_array($dtFimAjuste)) {
            $useMinMax = false;
            if (isset($dtFimAjuste['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE, $dtFimAjuste['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimAjuste['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE, $dtFimAjuste['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE, $dtFimAjuste, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_ajuste_fila column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioAjusteFila('2011-03-14'); // WHERE dt_inicio_ajuste_fila = '2011-03-14'
     * $query->filterByDtInicioAjusteFila('now'); // WHERE dt_inicio_ajuste_fila = '2011-03-14'
     * $query->filterByDtInicioAjusteFila(array('max' => 'yesterday')); // WHERE dt_inicio_ajuste_fila > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioAjusteFila The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioAjusteFila($dtInicioAjusteFila = null, $comparison = null)
    {
        if (is_array($dtInicioAjusteFila)) {
            $useMinMax = false;
            if (isset($dtInicioAjusteFila['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE_FILA, $dtInicioAjusteFila['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioAjusteFila['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE_FILA, $dtInicioAjusteFila['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE_FILA, $dtInicioAjusteFila, $comparison);
    }

    /**
     * Filter the query on the dt_fim_ajuste_fila column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimAjusteFila('2011-03-14'); // WHERE dt_fim_ajuste_fila = '2011-03-14'
     * $query->filterByDtFimAjusteFila('now'); // WHERE dt_fim_ajuste_fila = '2011-03-14'
     * $query->filterByDtFimAjusteFila(array('max' => 'yesterday')); // WHERE dt_fim_ajuste_fila > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimAjusteFila The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimAjusteFila($dtFimAjusteFila = null, $comparison = null)
    {
        if (is_array($dtFimAjusteFila)) {
            $useMinMax = false;
            if (isset($dtFimAjusteFila['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE_FILA, $dtFimAjusteFila['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimAjusteFila['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE_FILA, $dtFimAjusteFila['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE_FILA, $dtFimAjusteFila, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_ajuste_resultado column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioAjusteResultado('2011-03-14'); // WHERE dt_inicio_ajuste_resultado = '2011-03-14'
     * $query->filterByDtInicioAjusteResultado('now'); // WHERE dt_inicio_ajuste_resultado = '2011-03-14'
     * $query->filterByDtInicioAjusteResultado(array('max' => 'yesterday')); // WHERE dt_inicio_ajuste_resultado > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioAjusteResultado The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioAjusteResultado($dtInicioAjusteResultado = null, $comparison = null)
    {
        if (is_array($dtInicioAjusteResultado)) {
            $useMinMax = false;
            if (isset($dtInicioAjusteResultado['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO, $dtInicioAjusteResultado['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioAjusteResultado['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO, $dtInicioAjusteResultado['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO, $dtInicioAjusteResultado, $comparison);
    }

    /**
     * Filter the query on the dt_fim_ajuste_resultado column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimAjusteResultado('2011-03-14'); // WHERE dt_fim_ajuste_resultado = '2011-03-14'
     * $query->filterByDtFimAjusteResultado('now'); // WHERE dt_fim_ajuste_resultado = '2011-03-14'
     * $query->filterByDtFimAjusteResultado(array('max' => 'yesterday')); // WHERE dt_fim_ajuste_resultado > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimAjusteResultado The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimAjusteResultado($dtFimAjusteResultado = null, $comparison = null)
    {
        if (is_array($dtFimAjusteResultado)) {
            $useMinMax = false;
            if (isset($dtFimAjusteResultado['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO, $dtFimAjusteResultado['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimAjusteResultado['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO, $dtFimAjusteResultado['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO, $dtFimAjusteResultado, $comparison);
    }

    /**
     * Filter the query on the dt_inicio_trancamento column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicioTrancamento('2011-03-14'); // WHERE dt_inicio_trancamento = '2011-03-14'
     * $query->filterByDtInicioTrancamento('now'); // WHERE dt_inicio_trancamento = '2011-03-14'
     * $query->filterByDtInicioTrancamento(array('max' => 'yesterday')); // WHERE dt_inicio_trancamento > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicioTrancamento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtInicioTrancamento($dtInicioTrancamento = null, $comparison = null)
    {
        if (is_array($dtInicioTrancamento)) {
            $useMinMax = false;
            if (isset($dtInicioTrancamento['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_TRANCAMENTO, $dtInicioTrancamento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicioTrancamento['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_INICIO_TRANCAMENTO, $dtInicioTrancamento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_INICIO_TRANCAMENTO, $dtInicioTrancamento, $comparison);
    }

    /**
     * Filter the query on the dt_fim_trancamento column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFimTrancamento('2011-03-14'); // WHERE dt_fim_trancamento = '2011-03-14'
     * $query->filterByDtFimTrancamento('now'); // WHERE dt_fim_trancamento = '2011-03-14'
     * $query->filterByDtFimTrancamento(array('max' => 'yesterday')); // WHERE dt_fim_trancamento > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFimTrancamento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByDtFimTrancamento($dtFimTrancamento = null, $comparison = null)
    {
        if (is_array($dtFimTrancamento)) {
            $useMinMax = false;
            if (isset($dtFimTrancamento['min'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_TRANCAMENTO, $dtFimTrancamento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFimTrancamento['max'])) {
                $this->addUsingAlias(TbperiodoPeer::DT_FIM_TRANCAMENTO, $dtFimTrancamento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::DT_FIM_TRANCAMENTO, $dtFimTrancamento, $comparison);
    }

    /**
     * Filter the query on the sucinto column
     *
     * Example usage:
     * <code>
     * $query->filterBySucinto('fooValue');   // WHERE sucinto = 'fooValue'
     * $query->filterBySucinto('%fooValue%'); // WHERE sucinto LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sucinto The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterBySucinto($sucinto = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sucinto)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sucinto)) {
                $sucinto = str_replace('*', '%', $sucinto);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::SUCINTO, $sucinto, $comparison);
    }

    /**
     * Filter the query on the id_nivel column
     *
     * Example usage:
     * <code>
     * $query->filterByIdNivel(1234); // WHERE id_nivel = 1234
     * $query->filterByIdNivel(array(12, 34)); // WHERE id_nivel IN (12, 34)
     * $query->filterByIdNivel(array('min' => 12)); // WHERE id_nivel > 12
     * </code>
     *
     * @see       filterByTbcursonivel()
     *
     * @param     mixed $idNivel The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByIdNivel($idNivel = null, $comparison = null)
    {
        if (is_array($idNivel)) {
            $useMinMax = false;
            if (isset($idNivel['min'])) {
                $this->addUsingAlias(TbperiodoPeer::ID_NIVEL, $idNivel['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idNivel['max'])) {
                $this->addUsingAlias(TbperiodoPeer::ID_NIVEL, $idNivel['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::ID_NIVEL, $idNivel, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbperiodoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbperiodoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbperiodoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbperiodoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbperiodoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbcursonivel object
     *
     * @param   Tbcursonivel|PropelObjectCollection $tbcursonivel The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbperiodoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcursonivel($tbcursonivel, $comparison = null)
    {
        if ($tbcursonivel instanceof Tbcursonivel) {
            return $this
                ->addUsingAlias(TbperiodoPeer::ID_NIVEL, $tbcursonivel->getIdNivel(), $comparison);
        } elseif ($tbcursonivel instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbperiodoPeer::ID_NIVEL, $tbcursonivel->toKeyValue('PrimaryKey', 'IdNivel'), $comparison);
        } else {
            throw new PropelException('filterByTbcursonivel() only accepts arguments of type Tbcursonivel or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcursonivel relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function joinTbcursonivel($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcursonivel');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcursonivel');
        }

        return $this;
    }

    /**
     * Use the Tbcursonivel relation Tbcursonivel object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursonivelQuery A secondary query class using the current class as primary query
     */
    public function useTbcursonivelQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcursonivel($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcursonivel', 'TbcursonivelQuery');
    }

    /**
     * Filter the query by a related Tbfilacalouros object
     *
     * @param   Tbfilacalouros|PropelObjectCollection $tbfilacalouros  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbperiodoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbfilacalouros($tbfilacalouros, $comparison = null)
    {
        if ($tbfilacalouros instanceof Tbfilacalouros) {
            return $this
                ->addUsingAlias(TbperiodoPeer::ID_PERIODO, $tbfilacalouros->getIdPeriodo(), $comparison);
        } elseif ($tbfilacalouros instanceof PropelObjectCollection) {
            return $this
                ->useTbfilacalourosQuery()
                ->filterByPrimaryKeys($tbfilacalouros->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbfilacalouros() only accepts arguments of type Tbfilacalouros or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbfilacalouros relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function joinTbfilacalouros($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbfilacalouros');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbfilacalouros');
        }

        return $this;
    }

    /**
     * Use the Tbfilacalouros relation Tbfilacalouros object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbfilacalourosQuery A secondary query class using the current class as primary query
     */
    public function useTbfilacalourosQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbfilacalouros($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbfilacalouros', 'TbfilacalourosQuery');
    }

    /**
     * Filter the query by a related Tbhistorico object
     *
     * @param   Tbhistorico|PropelObjectCollection $tbhistorico  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbperiodoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbhistorico($tbhistorico, $comparison = null)
    {
        if ($tbhistorico instanceof Tbhistorico) {
            return $this
                ->addUsingAlias(TbperiodoPeer::ID_PERIODO, $tbhistorico->getIdPeriodo(), $comparison);
        } elseif ($tbhistorico instanceof PropelObjectCollection) {
            return $this
                ->useTbhistoricoQuery()
                ->filterByPrimaryKeys($tbhistorico->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbhistorico() only accepts arguments of type Tbhistorico or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbhistorico relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function joinTbhistorico($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbhistorico');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbhistorico');
        }

        return $this;
    }

    /**
     * Use the Tbhistorico relation Tbhistorico object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbhistoricoQuery A secondary query class using the current class as primary query
     */
    public function useTbhistoricoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbhistorico($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbhistorico', 'TbhistoricoQuery');
    }

    /**
     * Filter the query by a related Tboferta object
     *
     * @param   Tboferta|PropelObjectCollection $tboferta  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbperiodoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTboferta($tboferta, $comparison = null)
    {
        if ($tboferta instanceof Tboferta) {
            return $this
                ->addUsingAlias(TbperiodoPeer::ID_PERIODO, $tboferta->getIdPeriodo(), $comparison);
        } elseif ($tboferta instanceof PropelObjectCollection) {
            return $this
                ->useTbofertaQuery()
                ->filterByPrimaryKeys($tboferta->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTboferta() only accepts arguments of type Tboferta or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tboferta relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function joinTboferta($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tboferta');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tboferta');
        }

        return $this;
    }

    /**
     * Use the Tboferta relation Tboferta object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertaQuery A secondary query class using the current class as primary query
     */
    public function useTbofertaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTboferta($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tboferta', 'TbofertaQuery');
    }

    /**
     * Filter the query by a related Tbprofessorticket object
     *
     * @param   Tbprofessorticket|PropelObjectCollection $tbprofessorticket  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbperiodoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbprofessorticket($tbprofessorticket, $comparison = null)
    {
        if ($tbprofessorticket instanceof Tbprofessorticket) {
            return $this
                ->addUsingAlias(TbperiodoPeer::ID_PERIODO, $tbprofessorticket->getIdPeriodo(), $comparison);
        } elseif ($tbprofessorticket instanceof PropelObjectCollection) {
            return $this
                ->useTbprofessorticketQuery()
                ->filterByPrimaryKeys($tbprofessorticket->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbprofessorticket() only accepts arguments of type Tbprofessorticket or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbprofessorticket relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function joinTbprofessorticket($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbprofessorticket');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbprofessorticket');
        }

        return $this;
    }

    /**
     * Use the Tbprofessorticket relation Tbprofessorticket object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbprofessorticketQuery A secondary query class using the current class as primary query
     */
    public function useTbprofessorticketQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbprofessorticket($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbprofessorticket', 'TbprofessorticketQuery');
    }

    /**
     * Filter the query by a related Tbturma object
     *
     * @param   Tbturma|PropelObjectCollection $tbturma  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbperiodoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturma($tbturma, $comparison = null)
    {
        if ($tbturma instanceof Tbturma) {
            return $this
                ->addUsingAlias(TbperiodoPeer::ID_PERIODO, $tbturma->getIdPeriodo(), $comparison);
        } elseif ($tbturma instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaQuery()
                ->filterByPrimaryKeys($tbturma->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturma() only accepts arguments of type Tbturma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function joinTbturma($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturma');
        }

        return $this;
    }

    /**
     * Use the Tbturma relation Tbturma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturma', 'TbturmaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbperiodo $tbperiodo Object to remove from the list of results
     *
     * @return TbperiodoQuery The current query, for fluid interface
     */
    public function prune($tbperiodo = null)
    {
        if ($tbperiodo) {
            $this->addUsingAlias(TbperiodoPeer::ID_PERIODO, $tbperiodo->getIdPeriodo(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
