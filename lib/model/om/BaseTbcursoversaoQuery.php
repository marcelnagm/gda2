<?php


/**
 * Base class that represents a query for the 'tbcursoversao' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:38 2013
 *
 * @method TbcursoversaoQuery orderByIdVersaoCurso($order = Criteria::ASC) Order by the id_versao_curso column
 * @method TbcursoversaoQuery orderByIdFormacao($order = Criteria::ASC) Order by the id_formacao column
 * @method TbcursoversaoQuery orderByCodCurso($order = Criteria::ASC) Order by the cod_curso column
 * @method TbcursoversaoQuery orderByIdTurno($order = Criteria::ASC) Order by the id_turno column
 * @method TbcursoversaoQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbcursoversaoQuery orderBySituacao($order = Criteria::ASC) Order by the situacao column
 * @method TbcursoversaoQuery orderByDocCriacao($order = Criteria::ASC) Order by the doc_criacao column
 * @method TbcursoversaoQuery orderByDtCriacao($order = Criteria::ASC) Order by the dt_criacao column
 * @method TbcursoversaoQuery orderByDtInicio($order = Criteria::ASC) Order by the dt_inicio column
 * @method TbcursoversaoQuery orderByDtTermino($order = Criteria::ASC) Order by the dt_termino column
 * @method TbcursoversaoQuery orderByIdCampus($order = Criteria::ASC) Order by the id_campus column
 * @method TbcursoversaoQuery orderByIdSetor($order = Criteria::ASC) Order by the id_setor column
 * @method TbcursoversaoQuery orderByPrazoMin($order = Criteria::ASC) Order by the prazo_min column
 * @method TbcursoversaoQuery orderByPrazoMax($order = Criteria::ASC) Order by the prazo_max column
 * @method TbcursoversaoQuery orderByCredObr($order = Criteria::ASC) Order by the cred_obr column
 * @method TbcursoversaoQuery orderByCredEletivo($order = Criteria::ASC) Order by the cred_eletivo column
 * @method TbcursoversaoQuery orderByCredTotal($order = Criteria::ASC) Order by the cred_total column
 * @method TbcursoversaoQuery orderByChObr($order = Criteria::ASC) Order by the ch_obr column
 * @method TbcursoversaoQuery orderByChEletiva($order = Criteria::ASC) Order by the ch_eletiva column
 * @method TbcursoversaoQuery orderByChTotal($order = Criteria::ASC) Order by the ch_total column
 * @method TbcursoversaoQuery orderBySemestreInicio($order = Criteria::ASC) Order by the semestre_inicio column
 * @method TbcursoversaoQuery orderByCodIntegracao($order = Criteria::ASC) Order by the cod_integracao column
 * @method TbcursoversaoQuery orderByCodIntegracaoTipo($order = Criteria::ASC) Order by the cod_integracao_tipo column
 * @method TbcursoversaoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbcursoversaoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbcursoversaoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbcursoversaoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbcursoversaoQuery groupByIdVersaoCurso() Group by the id_versao_curso column
 * @method TbcursoversaoQuery groupByIdFormacao() Group by the id_formacao column
 * @method TbcursoversaoQuery groupByCodCurso() Group by the cod_curso column
 * @method TbcursoversaoQuery groupByIdTurno() Group by the id_turno column
 * @method TbcursoversaoQuery groupByDescricao() Group by the descricao column
 * @method TbcursoversaoQuery groupBySituacao() Group by the situacao column
 * @method TbcursoversaoQuery groupByDocCriacao() Group by the doc_criacao column
 * @method TbcursoversaoQuery groupByDtCriacao() Group by the dt_criacao column
 * @method TbcursoversaoQuery groupByDtInicio() Group by the dt_inicio column
 * @method TbcursoversaoQuery groupByDtTermino() Group by the dt_termino column
 * @method TbcursoversaoQuery groupByIdCampus() Group by the id_campus column
 * @method TbcursoversaoQuery groupByIdSetor() Group by the id_setor column
 * @method TbcursoversaoQuery groupByPrazoMin() Group by the prazo_min column
 * @method TbcursoversaoQuery groupByPrazoMax() Group by the prazo_max column
 * @method TbcursoversaoQuery groupByCredObr() Group by the cred_obr column
 * @method TbcursoversaoQuery groupByCredEletivo() Group by the cred_eletivo column
 * @method TbcursoversaoQuery groupByCredTotal() Group by the cred_total column
 * @method TbcursoversaoQuery groupByChObr() Group by the ch_obr column
 * @method TbcursoversaoQuery groupByChEletiva() Group by the ch_eletiva column
 * @method TbcursoversaoQuery groupByChTotal() Group by the ch_total column
 * @method TbcursoversaoQuery groupBySemestreInicio() Group by the semestre_inicio column
 * @method TbcursoversaoQuery groupByCodIntegracao() Group by the cod_integracao column
 * @method TbcursoversaoQuery groupByCodIntegracaoTipo() Group by the cod_integracao_tipo column
 * @method TbcursoversaoQuery groupByCreatedAt() Group by the created_at column
 * @method TbcursoversaoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbcursoversaoQuery groupByCreatedBy() Group by the created_by column
 * @method TbcursoversaoQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbcursoversaoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbcursoversaoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbcursoversaoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbcursoversaoQuery leftJoinTbformacao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbformacao relation
 * @method TbcursoversaoQuery rightJoinTbformacao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbformacao relation
 * @method TbcursoversaoQuery innerJoinTbformacao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbformacao relation
 *
 * @method TbcursoversaoQuery leftJoinTbcurso($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcurso relation
 * @method TbcursoversaoQuery rightJoinTbcurso($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcurso relation
 * @method TbcursoversaoQuery innerJoinTbcurso($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcurso relation
 *
 * @method TbcursoversaoQuery leftJoinTbturno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturno relation
 * @method TbcursoversaoQuery rightJoinTbturno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturno relation
 * @method TbcursoversaoQuery innerJoinTbturno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturno relation
 *
 * @method TbcursoversaoQuery leftJoinTbcampus($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcampus relation
 * @method TbcursoversaoQuery rightJoinTbcampus($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcampus relation
 * @method TbcursoversaoQuery innerJoinTbcampus($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcampus relation
 *
 * @method TbcursoversaoQuery leftJoinTbsetor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbsetor relation
 * @method TbcursoversaoQuery rightJoinTbsetor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbsetor relation
 * @method TbcursoversaoQuery innerJoinTbsetor($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbsetor relation
 *
 * @method TbcursoversaoQuery leftJoinTbalunomatricula($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunomatricula relation
 * @method TbcursoversaoQuery rightJoinTbalunomatricula($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunomatricula relation
 * @method TbcursoversaoQuery innerJoinTbalunomatricula($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunomatricula relation
 *
 * @method TbcursoversaoQuery leftJoinTbalunobackup($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunobackup relation
 * @method TbcursoversaoQuery rightJoinTbalunobackup($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunobackup relation
 * @method TbcursoversaoQuery innerJoinTbalunobackup($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunobackup relation
 *
 * @method TbcursoversaoQuery leftJoinTbfilacalouros($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbfilacalouros relation
 * @method TbcursoversaoQuery rightJoinTbfilacalouros($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbfilacalouros relation
 * @method TbcursoversaoQuery innerJoinTbfilacalouros($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbfilacalouros relation
 *
 * @method TbcursoversaoQuery leftJoinTbvagas($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbvagas relation
 * @method TbcursoversaoQuery rightJoinTbvagas($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbvagas relation
 * @method TbcursoversaoQuery innerJoinTbvagas($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbvagas relation
 *
 * @method TbcursoversaoQuery leftJoinTbloadaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbloadaluno relation
 * @method TbcursoversaoQuery rightJoinTbloadaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbloadaluno relation
 * @method TbcursoversaoQuery innerJoinTbloadaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbloadaluno relation
 *
 * @method TbcursoversaoQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbcursoversaoQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbcursoversaoQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method TbcursoversaoQuery leftJoinTbcurriculodisciplinas($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcurriculodisciplinas relation
 * @method TbcursoversaoQuery rightJoinTbcurriculodisciplinas($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcurriculodisciplinas relation
 * @method TbcursoversaoQuery innerJoinTbcurriculodisciplinas($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcurriculodisciplinas relation
 *
 * @method TbcursoversaoQuery leftJoinTbdisciplinarequisitos($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbdisciplinarequisitos relation
 * @method TbcursoversaoQuery rightJoinTbdisciplinarequisitos($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbdisciplinarequisitos relation
 * @method TbcursoversaoQuery innerJoinTbdisciplinarequisitos($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbdisciplinarequisitos relation
 *
 * @method TbcursoversaoQuery leftJoinTbcoordenadorcurso($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcoordenadorcurso relation
 * @method TbcursoversaoQuery rightJoinTbcoordenadorcurso($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcoordenadorcurso relation
 * @method TbcursoversaoQuery innerJoinTbcoordenadorcurso($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcoordenadorcurso relation
 *
 * @method Tbcursoversao findOne(PropelPDO $con = null) Return the first Tbcursoversao matching the query
 * @method Tbcursoversao findOneOrCreate(PropelPDO $con = null) Return the first Tbcursoversao matching the query, or a new Tbcursoversao object populated from the query conditions when no match is found
 *
 * @method Tbcursoversao findOneByIdVersaoCurso(int $id_versao_curso) Return the first Tbcursoversao filtered by the id_versao_curso column
 * @method Tbcursoversao findOneByIdFormacao(int $id_formacao) Return the first Tbcursoversao filtered by the id_formacao column
 * @method Tbcursoversao findOneByCodCurso(int $cod_curso) Return the first Tbcursoversao filtered by the cod_curso column
 * @method Tbcursoversao findOneByIdTurno(int $id_turno) Return the first Tbcursoversao filtered by the id_turno column
 * @method Tbcursoversao findOneByDescricao(string $descricao) Return the first Tbcursoversao filtered by the descricao column
 * @method Tbcursoversao findOneBySituacao(string $situacao) Return the first Tbcursoversao filtered by the situacao column
 * @method Tbcursoversao findOneByDocCriacao(string $doc_criacao) Return the first Tbcursoversao filtered by the doc_criacao column
 * @method Tbcursoversao findOneByDtCriacao(string $dt_criacao) Return the first Tbcursoversao filtered by the dt_criacao column
 * @method Tbcursoversao findOneByDtInicio(string $dt_inicio) Return the first Tbcursoversao filtered by the dt_inicio column
 * @method Tbcursoversao findOneByDtTermino(string $dt_termino) Return the first Tbcursoversao filtered by the dt_termino column
 * @method Tbcursoversao findOneByIdCampus(int $id_campus) Return the first Tbcursoversao filtered by the id_campus column
 * @method Tbcursoversao findOneByIdSetor(int $id_setor) Return the first Tbcursoversao filtered by the id_setor column
 * @method Tbcursoversao findOneByPrazoMin(string $prazo_min) Return the first Tbcursoversao filtered by the prazo_min column
 * @method Tbcursoversao findOneByPrazoMax(string $prazo_max) Return the first Tbcursoversao filtered by the prazo_max column
 * @method Tbcursoversao findOneByCredObr(string $cred_obr) Return the first Tbcursoversao filtered by the cred_obr column
 * @method Tbcursoversao findOneByCredEletivo(string $cred_eletivo) Return the first Tbcursoversao filtered by the cred_eletivo column
 * @method Tbcursoversao findOneByCredTotal(string $cred_total) Return the first Tbcursoversao filtered by the cred_total column
 * @method Tbcursoversao findOneByChObr(int $ch_obr) Return the first Tbcursoversao filtered by the ch_obr column
 * @method Tbcursoversao findOneByChEletiva(int $ch_eletiva) Return the first Tbcursoversao filtered by the ch_eletiva column
 * @method Tbcursoversao findOneByChTotal(string $ch_total) Return the first Tbcursoversao filtered by the ch_total column
 * @method Tbcursoversao findOneBySemestreInicio(int $semestre_inicio) Return the first Tbcursoversao filtered by the semestre_inicio column
 * @method Tbcursoversao findOneByCodIntegracao(string $cod_integracao) Return the first Tbcursoversao filtered by the cod_integracao column
 * @method Tbcursoversao findOneByCodIntegracaoTipo(string $cod_integracao_tipo) Return the first Tbcursoversao filtered by the cod_integracao_tipo column
 * @method Tbcursoversao findOneByCreatedAt(string $created_at) Return the first Tbcursoversao filtered by the created_at column
 * @method Tbcursoversao findOneByUpdatedAt(string $updated_at) Return the first Tbcursoversao filtered by the updated_at column
 * @method Tbcursoversao findOneByCreatedBy(string $created_by) Return the first Tbcursoversao filtered by the created_by column
 * @method Tbcursoversao findOneByUpdatedBy(string $updated_by) Return the first Tbcursoversao filtered by the updated_by column
 *
 * @method array findByIdVersaoCurso(int $id_versao_curso) Return Tbcursoversao objects filtered by the id_versao_curso column
 * @method array findByIdFormacao(int $id_formacao) Return Tbcursoversao objects filtered by the id_formacao column
 * @method array findByCodCurso(int $cod_curso) Return Tbcursoversao objects filtered by the cod_curso column
 * @method array findByIdTurno(int $id_turno) Return Tbcursoversao objects filtered by the id_turno column
 * @method array findByDescricao(string $descricao) Return Tbcursoversao objects filtered by the descricao column
 * @method array findBySituacao(string $situacao) Return Tbcursoversao objects filtered by the situacao column
 * @method array findByDocCriacao(string $doc_criacao) Return Tbcursoversao objects filtered by the doc_criacao column
 * @method array findByDtCriacao(string $dt_criacao) Return Tbcursoversao objects filtered by the dt_criacao column
 * @method array findByDtInicio(string $dt_inicio) Return Tbcursoversao objects filtered by the dt_inicio column
 * @method array findByDtTermino(string $dt_termino) Return Tbcursoversao objects filtered by the dt_termino column
 * @method array findByIdCampus(int $id_campus) Return Tbcursoversao objects filtered by the id_campus column
 * @method array findByIdSetor(int $id_setor) Return Tbcursoversao objects filtered by the id_setor column
 * @method array findByPrazoMin(string $prazo_min) Return Tbcursoversao objects filtered by the prazo_min column
 * @method array findByPrazoMax(string $prazo_max) Return Tbcursoversao objects filtered by the prazo_max column
 * @method array findByCredObr(string $cred_obr) Return Tbcursoversao objects filtered by the cred_obr column
 * @method array findByCredEletivo(string $cred_eletivo) Return Tbcursoversao objects filtered by the cred_eletivo column
 * @method array findByCredTotal(string $cred_total) Return Tbcursoversao objects filtered by the cred_total column
 * @method array findByChObr(int $ch_obr) Return Tbcursoversao objects filtered by the ch_obr column
 * @method array findByChEletiva(int $ch_eletiva) Return Tbcursoversao objects filtered by the ch_eletiva column
 * @method array findByChTotal(string $ch_total) Return Tbcursoversao objects filtered by the ch_total column
 * @method array findBySemestreInicio(int $semestre_inicio) Return Tbcursoversao objects filtered by the semestre_inicio column
 * @method array findByCodIntegracao(string $cod_integracao) Return Tbcursoversao objects filtered by the cod_integracao column
 * @method array findByCodIntegracaoTipo(string $cod_integracao_tipo) Return Tbcursoversao objects filtered by the cod_integracao_tipo column
 * @method array findByCreatedAt(string $created_at) Return Tbcursoversao objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbcursoversao objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbcursoversao objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbcursoversao objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbcursoversaoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbcursoversaoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbcursoversao', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbcursoversaoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbcursoversaoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbcursoversaoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbcursoversaoQuery) {
            return $criteria;
        }
        $query = new TbcursoversaoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbcursoversao|Tbcursoversao[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbcursoversaoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbcursoversaoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbcursoversao A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_VERSAO_CURSO, ID_FORMACAO, COD_CURSO, ID_TURNO, DESCRICAO, SITUACAO, DOC_CRIACAO, DT_CRIACAO, DT_INICIO, DT_TERMINO, ID_CAMPUS, ID_SETOR, PRAZO_MIN, PRAZO_MAX, CRED_OBR, CRED_ELETIVO, CRED_TOTAL, CH_OBR, CH_ELETIVA, CH_TOTAL, SEMESTRE_INICIO, COD_INTEGRACAO, COD_INTEGRACAO_TIPO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbcursoversao WHERE ID_VERSAO_CURSO = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbcursoversao();
            $obj->hydrate($row);
            TbcursoversaoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbcursoversao|Tbcursoversao[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbcursoversao[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_versao_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByIdVersaoCurso(1234); // WHERE id_versao_curso = 1234
     * $query->filterByIdVersaoCurso(array(12, 34)); // WHERE id_versao_curso IN (12, 34)
     * $query->filterByIdVersaoCurso(array('min' => 12)); // WHERE id_versao_curso > 12
     * </code>
     *
     * @param     mixed $idVersaoCurso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByIdVersaoCurso($idVersaoCurso = null, $comparison = null)
    {
        if (is_array($idVersaoCurso) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $idVersaoCurso, $comparison);
    }

    /**
     * Filter the query on the id_formacao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdFormacao(1234); // WHERE id_formacao = 1234
     * $query->filterByIdFormacao(array(12, 34)); // WHERE id_formacao IN (12, 34)
     * $query->filterByIdFormacao(array('min' => 12)); // WHERE id_formacao > 12
     * </code>
     *
     * @see       filterByTbformacao()
     *
     * @param     mixed $idFormacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByIdFormacao($idFormacao = null, $comparison = null)
    {
        if (is_array($idFormacao)) {
            $useMinMax = false;
            if (isset($idFormacao['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_FORMACAO, $idFormacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idFormacao['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_FORMACAO, $idFormacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::ID_FORMACAO, $idFormacao, $comparison);
    }

    /**
     * Filter the query on the cod_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByCodCurso(1234); // WHERE cod_curso = 1234
     * $query->filterByCodCurso(array(12, 34)); // WHERE cod_curso IN (12, 34)
     * $query->filterByCodCurso(array('min' => 12)); // WHERE cod_curso > 12
     * </code>
     *
     * @see       filterByTbcurso()
     *
     * @param     mixed $codCurso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCodCurso($codCurso = null, $comparison = null)
    {
        if (is_array($codCurso)) {
            $useMinMax = false;
            if (isset($codCurso['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::COD_CURSO, $codCurso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($codCurso['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::COD_CURSO, $codCurso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::COD_CURSO, $codCurso, $comparison);
    }

    /**
     * Filter the query on the id_turno column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTurno(1234); // WHERE id_turno = 1234
     * $query->filterByIdTurno(array(12, 34)); // WHERE id_turno IN (12, 34)
     * $query->filterByIdTurno(array('min' => 12)); // WHERE id_turno > 12
     * </code>
     *
     * @see       filterByTbturno()
     *
     * @param     mixed $idTurno The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByIdTurno($idTurno = null, $comparison = null)
    {
        if (is_array($idTurno)) {
            $useMinMax = false;
            if (isset($idTurno['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_TURNO, $idTurno['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTurno['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_TURNO, $idTurno['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::ID_TURNO, $idTurno, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the situacao column
     *
     * Example usage:
     * <code>
     * $query->filterBySituacao('fooValue');   // WHERE situacao = 'fooValue'
     * $query->filterBySituacao('%fooValue%'); // WHERE situacao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $situacao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterBySituacao($situacao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($situacao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $situacao)) {
                $situacao = str_replace('*', '%', $situacao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::SITUACAO, $situacao, $comparison);
    }

    /**
     * Filter the query on the doc_criacao column
     *
     * Example usage:
     * <code>
     * $query->filterByDocCriacao('fooValue');   // WHERE doc_criacao = 'fooValue'
     * $query->filterByDocCriacao('%fooValue%'); // WHERE doc_criacao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $docCriacao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByDocCriacao($docCriacao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($docCriacao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $docCriacao)) {
                $docCriacao = str_replace('*', '%', $docCriacao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::DOC_CRIACAO, $docCriacao, $comparison);
    }

    /**
     * Filter the query on the dt_criacao column
     *
     * Example usage:
     * <code>
     * $query->filterByDtCriacao('2011-03-14'); // WHERE dt_criacao = '2011-03-14'
     * $query->filterByDtCriacao('now'); // WHERE dt_criacao = '2011-03-14'
     * $query->filterByDtCriacao(array('max' => 'yesterday')); // WHERE dt_criacao > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtCriacao The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByDtCriacao($dtCriacao = null, $comparison = null)
    {
        if (is_array($dtCriacao)) {
            $useMinMax = false;
            if (isset($dtCriacao['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::DT_CRIACAO, $dtCriacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtCriacao['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::DT_CRIACAO, $dtCriacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::DT_CRIACAO, $dtCriacao, $comparison);
    }

    /**
     * Filter the query on the dt_inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicio('2011-03-14'); // WHERE dt_inicio = '2011-03-14'
     * $query->filterByDtInicio('now'); // WHERE dt_inicio = '2011-03-14'
     * $query->filterByDtInicio(array('max' => 'yesterday')); // WHERE dt_inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByDtInicio($dtInicio = null, $comparison = null)
    {
        if (is_array($dtInicio)) {
            $useMinMax = false;
            if (isset($dtInicio['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::DT_INICIO, $dtInicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicio['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::DT_INICIO, $dtInicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::DT_INICIO, $dtInicio, $comparison);
    }

    /**
     * Filter the query on the dt_termino column
     *
     * Example usage:
     * <code>
     * $query->filterByDtTermino('2011-03-14'); // WHERE dt_termino = '2011-03-14'
     * $query->filterByDtTermino('now'); // WHERE dt_termino = '2011-03-14'
     * $query->filterByDtTermino(array('max' => 'yesterday')); // WHERE dt_termino > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtTermino The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByDtTermino($dtTermino = null, $comparison = null)
    {
        if (is_array($dtTermino)) {
            $useMinMax = false;
            if (isset($dtTermino['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::DT_TERMINO, $dtTermino['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtTermino['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::DT_TERMINO, $dtTermino['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::DT_TERMINO, $dtTermino, $comparison);
    }

    /**
     * Filter the query on the id_campus column
     *
     * Example usage:
     * <code>
     * $query->filterByIdCampus(1234); // WHERE id_campus = 1234
     * $query->filterByIdCampus(array(12, 34)); // WHERE id_campus IN (12, 34)
     * $query->filterByIdCampus(array('min' => 12)); // WHERE id_campus > 12
     * </code>
     *
     * @see       filterByTbcampus()
     *
     * @param     mixed $idCampus The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByIdCampus($idCampus = null, $comparison = null)
    {
        if (is_array($idCampus)) {
            $useMinMax = false;
            if (isset($idCampus['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_CAMPUS, $idCampus['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idCampus['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_CAMPUS, $idCampus['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::ID_CAMPUS, $idCampus, $comparison);
    }

    /**
     * Filter the query on the id_setor column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSetor(1234); // WHERE id_setor = 1234
     * $query->filterByIdSetor(array(12, 34)); // WHERE id_setor IN (12, 34)
     * $query->filterByIdSetor(array('min' => 12)); // WHERE id_setor > 12
     * </code>
     *
     * @see       filterByTbsetor()
     *
     * @param     mixed $idSetor The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByIdSetor($idSetor = null, $comparison = null)
    {
        if (is_array($idSetor)) {
            $useMinMax = false;
            if (isset($idSetor['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_SETOR, $idSetor['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSetor['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::ID_SETOR, $idSetor['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::ID_SETOR, $idSetor, $comparison);
    }

    /**
     * Filter the query on the prazo_min column
     *
     * Example usage:
     * <code>
     * $query->filterByPrazoMin('fooValue');   // WHERE prazo_min = 'fooValue'
     * $query->filterByPrazoMin('%fooValue%'); // WHERE prazo_min LIKE '%fooValue%'
     * </code>
     *
     * @param     string $prazoMin The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByPrazoMin($prazoMin = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($prazoMin)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $prazoMin)) {
                $prazoMin = str_replace('*', '%', $prazoMin);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::PRAZO_MIN, $prazoMin, $comparison);
    }

    /**
     * Filter the query on the prazo_max column
     *
     * Example usage:
     * <code>
     * $query->filterByPrazoMax('fooValue');   // WHERE prazo_max = 'fooValue'
     * $query->filterByPrazoMax('%fooValue%'); // WHERE prazo_max LIKE '%fooValue%'
     * </code>
     *
     * @param     string $prazoMax The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByPrazoMax($prazoMax = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($prazoMax)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $prazoMax)) {
                $prazoMax = str_replace('*', '%', $prazoMax);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::PRAZO_MAX, $prazoMax, $comparison);
    }

    /**
     * Filter the query on the cred_obr column
     *
     * Example usage:
     * <code>
     * $query->filterByCredObr('fooValue');   // WHERE cred_obr = 'fooValue'
     * $query->filterByCredObr('%fooValue%'); // WHERE cred_obr LIKE '%fooValue%'
     * </code>
     *
     * @param     string $credObr The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCredObr($credObr = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($credObr)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $credObr)) {
                $credObr = str_replace('*', '%', $credObr);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CRED_OBR, $credObr, $comparison);
    }

    /**
     * Filter the query on the cred_eletivo column
     *
     * Example usage:
     * <code>
     * $query->filterByCredEletivo('fooValue');   // WHERE cred_eletivo = 'fooValue'
     * $query->filterByCredEletivo('%fooValue%'); // WHERE cred_eletivo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $credEletivo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCredEletivo($credEletivo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($credEletivo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $credEletivo)) {
                $credEletivo = str_replace('*', '%', $credEletivo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CRED_ELETIVO, $credEletivo, $comparison);
    }

    /**
     * Filter the query on the cred_total column
     *
     * Example usage:
     * <code>
     * $query->filterByCredTotal('fooValue');   // WHERE cred_total = 'fooValue'
     * $query->filterByCredTotal('%fooValue%'); // WHERE cred_total LIKE '%fooValue%'
     * </code>
     *
     * @param     string $credTotal The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCredTotal($credTotal = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($credTotal)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $credTotal)) {
                $credTotal = str_replace('*', '%', $credTotal);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CRED_TOTAL, $credTotal, $comparison);
    }

    /**
     * Filter the query on the ch_obr column
     *
     * Example usage:
     * <code>
     * $query->filterByChObr(1234); // WHERE ch_obr = 1234
     * $query->filterByChObr(array(12, 34)); // WHERE ch_obr IN (12, 34)
     * $query->filterByChObr(array('min' => 12)); // WHERE ch_obr > 12
     * </code>
     *
     * @param     mixed $chObr The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByChObr($chObr = null, $comparison = null)
    {
        if (is_array($chObr)) {
            $useMinMax = false;
            if (isset($chObr['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::CH_OBR, $chObr['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chObr['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::CH_OBR, $chObr['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CH_OBR, $chObr, $comparison);
    }

    /**
     * Filter the query on the ch_eletiva column
     *
     * Example usage:
     * <code>
     * $query->filterByChEletiva(1234); // WHERE ch_eletiva = 1234
     * $query->filterByChEletiva(array(12, 34)); // WHERE ch_eletiva IN (12, 34)
     * $query->filterByChEletiva(array('min' => 12)); // WHERE ch_eletiva > 12
     * </code>
     *
     * @param     mixed $chEletiva The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByChEletiva($chEletiva = null, $comparison = null)
    {
        if (is_array($chEletiva)) {
            $useMinMax = false;
            if (isset($chEletiva['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::CH_ELETIVA, $chEletiva['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chEletiva['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::CH_ELETIVA, $chEletiva['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CH_ELETIVA, $chEletiva, $comparison);
    }

    /**
     * Filter the query on the ch_total column
     *
     * Example usage:
     * <code>
     * $query->filterByChTotal('fooValue');   // WHERE ch_total = 'fooValue'
     * $query->filterByChTotal('%fooValue%'); // WHERE ch_total LIKE '%fooValue%'
     * </code>
     *
     * @param     string $chTotal The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByChTotal($chTotal = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($chTotal)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $chTotal)) {
                $chTotal = str_replace('*', '%', $chTotal);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CH_TOTAL, $chTotal, $comparison);
    }

    /**
     * Filter the query on the semestre_inicio column
     *
     * Example usage:
     * <code>
     * $query->filterBySemestreInicio(1234); // WHERE semestre_inicio = 1234
     * $query->filterBySemestreInicio(array(12, 34)); // WHERE semestre_inicio IN (12, 34)
     * $query->filterBySemestreInicio(array('min' => 12)); // WHERE semestre_inicio > 12
     * </code>
     *
     * @param     mixed $semestreInicio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterBySemestreInicio($semestreInicio = null, $comparison = null)
    {
        if (is_array($semestreInicio)) {
            $useMinMax = false;
            if (isset($semestreInicio['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::SEMESTRE_INICIO, $semestreInicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($semestreInicio['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::SEMESTRE_INICIO, $semestreInicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::SEMESTRE_INICIO, $semestreInicio, $comparison);
    }

    /**
     * Filter the query on the cod_integracao column
     *
     * Example usage:
     * <code>
     * $query->filterByCodIntegracao('fooValue');   // WHERE cod_integracao = 'fooValue'
     * $query->filterByCodIntegracao('%fooValue%'); // WHERE cod_integracao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codIntegracao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCodIntegracao($codIntegracao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codIntegracao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codIntegracao)) {
                $codIntegracao = str_replace('*', '%', $codIntegracao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::COD_INTEGRACAO, $codIntegracao, $comparison);
    }

    /**
     * Filter the query on the cod_integracao_tipo column
     *
     * Example usage:
     * <code>
     * $query->filterByCodIntegracaoTipo('fooValue');   // WHERE cod_integracao_tipo = 'fooValue'
     * $query->filterByCodIntegracaoTipo('%fooValue%'); // WHERE cod_integracao_tipo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codIntegracaoTipo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCodIntegracaoTipo($codIntegracaoTipo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codIntegracaoTipo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codIntegracaoTipo)) {
                $codIntegracaoTipo = str_replace('*', '%', $codIntegracaoTipo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::COD_INTEGRACAO_TIPO, $codIntegracaoTipo, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbcursoversaoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbcursoversaoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcursoversaoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbformacao object
     *
     * @param   Tbformacao|PropelObjectCollection $tbformacao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbformacao($tbformacao, $comparison = null)
    {
        if ($tbformacao instanceof Tbformacao) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_FORMACAO, $tbformacao->getIdFormacao(), $comparison);
        } elseif ($tbformacao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_FORMACAO, $tbformacao->toKeyValue('PrimaryKey', 'IdFormacao'), $comparison);
        } else {
            throw new PropelException('filterByTbformacao() only accepts arguments of type Tbformacao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbformacao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbformacao($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbformacao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbformacao');
        }

        return $this;
    }

    /**
     * Use the Tbformacao relation Tbformacao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbformacaoQuery A secondary query class using the current class as primary query
     */
    public function useTbformacaoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbformacao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbformacao', 'TbformacaoQuery');
    }

    /**
     * Filter the query by a related Tbcurso object
     *
     * @param   Tbcurso|PropelObjectCollection $tbcurso The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcurso($tbcurso, $comparison = null)
    {
        if ($tbcurso instanceof Tbcurso) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::COD_CURSO, $tbcurso->getCodCurso(), $comparison);
        } elseif ($tbcurso instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcursoversaoPeer::COD_CURSO, $tbcurso->toKeyValue('PrimaryKey', 'CodCurso'), $comparison);
        } else {
            throw new PropelException('filterByTbcurso() only accepts arguments of type Tbcurso or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcurso relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbcurso($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcurso');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcurso');
        }

        return $this;
    }

    /**
     * Use the Tbcurso relation Tbcurso object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursoQuery A secondary query class using the current class as primary query
     */
    public function useTbcursoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcurso($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcurso', 'TbcursoQuery');
    }

    /**
     * Filter the query by a related Tbturno object
     *
     * @param   Tbturno|PropelObjectCollection $tbturno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturno($tbturno, $comparison = null)
    {
        if ($tbturno instanceof Tbturno) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_TURNO, $tbturno->getIdTurno(), $comparison);
        } elseif ($tbturno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_TURNO, $tbturno->toKeyValue('PrimaryKey', 'IdTurno'), $comparison);
        } else {
            throw new PropelException('filterByTbturno() only accepts arguments of type Tbturno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbturno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturno');
        }

        return $this;
    }

    /**
     * Use the Tbturno relation Tbturno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturnoQuery A secondary query class using the current class as primary query
     */
    public function useTbturnoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturno', 'TbturnoQuery');
    }

    /**
     * Filter the query by a related Tbcampus object
     *
     * @param   Tbcampus|PropelObjectCollection $tbcampus The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcampus($tbcampus, $comparison = null)
    {
        if ($tbcampus instanceof Tbcampus) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_CAMPUS, $tbcampus->getIdCampus(), $comparison);
        } elseif ($tbcampus instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_CAMPUS, $tbcampus->toKeyValue('PrimaryKey', 'IdCampus'), $comparison);
        } else {
            throw new PropelException('filterByTbcampus() only accepts arguments of type Tbcampus or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcampus relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbcampus($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcampus');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcampus');
        }

        return $this;
    }

    /**
     * Use the Tbcampus relation Tbcampus object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcampusQuery A secondary query class using the current class as primary query
     */
    public function useTbcampusQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcampus($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcampus', 'TbcampusQuery');
    }

    /**
     * Filter the query by a related Tbsetor object
     *
     * @param   Tbsetor|PropelObjectCollection $tbsetor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbsetor($tbsetor, $comparison = null)
    {
        if ($tbsetor instanceof Tbsetor) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_SETOR, $tbsetor->getIdSetor(), $comparison);
        } elseif ($tbsetor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_SETOR, $tbsetor->toKeyValue('PrimaryKey', 'IdSetor'), $comparison);
        } else {
            throw new PropelException('filterByTbsetor() only accepts arguments of type Tbsetor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbsetor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbsetor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbsetor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbsetor');
        }

        return $this;
    }

    /**
     * Use the Tbsetor relation Tbsetor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbsetorQuery A secondary query class using the current class as primary query
     */
    public function useTbsetorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbsetor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbsetor', 'TbsetorQuery');
    }

    /**
     * Filter the query by a related Tbalunomatricula object
     *
     * @param   Tbalunomatricula|PropelObjectCollection $tbalunomatricula  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunomatricula($tbalunomatricula, $comparison = null)
    {
        if ($tbalunomatricula instanceof Tbalunomatricula) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbalunomatricula->getIdVersaoCurso(), $comparison);
        } elseif ($tbalunomatricula instanceof PropelObjectCollection) {
            return $this
                ->useTbalunomatriculaQuery()
                ->filterByPrimaryKeys($tbalunomatricula->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunomatricula() only accepts arguments of type Tbalunomatricula or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunomatricula relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbalunomatricula($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunomatricula');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunomatricula');
        }

        return $this;
    }

    /**
     * Use the Tbalunomatricula relation Tbalunomatricula object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunomatriculaQuery A secondary query class using the current class as primary query
     */
    public function useTbalunomatriculaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunomatricula($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunomatricula', 'TbalunomatriculaQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackup($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbalunobackup->getIdVersaoCurso(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackup() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunobackup relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbalunobackup($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunobackup');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunobackup');
        }

        return $this;
    }

    /**
     * Use the Tbalunobackup relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunobackup($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunobackup', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbfilacalouros object
     *
     * @param   Tbfilacalouros|PropelObjectCollection $tbfilacalouros  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbfilacalouros($tbfilacalouros, $comparison = null)
    {
        if ($tbfilacalouros instanceof Tbfilacalouros) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbfilacalouros->getIdVersaoCurso(), $comparison);
        } elseif ($tbfilacalouros instanceof PropelObjectCollection) {
            return $this
                ->useTbfilacalourosQuery()
                ->filterByPrimaryKeys($tbfilacalouros->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbfilacalouros() only accepts arguments of type Tbfilacalouros or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbfilacalouros relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbfilacalouros($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbfilacalouros');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbfilacalouros');
        }

        return $this;
    }

    /**
     * Use the Tbfilacalouros relation Tbfilacalouros object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbfilacalourosQuery A secondary query class using the current class as primary query
     */
    public function useTbfilacalourosQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbfilacalouros($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbfilacalouros', 'TbfilacalourosQuery');
    }

    /**
     * Filter the query by a related Tbvagas object
     *
     * @param   Tbvagas|PropelObjectCollection $tbvagas  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbvagas($tbvagas, $comparison = null)
    {
        if ($tbvagas instanceof Tbvagas) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbvagas->getIdVersaoCurso(), $comparison);
        } elseif ($tbvagas instanceof PropelObjectCollection) {
            return $this
                ->useTbvagasQuery()
                ->filterByPrimaryKeys($tbvagas->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbvagas() only accepts arguments of type Tbvagas or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbvagas relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbvagas($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbvagas');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbvagas');
        }

        return $this;
    }

    /**
     * Use the Tbvagas relation Tbvagas object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbvagasQuery A secondary query class using the current class as primary query
     */
    public function useTbvagasQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbvagas($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbvagas', 'TbvagasQuery');
    }

    /**
     * Filter the query by a related Tbloadaluno object
     *
     * @param   Tbloadaluno|PropelObjectCollection $tbloadaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbloadaluno($tbloadaluno, $comparison = null)
    {
        if ($tbloadaluno instanceof Tbloadaluno) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbloadaluno->getIdVersaoCurso(), $comparison);
        } elseif ($tbloadaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbloadalunoQuery()
                ->filterByPrimaryKeys($tbloadaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbloadaluno() only accepts arguments of type Tbloadaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbloadaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbloadaluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbloadaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbloadaluno');
        }

        return $this;
    }

    /**
     * Use the Tbloadaluno relation Tbloadaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbloadalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbloadalunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbloadaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbloadaluno', 'TbloadalunoQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbaluno->getIdVersaoCurso(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbalunoQuery()
                ->filterByPrimaryKeys($tbaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbcurriculodisciplinas object
     *
     * @param   Tbcurriculodisciplinas|PropelObjectCollection $tbcurriculodisciplinas  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcurriculodisciplinas($tbcurriculodisciplinas, $comparison = null)
    {
        if ($tbcurriculodisciplinas instanceof Tbcurriculodisciplinas) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbcurriculodisciplinas->getIdVersaoCurso(), $comparison);
        } elseif ($tbcurriculodisciplinas instanceof PropelObjectCollection) {
            return $this
                ->useTbcurriculodisciplinasQuery()
                ->filterByPrimaryKeys($tbcurriculodisciplinas->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbcurriculodisciplinas() only accepts arguments of type Tbcurriculodisciplinas or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcurriculodisciplinas relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbcurriculodisciplinas($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcurriculodisciplinas');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcurriculodisciplinas');
        }

        return $this;
    }

    /**
     * Use the Tbcurriculodisciplinas relation Tbcurriculodisciplinas object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcurriculodisciplinasQuery A secondary query class using the current class as primary query
     */
    public function useTbcurriculodisciplinasQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcurriculodisciplinas($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcurriculodisciplinas', 'TbcurriculodisciplinasQuery');
    }

    /**
     * Filter the query by a related Tbdisciplinarequisitos object
     *
     * @param   Tbdisciplinarequisitos|PropelObjectCollection $tbdisciplinarequisitos  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplinarequisitos($tbdisciplinarequisitos, $comparison = null)
    {
        if ($tbdisciplinarequisitos instanceof Tbdisciplinarequisitos) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbdisciplinarequisitos->getIdVersaoCurso(), $comparison);
        } elseif ($tbdisciplinarequisitos instanceof PropelObjectCollection) {
            return $this
                ->useTbdisciplinarequisitosQuery()
                ->filterByPrimaryKeys($tbdisciplinarequisitos->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbdisciplinarequisitos() only accepts arguments of type Tbdisciplinarequisitos or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbdisciplinarequisitos relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbdisciplinarequisitos($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbdisciplinarequisitos');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbdisciplinarequisitos');
        }

        return $this;
    }

    /**
     * Use the Tbdisciplinarequisitos relation Tbdisciplinarequisitos object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinarequisitosQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinarequisitosQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplinarequisitos($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbdisciplinarequisitos', 'TbdisciplinarequisitosQuery');
    }

    /**
     * Filter the query by a related Tbcoordenadorcurso object
     *
     * @param   Tbcoordenadorcurso|PropelObjectCollection $tbcoordenadorcurso  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcursoversaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcoordenadorcurso($tbcoordenadorcurso, $comparison = null)
    {
        if ($tbcoordenadorcurso instanceof Tbcoordenadorcurso) {
            return $this
                ->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbcoordenadorcurso->getIdVersaoCurso(), $comparison);
        } elseif ($tbcoordenadorcurso instanceof PropelObjectCollection) {
            return $this
                ->useTbcoordenadorcursoQuery()
                ->filterByPrimaryKeys($tbcoordenadorcurso->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbcoordenadorcurso() only accepts arguments of type Tbcoordenadorcurso or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcoordenadorcurso relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function joinTbcoordenadorcurso($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcoordenadorcurso');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcoordenadorcurso');
        }

        return $this;
    }

    /**
     * Use the Tbcoordenadorcurso relation Tbcoordenadorcurso object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcoordenadorcursoQuery A secondary query class using the current class as primary query
     */
    public function useTbcoordenadorcursoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcoordenadorcurso($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcoordenadorcurso', 'TbcoordenadorcursoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbcursoversao $tbcursoversao Object to remove from the list of results
     *
     * @return TbcursoversaoQuery The current query, for fluid interface
     */
    public function prune($tbcursoversao = null)
    {
        if ($tbcursoversao) {
            $this->addUsingAlias(TbcursoversaoPeer::ID_VERSAO_CURSO, $tbcursoversao->getIdVersaoCurso(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
