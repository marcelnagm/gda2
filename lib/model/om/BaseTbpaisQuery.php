<?php


/**
 * Base class that represents a query for the 'tbpais' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbpaisQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 * @method TbpaisQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbpaisQuery orderBySucinto($order = Criteria::ASC) Order by the sucinto column
 * @method TbpaisQuery orderByNacionalidade($order = Criteria::ASC) Order by the nacionalidade column
 * @method TbpaisQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbpaisQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbpaisQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbpaisQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbpaisQuery groupByIdPais() Group by the id_pais column
 * @method TbpaisQuery groupByDescricao() Group by the descricao column
 * @method TbpaisQuery groupBySucinto() Group by the sucinto column
 * @method TbpaisQuery groupByNacionalidade() Group by the nacionalidade column
 * @method TbpaisQuery groupByCreatedAt() Group by the created_at column
 * @method TbpaisQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbpaisQuery groupByCreatedBy() Group by the created_by column
 * @method TbpaisQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbpaisQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbpaisQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbpaisQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbpaisQuery leftJoinTbalunomatricula($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunomatricula relation
 * @method TbpaisQuery rightJoinTbalunomatricula($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunomatricula relation
 * @method TbpaisQuery innerJoinTbalunomatricula($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunomatricula relation
 *
 * @method TbpaisQuery leftJoinTbalunobackup($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunobackup relation
 * @method TbpaisQuery rightJoinTbalunobackup($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunobackup relation
 * @method TbpaisQuery innerJoinTbalunobackup($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunobackup relation
 *
 * @method TbpaisQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbpaisQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbpaisQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method TbpaisQuery leftJoinTbcidade($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcidade relation
 * @method TbpaisQuery rightJoinTbcidade($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcidade relation
 * @method TbpaisQuery innerJoinTbcidade($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcidade relation
 *
 * @method TbpaisQuery leftJoinTbestado($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbestado relation
 * @method TbpaisQuery rightJoinTbestado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbestado relation
 * @method TbpaisQuery innerJoinTbestado($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbestado relation
 *
 * @method Tbpais findOne(PropelPDO $con = null) Return the first Tbpais matching the query
 * @method Tbpais findOneOrCreate(PropelPDO $con = null) Return the first Tbpais matching the query, or a new Tbpais object populated from the query conditions when no match is found
 *
 * @method Tbpais findOneByIdPais(int $id_pais) Return the first Tbpais filtered by the id_pais column
 * @method Tbpais findOneByDescricao(string $descricao) Return the first Tbpais filtered by the descricao column
 * @method Tbpais findOneBySucinto(string $sucinto) Return the first Tbpais filtered by the sucinto column
 * @method Tbpais findOneByNacionalidade(string $nacionalidade) Return the first Tbpais filtered by the nacionalidade column
 * @method Tbpais findOneByCreatedAt(string $created_at) Return the first Tbpais filtered by the created_at column
 * @method Tbpais findOneByUpdatedAt(string $updated_at) Return the first Tbpais filtered by the updated_at column
 * @method Tbpais findOneByCreatedBy(string $created_by) Return the first Tbpais filtered by the created_by column
 * @method Tbpais findOneByUpdatedBy(string $updated_by) Return the first Tbpais filtered by the updated_by column
 *
 * @method array findByIdPais(int $id_pais) Return Tbpais objects filtered by the id_pais column
 * @method array findByDescricao(string $descricao) Return Tbpais objects filtered by the descricao column
 * @method array findBySucinto(string $sucinto) Return Tbpais objects filtered by the sucinto column
 * @method array findByNacionalidade(string $nacionalidade) Return Tbpais objects filtered by the nacionalidade column
 * @method array findByCreatedAt(string $created_at) Return Tbpais objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbpais objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbpais objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbpais objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbpaisQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbpaisQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbpais', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbpaisQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbpaisQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbpaisQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbpaisQuery) {
            return $criteria;
        }
        $query = new TbpaisQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbpais|Tbpais[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbpaisPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbpaisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbpais A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_PAIS, DESCRICAO, SUCINTO, NACIONALIDADE, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbpais WHERE ID_PAIS = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbpais();
            $obj->hydrate($row);
            TbpaisPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbpais|Tbpais[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbpais[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbpaisPeer::ID_PAIS, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbpaisPeer::ID_PAIS, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_pais column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPais(1234); // WHERE id_pais = 1234
     * $query->filterByIdPais(array(12, 34)); // WHERE id_pais IN (12, 34)
     * $query->filterByIdPais(array('min' => 12)); // WHERE id_pais > 12
     * </code>
     *
     * @param     mixed $idPais The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByIdPais($idPais = null, $comparison = null)
    {
        if (is_array($idPais) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbpaisPeer::ID_PAIS, $idPais, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the sucinto column
     *
     * Example usage:
     * <code>
     * $query->filterBySucinto('fooValue');   // WHERE sucinto = 'fooValue'
     * $query->filterBySucinto('%fooValue%'); // WHERE sucinto LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sucinto The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterBySucinto($sucinto = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sucinto)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sucinto)) {
                $sucinto = str_replace('*', '%', $sucinto);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::SUCINTO, $sucinto, $comparison);
    }

    /**
     * Filter the query on the nacionalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNacionalidade('fooValue');   // WHERE nacionalidade = 'fooValue'
     * $query->filterByNacionalidade('%fooValue%'); // WHERE nacionalidade LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nacionalidade The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByNacionalidade($nacionalidade = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nacionalidade)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nacionalidade)) {
                $nacionalidade = str_replace('*', '%', $nacionalidade);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::NACIONALIDADE, $nacionalidade, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbpaisPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbpaisPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbpaisPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbpaisPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbpaisPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbalunomatricula object
     *
     * @param   Tbalunomatricula|PropelObjectCollection $tbalunomatricula  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbpaisQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunomatricula($tbalunomatricula, $comparison = null)
    {
        if ($tbalunomatricula instanceof Tbalunomatricula) {
            return $this
                ->addUsingAlias(TbpaisPeer::ID_PAIS, $tbalunomatricula->getNacionalidade(), $comparison);
        } elseif ($tbalunomatricula instanceof PropelObjectCollection) {
            return $this
                ->useTbalunomatriculaQuery()
                ->filterByPrimaryKeys($tbalunomatricula->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunomatricula() only accepts arguments of type Tbalunomatricula or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunomatricula relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function joinTbalunomatricula($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunomatricula');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunomatricula');
        }

        return $this;
    }

    /**
     * Use the Tbalunomatricula relation Tbalunomatricula object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunomatriculaQuery A secondary query class using the current class as primary query
     */
    public function useTbalunomatriculaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunomatricula($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunomatricula', 'TbalunomatriculaQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbpaisQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackup($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbpaisPeer::ID_PAIS, $tbalunobackup->getNacionalidade(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackup() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunobackup relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function joinTbalunobackup($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunobackup');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunobackup');
        }

        return $this;
    }

    /**
     * Use the Tbalunobackup relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunobackup($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunobackup', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbpaisQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbpaisPeer::ID_PAIS, $tbaluno->getNacionalidade(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbalunoQuery()
                ->filterByPrimaryKeys($tbaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbcidade object
     *
     * @param   Tbcidade|PropelObjectCollection $tbcidade  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbpaisQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcidade($tbcidade, $comparison = null)
    {
        if ($tbcidade instanceof Tbcidade) {
            return $this
                ->addUsingAlias(TbpaisPeer::ID_PAIS, $tbcidade->getIdPais(), $comparison);
        } elseif ($tbcidade instanceof PropelObjectCollection) {
            return $this
                ->useTbcidadeQuery()
                ->filterByPrimaryKeys($tbcidade->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbcidade() only accepts arguments of type Tbcidade or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcidade relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function joinTbcidade($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcidade');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcidade');
        }

        return $this;
    }

    /**
     * Use the Tbcidade relation Tbcidade object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcidadeQuery A secondary query class using the current class as primary query
     */
    public function useTbcidadeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcidade($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcidade', 'TbcidadeQuery');
    }

    /**
     * Filter the query by a related Tbestado object
     *
     * @param   Tbestado|PropelObjectCollection $tbestado  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbpaisQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbestado($tbestado, $comparison = null)
    {
        if ($tbestado instanceof Tbestado) {
            return $this
                ->addUsingAlias(TbpaisPeer::ID_PAIS, $tbestado->getIdPais(), $comparison);
        } elseif ($tbestado instanceof PropelObjectCollection) {
            return $this
                ->useTbestadoQuery()
                ->filterByPrimaryKeys($tbestado->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbestado() only accepts arguments of type Tbestado or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbestado relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function joinTbestado($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbestado');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbestado');
        }

        return $this;
    }

    /**
     * Use the Tbestado relation Tbestado object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbestadoQuery A secondary query class using the current class as primary query
     */
    public function useTbestadoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbestado($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbestado', 'TbestadoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbpais $tbpais Object to remove from the list of results
     *
     * @return TbpaisQuery The current query, for fluid interface
     */
    public function prune($tbpais = null)
    {
        if ($tbpais) {
            $this->addUsingAlias(TbpaisPeer::ID_PAIS, $tbpais->getIdPais(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
