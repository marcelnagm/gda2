<?php


/**
 * Base class that represents a query for the 'tbinstexterna' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbinstexternaQuery orderByIdInstExterna($order = Criteria::ASC) Order by the id_inst_externa column
 * @method TbinstexternaQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbinstexternaQuery orderBySucinto($order = Criteria::ASC) Order by the sucinto column
 * @method TbinstexternaQuery orderByUf($order = Criteria::ASC) Order by the uf column
 * @method TbinstexternaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbinstexternaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbinstexternaQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbinstexternaQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 * @method TbinstexternaQuery orderByIdTipo($order = Criteria::ASC) Order by the id_tipo column
 *
 * @method TbinstexternaQuery groupByIdInstExterna() Group by the id_inst_externa column
 * @method TbinstexternaQuery groupByDescricao() Group by the descricao column
 * @method TbinstexternaQuery groupBySucinto() Group by the sucinto column
 * @method TbinstexternaQuery groupByUf() Group by the uf column
 * @method TbinstexternaQuery groupByCreatedAt() Group by the created_at column
 * @method TbinstexternaQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbinstexternaQuery groupByCreatedBy() Group by the created_by column
 * @method TbinstexternaQuery groupByUpdatedBy() Group by the updated_by column
 * @method TbinstexternaQuery groupByIdTipo() Group by the id_tipo column
 *
 * @method TbinstexternaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbinstexternaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbinstexternaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbinstexternaQuery leftJoinTbinstexternatipo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbinstexternatipo relation
 * @method TbinstexternaQuery rightJoinTbinstexternatipo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbinstexternatipo relation
 * @method TbinstexternaQuery innerJoinTbinstexternatipo($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbinstexternatipo relation
 *
 * @method TbinstexternaQuery leftJoinTbalunomatricula($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunomatricula relation
 * @method TbinstexternaQuery rightJoinTbalunomatricula($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunomatricula relation
 * @method TbinstexternaQuery innerJoinTbalunomatricula($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunomatricula relation
 *
 * @method TbinstexternaQuery leftJoinTbalunobackupRelatedByIdDestino($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunobackupRelatedByIdDestino relation
 * @method TbinstexternaQuery rightJoinTbalunobackupRelatedByIdDestino($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunobackupRelatedByIdDestino relation
 * @method TbinstexternaQuery innerJoinTbalunobackupRelatedByIdDestino($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunobackupRelatedByIdDestino relation
 *
 * @method TbinstexternaQuery leftJoinTbalunobackupRelatedById2grau($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunobackupRelatedById2grau relation
 * @method TbinstexternaQuery rightJoinTbalunobackupRelatedById2grau($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunobackupRelatedById2grau relation
 * @method TbinstexternaQuery innerJoinTbalunobackupRelatedById2grau($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunobackupRelatedById2grau relation
 *
 * @method TbinstexternaQuery leftJoinTbalunobackupRelatedById3grau($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunobackupRelatedById3grau relation
 * @method TbinstexternaQuery rightJoinTbalunobackupRelatedById3grau($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunobackupRelatedById3grau relation
 * @method TbinstexternaQuery innerJoinTbalunobackupRelatedById3grau($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunobackupRelatedById3grau relation
 *
 * @method TbinstexternaQuery leftJoinTbalunobackupRelatedByIdTrabalho($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunobackupRelatedByIdTrabalho relation
 * @method TbinstexternaQuery rightJoinTbalunobackupRelatedByIdTrabalho($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunobackupRelatedByIdTrabalho relation
 * @method TbinstexternaQuery innerJoinTbalunobackupRelatedByIdTrabalho($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunobackupRelatedByIdTrabalho relation
 *
 * @method TbinstexternaQuery leftJoinTbalunoRelatedByIdDestino($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunoRelatedByIdDestino relation
 * @method TbinstexternaQuery rightJoinTbalunoRelatedByIdDestino($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunoRelatedByIdDestino relation
 * @method TbinstexternaQuery innerJoinTbalunoRelatedByIdDestino($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunoRelatedByIdDestino relation
 *
 * @method TbinstexternaQuery leftJoinTbalunoRelatedById2grau($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunoRelatedById2grau relation
 * @method TbinstexternaQuery rightJoinTbalunoRelatedById2grau($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunoRelatedById2grau relation
 * @method TbinstexternaQuery innerJoinTbalunoRelatedById2grau($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunoRelatedById2grau relation
 *
 * @method TbinstexternaQuery leftJoinTbalunoRelatedById3grau($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunoRelatedById3grau relation
 * @method TbinstexternaQuery rightJoinTbalunoRelatedById3grau($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunoRelatedById3grau relation
 * @method TbinstexternaQuery innerJoinTbalunoRelatedById3grau($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunoRelatedById3grau relation
 *
 * @method TbinstexternaQuery leftJoinTbalunoRelatedByIdTrabalho($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunoRelatedByIdTrabalho relation
 * @method TbinstexternaQuery rightJoinTbalunoRelatedByIdTrabalho($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunoRelatedByIdTrabalho relation
 * @method TbinstexternaQuery innerJoinTbalunoRelatedByIdTrabalho($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunoRelatedByIdTrabalho relation
 *
 * @method Tbinstexterna findOne(PropelPDO $con = null) Return the first Tbinstexterna matching the query
 * @method Tbinstexterna findOneOrCreate(PropelPDO $con = null) Return the first Tbinstexterna matching the query, or a new Tbinstexterna object populated from the query conditions when no match is found
 *
 * @method Tbinstexterna findOneByIdInstExterna(int $id_inst_externa) Return the first Tbinstexterna filtered by the id_inst_externa column
 * @method Tbinstexterna findOneByDescricao(string $descricao) Return the first Tbinstexterna filtered by the descricao column
 * @method Tbinstexterna findOneBySucinto(string $sucinto) Return the first Tbinstexterna filtered by the sucinto column
 * @method Tbinstexterna findOneByUf(string $uf) Return the first Tbinstexterna filtered by the uf column
 * @method Tbinstexterna findOneByCreatedAt(string $created_at) Return the first Tbinstexterna filtered by the created_at column
 * @method Tbinstexterna findOneByUpdatedAt(string $updated_at) Return the first Tbinstexterna filtered by the updated_at column
 * @method Tbinstexterna findOneByCreatedBy(string $created_by) Return the first Tbinstexterna filtered by the created_by column
 * @method Tbinstexterna findOneByUpdatedBy(string $updated_by) Return the first Tbinstexterna filtered by the updated_by column
 * @method Tbinstexterna findOneByIdTipo(int $id_tipo) Return the first Tbinstexterna filtered by the id_tipo column
 *
 * @method array findByIdInstExterna(int $id_inst_externa) Return Tbinstexterna objects filtered by the id_inst_externa column
 * @method array findByDescricao(string $descricao) Return Tbinstexterna objects filtered by the descricao column
 * @method array findBySucinto(string $sucinto) Return Tbinstexterna objects filtered by the sucinto column
 * @method array findByUf(string $uf) Return Tbinstexterna objects filtered by the uf column
 * @method array findByCreatedAt(string $created_at) Return Tbinstexterna objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbinstexterna objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbinstexterna objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbinstexterna objects filtered by the updated_by column
 * @method array findByIdTipo(int $id_tipo) Return Tbinstexterna objects filtered by the id_tipo column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbinstexternaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbinstexternaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbinstexterna', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbinstexternaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbinstexternaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbinstexternaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbinstexternaQuery) {
            return $criteria;
        }
        $query = new TbinstexternaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbinstexterna|Tbinstexterna[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbinstexternaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbinstexternaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbinstexterna A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_INST_EXTERNA, DESCRICAO, SUCINTO, UF, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY, ID_TIPO FROM tbinstexterna WHERE ID_INST_EXTERNA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbinstexterna();
            $obj->hydrate($row);
            TbinstexternaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbinstexterna|Tbinstexterna[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbinstexterna[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_inst_externa column
     *
     * Example usage:
     * <code>
     * $query->filterByIdInstExterna(1234); // WHERE id_inst_externa = 1234
     * $query->filterByIdInstExterna(array(12, 34)); // WHERE id_inst_externa IN (12, 34)
     * $query->filterByIdInstExterna(array('min' => 12)); // WHERE id_inst_externa > 12
     * </code>
     *
     * @param     mixed $idInstExterna The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByIdInstExterna($idInstExterna = null, $comparison = null)
    {
        if (is_array($idInstExterna) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $idInstExterna, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the sucinto column
     *
     * Example usage:
     * <code>
     * $query->filterBySucinto('fooValue');   // WHERE sucinto = 'fooValue'
     * $query->filterBySucinto('%fooValue%'); // WHERE sucinto LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sucinto The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterBySucinto($sucinto = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sucinto)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sucinto)) {
                $sucinto = str_replace('*', '%', $sucinto);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::SUCINTO, $sucinto, $comparison);
    }

    /**
     * Filter the query on the uf column
     *
     * Example usage:
     * <code>
     * $query->filterByUf('fooValue');   // WHERE uf = 'fooValue'
     * $query->filterByUf('%fooValue%'); // WHERE uf LIKE '%fooValue%'
     * </code>
     *
     * @param     string $uf The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByUf($uf = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($uf)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $uf)) {
                $uf = str_replace('*', '%', $uf);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::UF, $uf, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbinstexternaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbinstexternaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbinstexternaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbinstexternaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query on the id_tipo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTipo(1234); // WHERE id_tipo = 1234
     * $query->filterByIdTipo(array(12, 34)); // WHERE id_tipo IN (12, 34)
     * $query->filterByIdTipo(array('min' => 12)); // WHERE id_tipo > 12
     * </code>
     *
     * @see       filterByTbinstexternatipo()
     *
     * @param     mixed $idTipo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function filterByIdTipo($idTipo = null, $comparison = null)
    {
        if (is_array($idTipo)) {
            $useMinMax = false;
            if (isset($idTipo['min'])) {
                $this->addUsingAlias(TbinstexternaPeer::ID_TIPO, $idTipo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTipo['max'])) {
                $this->addUsingAlias(TbinstexternaPeer::ID_TIPO, $idTipo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbinstexternaPeer::ID_TIPO, $idTipo, $comparison);
    }

    /**
     * Filter the query by a related Tbinstexternatipo object
     *
     * @param   Tbinstexternatipo|PropelObjectCollection $tbinstexternatipo The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbinstexternatipo($tbinstexternatipo, $comparison = null)
    {
        if ($tbinstexternatipo instanceof Tbinstexternatipo) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_TIPO, $tbinstexternatipo->getIdTipo(), $comparison);
        } elseif ($tbinstexternatipo instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_TIPO, $tbinstexternatipo->toKeyValue('PrimaryKey', 'IdTipo'), $comparison);
        } else {
            throw new PropelException('filterByTbinstexternatipo() only accepts arguments of type Tbinstexternatipo or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbinstexternatipo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbinstexternatipo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbinstexternatipo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbinstexternatipo');
        }

        return $this;
    }

    /**
     * Use the Tbinstexternatipo relation Tbinstexternatipo object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbinstexternatipoQuery A secondary query class using the current class as primary query
     */
    public function useTbinstexternatipoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbinstexternatipo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbinstexternatipo', 'TbinstexternatipoQuery');
    }

    /**
     * Filter the query by a related Tbalunomatricula object
     *
     * @param   Tbalunomatricula|PropelObjectCollection $tbalunomatricula  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunomatricula($tbalunomatricula, $comparison = null)
    {
        if ($tbalunomatricula instanceof Tbalunomatricula) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbalunomatricula->getId2grau(), $comparison);
        } elseif ($tbalunomatricula instanceof PropelObjectCollection) {
            return $this
                ->useTbalunomatriculaQuery()
                ->filterByPrimaryKeys($tbalunomatricula->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunomatricula() only accepts arguments of type Tbalunomatricula or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunomatricula relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunomatricula($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunomatricula');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunomatricula');
        }

        return $this;
    }

    /**
     * Use the Tbalunomatricula relation Tbalunomatricula object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunomatriculaQuery A secondary query class using the current class as primary query
     */
    public function useTbalunomatriculaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunomatricula($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunomatricula', 'TbalunomatriculaQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackupRelatedByIdDestino($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbalunobackup->getIdDestino(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupRelatedByIdDestinoQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackupRelatedByIdDestino() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunobackupRelatedByIdDestino relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunobackupRelatedByIdDestino($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunobackupRelatedByIdDestino');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunobackupRelatedByIdDestino');
        }

        return $this;
    }

    /**
     * Use the TbalunobackupRelatedByIdDestino relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupRelatedByIdDestinoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunobackupRelatedByIdDestino($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunobackupRelatedByIdDestino', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackupRelatedById2grau($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbalunobackup->getId2grau(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupRelatedById2grauQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackupRelatedById2grau() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunobackupRelatedById2grau relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunobackupRelatedById2grau($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunobackupRelatedById2grau');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunobackupRelatedById2grau');
        }

        return $this;
    }

    /**
     * Use the TbalunobackupRelatedById2grau relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupRelatedById2grauQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunobackupRelatedById2grau($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunobackupRelatedById2grau', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackupRelatedById3grau($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbalunobackup->getId3grau(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupRelatedById3grauQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackupRelatedById3grau() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunobackupRelatedById3grau relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunobackupRelatedById3grau($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunobackupRelatedById3grau');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunobackupRelatedById3grau');
        }

        return $this;
    }

    /**
     * Use the TbalunobackupRelatedById3grau relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupRelatedById3grauQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunobackupRelatedById3grau($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunobackupRelatedById3grau', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackupRelatedByIdTrabalho($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbalunobackup->getIdTrabalho(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupRelatedByIdTrabalhoQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackupRelatedByIdTrabalho() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunobackupRelatedByIdTrabalho relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunobackupRelatedByIdTrabalho($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunobackupRelatedByIdTrabalho');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunobackupRelatedByIdTrabalho');
        }

        return $this;
    }

    /**
     * Use the TbalunobackupRelatedByIdTrabalho relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupRelatedByIdTrabalhoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunobackupRelatedByIdTrabalho($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunobackupRelatedByIdTrabalho', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunoRelatedByIdDestino($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbaluno->getIdDestino(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbalunoRelatedByIdDestinoQuery()
                ->filterByPrimaryKeys($tbaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunoRelatedByIdDestino() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunoRelatedByIdDestino relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunoRelatedByIdDestino($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunoRelatedByIdDestino');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunoRelatedByIdDestino');
        }

        return $this;
    }

    /**
     * Use the TbalunoRelatedByIdDestino relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoRelatedByIdDestinoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunoRelatedByIdDestino($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunoRelatedByIdDestino', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunoRelatedById2grau($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbaluno->getId2grau(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbalunoRelatedById2grauQuery()
                ->filterByPrimaryKeys($tbaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunoRelatedById2grau() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunoRelatedById2grau relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunoRelatedById2grau($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunoRelatedById2grau');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunoRelatedById2grau');
        }

        return $this;
    }

    /**
     * Use the TbalunoRelatedById2grau relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoRelatedById2grauQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunoRelatedById2grau($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunoRelatedById2grau', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunoRelatedById3grau($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbaluno->getId3grau(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbalunoRelatedById3grauQuery()
                ->filterByPrimaryKeys($tbaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunoRelatedById3grau() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunoRelatedById3grau relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunoRelatedById3grau($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunoRelatedById3grau');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunoRelatedById3grau');
        }

        return $this;
    }

    /**
     * Use the TbalunoRelatedById3grau relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoRelatedById3grauQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunoRelatedById3grau($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunoRelatedById3grau', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbinstexternaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunoRelatedByIdTrabalho($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbaluno->getIdTrabalho(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            return $this
                ->useTbalunoRelatedByIdTrabalhoQuery()
                ->filterByPrimaryKeys($tbaluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunoRelatedByIdTrabalho() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunoRelatedByIdTrabalho relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function joinTbalunoRelatedByIdTrabalho($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunoRelatedByIdTrabalho');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunoRelatedByIdTrabalho');
        }

        return $this;
    }

    /**
     * Use the TbalunoRelatedByIdTrabalho relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoRelatedByIdTrabalhoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunoRelatedByIdTrabalho($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunoRelatedByIdTrabalho', 'TbalunoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbinstexterna $tbinstexterna Object to remove from the list of results
     *
     * @return TbinstexternaQuery The current query, for fluid interface
     */
    public function prune($tbinstexterna = null)
    {
        if ($tbinstexterna) {
            $this->addUsingAlias(TbinstexternaPeer::ID_INST_EXTERNA, $tbinstexterna->getIdInstExterna(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
