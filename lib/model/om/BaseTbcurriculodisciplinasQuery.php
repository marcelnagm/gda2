<?php


/**
 * Base class that represents a query for the 'tbcurriculodisciplinas' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:38 2013
 *
 * @method TbcurriculodisciplinasQuery orderByIdCurriculoDisciplina($order = Criteria::ASC) Order by the id_curriculo_disciplina column
 * @method TbcurriculodisciplinasQuery orderByIdVersaoCurso($order = Criteria::ASC) Order by the id_versao_curso column
 * @method TbcurriculodisciplinasQuery orderByIdSetor($order = Criteria::ASC) Order by the id_setor column
 * @method TbcurriculodisciplinasQuery orderByCodDisciplina($order = Criteria::ASC) Order by the cod_disciplina column
 * @method TbcurriculodisciplinasQuery orderBySemestreDisciplina($order = Criteria::ASC) Order by the semestre_disciplina column
 * @method TbcurriculodisciplinasQuery orderByIdCarater($order = Criteria::ASC) Order by the id_carater column
 * @method TbcurriculodisciplinasQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbcurriculodisciplinasQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbcurriculodisciplinasQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbcurriculodisciplinasQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbcurriculodisciplinasQuery groupByIdCurriculoDisciplina() Group by the id_curriculo_disciplina column
 * @method TbcurriculodisciplinasQuery groupByIdVersaoCurso() Group by the id_versao_curso column
 * @method TbcurriculodisciplinasQuery groupByIdSetor() Group by the id_setor column
 * @method TbcurriculodisciplinasQuery groupByCodDisciplina() Group by the cod_disciplina column
 * @method TbcurriculodisciplinasQuery groupBySemestreDisciplina() Group by the semestre_disciplina column
 * @method TbcurriculodisciplinasQuery groupByIdCarater() Group by the id_carater column
 * @method TbcurriculodisciplinasQuery groupByCreatedAt() Group by the created_at column
 * @method TbcurriculodisciplinasQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbcurriculodisciplinasQuery groupByCreatedBy() Group by the created_by column
 * @method TbcurriculodisciplinasQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbcurriculodisciplinasQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbcurriculodisciplinasQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbcurriculodisciplinasQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbcurriculodisciplinasQuery leftJoinTbcursoversao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcursoversao relation
 * @method TbcurriculodisciplinasQuery rightJoinTbcursoversao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcursoversao relation
 * @method TbcurriculodisciplinasQuery innerJoinTbcursoversao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcursoversao relation
 *
 * @method TbcurriculodisciplinasQuery leftJoinTbsetor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbsetor relation
 * @method TbcurriculodisciplinasQuery rightJoinTbsetor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbsetor relation
 * @method TbcurriculodisciplinasQuery innerJoinTbsetor($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbsetor relation
 *
 * @method TbcurriculodisciplinasQuery leftJoinTbdisciplina($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbdisciplina relation
 * @method TbcurriculodisciplinasQuery rightJoinTbdisciplina($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbdisciplina relation
 * @method TbcurriculodisciplinasQuery innerJoinTbdisciplina($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbdisciplina relation
 *
 * @method TbcurriculodisciplinasQuery leftJoinTbcarater($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcarater relation
 * @method TbcurriculodisciplinasQuery rightJoinTbcarater($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcarater relation
 * @method TbcurriculodisciplinasQuery innerJoinTbcarater($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcarater relation
 *
 * @method TbcurriculodisciplinasQuery leftJoinTbgradeEquivalente($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbgradeEquivalente relation
 * @method TbcurriculodisciplinasQuery rightJoinTbgradeEquivalente($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbgradeEquivalente relation
 * @method TbcurriculodisciplinasQuery innerJoinTbgradeEquivalente($relationAlias = null) Adds a INNER JOIN clause to the query using the TbgradeEquivalente relation
 *
 * @method Tbcurriculodisciplinas findOne(PropelPDO $con = null) Return the first Tbcurriculodisciplinas matching the query
 * @method Tbcurriculodisciplinas findOneOrCreate(PropelPDO $con = null) Return the first Tbcurriculodisciplinas matching the query, or a new Tbcurriculodisciplinas object populated from the query conditions when no match is found
 *
 * @method Tbcurriculodisciplinas findOneByIdCurriculoDisciplina(int $id_curriculo_disciplina) Return the first Tbcurriculodisciplinas filtered by the id_curriculo_disciplina column
 * @method Tbcurriculodisciplinas findOneByIdVersaoCurso(int $id_versao_curso) Return the first Tbcurriculodisciplinas filtered by the id_versao_curso column
 * @method Tbcurriculodisciplinas findOneByIdSetor(int $id_setor) Return the first Tbcurriculodisciplinas filtered by the id_setor column
 * @method Tbcurriculodisciplinas findOneByCodDisciplina(string $cod_disciplina) Return the first Tbcurriculodisciplinas filtered by the cod_disciplina column
 * @method Tbcurriculodisciplinas findOneBySemestreDisciplina(int $semestre_disciplina) Return the first Tbcurriculodisciplinas filtered by the semestre_disciplina column
 * @method Tbcurriculodisciplinas findOneByIdCarater(string $id_carater) Return the first Tbcurriculodisciplinas filtered by the id_carater column
 * @method Tbcurriculodisciplinas findOneByCreatedAt(string $created_at) Return the first Tbcurriculodisciplinas filtered by the created_at column
 * @method Tbcurriculodisciplinas findOneByUpdatedAt(string $updated_at) Return the first Tbcurriculodisciplinas filtered by the updated_at column
 * @method Tbcurriculodisciplinas findOneByCreatedBy(string $created_by) Return the first Tbcurriculodisciplinas filtered by the created_by column
 * @method Tbcurriculodisciplinas findOneByUpdatedBy(string $updated_by) Return the first Tbcurriculodisciplinas filtered by the updated_by column
 *
 * @method array findByIdCurriculoDisciplina(int $id_curriculo_disciplina) Return Tbcurriculodisciplinas objects filtered by the id_curriculo_disciplina column
 * @method array findByIdVersaoCurso(int $id_versao_curso) Return Tbcurriculodisciplinas objects filtered by the id_versao_curso column
 * @method array findByIdSetor(int $id_setor) Return Tbcurriculodisciplinas objects filtered by the id_setor column
 * @method array findByCodDisciplina(string $cod_disciplina) Return Tbcurriculodisciplinas objects filtered by the cod_disciplina column
 * @method array findBySemestreDisciplina(int $semestre_disciplina) Return Tbcurriculodisciplinas objects filtered by the semestre_disciplina column
 * @method array findByIdCarater(string $id_carater) Return Tbcurriculodisciplinas objects filtered by the id_carater column
 * @method array findByCreatedAt(string $created_at) Return Tbcurriculodisciplinas objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbcurriculodisciplinas objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbcurriculodisciplinas objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbcurriculodisciplinas objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbcurriculodisciplinasQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbcurriculodisciplinasQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbcurriculodisciplinas', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbcurriculodisciplinasQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbcurriculodisciplinasQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbcurriculodisciplinasQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbcurriculodisciplinasQuery) {
            return $criteria;
        }
        $query = new TbcurriculodisciplinasQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbcurriculodisciplinas|Tbcurriculodisciplinas[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbcurriculodisciplinasPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbcurriculodisciplinasPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbcurriculodisciplinas A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_CURRICULO_DISCIPLINA, ID_VERSAO_CURSO, ID_SETOR, COD_DISCIPLINA, SEMESTRE_DISCIPLINA, ID_CARATER, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbcurriculodisciplinas WHERE ID_CURRICULO_DISCIPLINA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbcurriculodisciplinas();
            $obj->hydrate($row);
            TbcurriculodisciplinasPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbcurriculodisciplinas|Tbcurriculodisciplinas[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbcurriculodisciplinas[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_CURRICULO_DISCIPLINA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_CURRICULO_DISCIPLINA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_curriculo_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterByIdCurriculoDisciplina(1234); // WHERE id_curriculo_disciplina = 1234
     * $query->filterByIdCurriculoDisciplina(array(12, 34)); // WHERE id_curriculo_disciplina IN (12, 34)
     * $query->filterByIdCurriculoDisciplina(array('min' => 12)); // WHERE id_curriculo_disciplina > 12
     * </code>
     *
     * @param     mixed $idCurriculoDisciplina The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByIdCurriculoDisciplina($idCurriculoDisciplina = null, $comparison = null)
    {
        if (is_array($idCurriculoDisciplina) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_CURRICULO_DISCIPLINA, $idCurriculoDisciplina, $comparison);
    }

    /**
     * Filter the query on the id_versao_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByIdVersaoCurso(1234); // WHERE id_versao_curso = 1234
     * $query->filterByIdVersaoCurso(array(12, 34)); // WHERE id_versao_curso IN (12, 34)
     * $query->filterByIdVersaoCurso(array('min' => 12)); // WHERE id_versao_curso > 12
     * </code>
     *
     * @see       filterByTbcursoversao()
     *
     * @param     mixed $idVersaoCurso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByIdVersaoCurso($idVersaoCurso = null, $comparison = null)
    {
        if (is_array($idVersaoCurso)) {
            $useMinMax = false;
            if (isset($idVersaoCurso['min'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $idVersaoCurso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idVersaoCurso['max'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $idVersaoCurso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $idVersaoCurso, $comparison);
    }

    /**
     * Filter the query on the id_setor column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSetor(1234); // WHERE id_setor = 1234
     * $query->filterByIdSetor(array(12, 34)); // WHERE id_setor IN (12, 34)
     * $query->filterByIdSetor(array('min' => 12)); // WHERE id_setor > 12
     * </code>
     *
     * @see       filterByTbsetor()
     *
     * @param     mixed $idSetor The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByIdSetor($idSetor = null, $comparison = null)
    {
        if (is_array($idSetor)) {
            $useMinMax = false;
            if (isset($idSetor['min'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_SETOR, $idSetor['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSetor['max'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_SETOR, $idSetor['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_SETOR, $idSetor, $comparison);
    }

    /**
     * Filter the query on the cod_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterByCodDisciplina('fooValue');   // WHERE cod_disciplina = 'fooValue'
     * $query->filterByCodDisciplina('%fooValue%'); // WHERE cod_disciplina LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codDisciplina The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByCodDisciplina($codDisciplina = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codDisciplina)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codDisciplina)) {
                $codDisciplina = str_replace('*', '%', $codDisciplina);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $codDisciplina, $comparison);
    }

    /**
     * Filter the query on the semestre_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterBySemestreDisciplina(1234); // WHERE semestre_disciplina = 1234
     * $query->filterBySemestreDisciplina(array(12, 34)); // WHERE semestre_disciplina IN (12, 34)
     * $query->filterBySemestreDisciplina(array('min' => 12)); // WHERE semestre_disciplina > 12
     * </code>
     *
     * @param     mixed $semestreDisciplina The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterBySemestreDisciplina($semestreDisciplina = null, $comparison = null)
    {
        if (is_array($semestreDisciplina)) {
            $useMinMax = false;
            if (isset($semestreDisciplina['min'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::SEMESTRE_DISCIPLINA, $semestreDisciplina['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($semestreDisciplina['max'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::SEMESTRE_DISCIPLINA, $semestreDisciplina['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::SEMESTRE_DISCIPLINA, $semestreDisciplina, $comparison);
    }

    /**
     * Filter the query on the id_carater column
     *
     * Example usage:
     * <code>
     * $query->filterByIdCarater('fooValue');   // WHERE id_carater = 'fooValue'
     * $query->filterByIdCarater('%fooValue%'); // WHERE id_carater LIKE '%fooValue%'
     * </code>
     *
     * @param     string $idCarater The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByIdCarater($idCarater = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($idCarater)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $idCarater)) {
                $idCarater = str_replace('*', '%', $idCarater);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_CARATER, $idCarater, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbcurriculodisciplinasPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcurriculodisciplinasPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbcursoversao object
     *
     * @param   Tbcursoversao|PropelObjectCollection $tbcursoversao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcurriculodisciplinasQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcursoversao($tbcursoversao, $comparison = null)
    {
        if ($tbcursoversao instanceof Tbcursoversao) {
            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $tbcursoversao->getIdVersaoCurso(), $comparison);
        } elseif ($tbcursoversao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $tbcursoversao->toKeyValue('PrimaryKey', 'IdVersaoCurso'), $comparison);
        } else {
            throw new PropelException('filterByTbcursoversao() only accepts arguments of type Tbcursoversao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcursoversao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function joinTbcursoversao($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcursoversao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcursoversao');
        }

        return $this;
    }

    /**
     * Use the Tbcursoversao relation Tbcursoversao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursoversaoQuery A secondary query class using the current class as primary query
     */
    public function useTbcursoversaoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcursoversao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcursoversao', 'TbcursoversaoQuery');
    }

    /**
     * Filter the query by a related Tbsetor object
     *
     * @param   Tbsetor|PropelObjectCollection $tbsetor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcurriculodisciplinasQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbsetor($tbsetor, $comparison = null)
    {
        if ($tbsetor instanceof Tbsetor) {
            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_SETOR, $tbsetor->getIdSetor(), $comparison);
        } elseif ($tbsetor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_SETOR, $tbsetor->toKeyValue('PrimaryKey', 'IdSetor'), $comparison);
        } else {
            throw new PropelException('filterByTbsetor() only accepts arguments of type Tbsetor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbsetor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function joinTbsetor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbsetor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbsetor');
        }

        return $this;
    }

    /**
     * Use the Tbsetor relation Tbsetor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbsetorQuery A secondary query class using the current class as primary query
     */
    public function useTbsetorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbsetor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbsetor', 'TbsetorQuery');
    }

    /**
     * Filter the query by a related Tbdisciplina object
     *
     * @param   Tbdisciplina|PropelObjectCollection $tbdisciplina The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcurriculodisciplinasQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplina($tbdisciplina, $comparison = null)
    {
        if ($tbdisciplina instanceof Tbdisciplina) {
            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $tbdisciplina->getCodDisciplina(), $comparison);
        } elseif ($tbdisciplina instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $tbdisciplina->toKeyValue('PrimaryKey', 'CodDisciplina'), $comparison);
        } else {
            throw new PropelException('filterByTbdisciplina() only accepts arguments of type Tbdisciplina or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbdisciplina relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function joinTbdisciplina($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbdisciplina');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbdisciplina');
        }

        return $this;
    }

    /**
     * Use the Tbdisciplina relation Tbdisciplina object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinaQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbdisciplina($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbdisciplina', 'TbdisciplinaQuery');
    }

    /**
     * Filter the query by a related Tbcarater object
     *
     * @param   Tbcarater|PropelObjectCollection $tbcarater The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcurriculodisciplinasQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcarater($tbcarater, $comparison = null)
    {
        if ($tbcarater instanceof Tbcarater) {
            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_CARATER, $tbcarater->getIdCarater(), $comparison);
        } elseif ($tbcarater instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_CARATER, $tbcarater->toKeyValue('PrimaryKey', 'IdCarater'), $comparison);
        } else {
            throw new PropelException('filterByTbcarater() only accepts arguments of type Tbcarater or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcarater relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function joinTbcarater($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcarater');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcarater');
        }

        return $this;
    }

    /**
     * Use the Tbcarater relation Tbcarater object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcaraterQuery A secondary query class using the current class as primary query
     */
    public function useTbcaraterQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcarater($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcarater', 'TbcaraterQuery');
    }

    /**
     * Filter the query by a related TbgradeEquivalente object
     *
     * @param   TbgradeEquivalente|PropelObjectCollection $tbgradeEquivalente  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcurriculodisciplinasQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbgradeEquivalente($tbgradeEquivalente, $comparison = null)
    {
        if ($tbgradeEquivalente instanceof TbgradeEquivalente) {
            return $this
                ->addUsingAlias(TbcurriculodisciplinasPeer::ID_CURRICULO_DISCIPLINA, $tbgradeEquivalente->getIdCurriculoDisciplina(), $comparison);
        } elseif ($tbgradeEquivalente instanceof PropelObjectCollection) {
            return $this
                ->useTbgradeEquivalenteQuery()
                ->filterByPrimaryKeys($tbgradeEquivalente->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbgradeEquivalente() only accepts arguments of type TbgradeEquivalente or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbgradeEquivalente relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function joinTbgradeEquivalente($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbgradeEquivalente');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbgradeEquivalente');
        }

        return $this;
    }

    /**
     * Use the TbgradeEquivalente relation TbgradeEquivalente object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbgradeEquivalenteQuery A secondary query class using the current class as primary query
     */
    public function useTbgradeEquivalenteQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbgradeEquivalente($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbgradeEquivalente', 'TbgradeEquivalenteQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbcurriculodisciplinas $tbcurriculodisciplinas Object to remove from the list of results
     *
     * @return TbcurriculodisciplinasQuery The current query, for fluid interface
     */
    public function prune($tbcurriculodisciplinas = null)
    {
        if ($tbcurriculodisciplinas) {
            $this->addUsingAlias(TbcurriculodisciplinasPeer::ID_CURRICULO_DISCIPLINA, $tbcurriculodisciplinas->getIdCurriculoDisciplina(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
