<?php


/**
 * Base class that represents a query for the 'tbaluno' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:37 2013
 *
 * @method TbalunoQuery orderByIdPessoa($order = Criteria::ASC) Order by the id_pessoa column
 * @method TbalunoQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbalunoQuery orderByNome($order = Criteria::ASC) Order by the nome column
 * @method TbalunoQuery orderByCelular($order = Criteria::ASC) Order by the celular column
 * @method TbalunoQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method TbalunoQuery orderByFoneResidencial($order = Criteria::ASC) Order by the fone_residencial column
 * @method TbalunoQuery orderByFoto($order = Criteria::ASC) Order by the foto column
 * @method TbalunoQuery orderByIdNecesEspecial($order = Criteria::ASC) Order by the id_neces_especial column
 * @method TbalunoQuery orderByDtNascimento($order = Criteria::ASC) Order by the dt_nascimento column
 * @method TbalunoQuery orderByNaturalidade($order = Criteria::ASC) Order by the naturalidade column
 * @method TbalunoQuery orderByUfNascimento($order = Criteria::ASC) Order by the uf_nascimento column
 * @method TbalunoQuery orderByNacionalidade($order = Criteria::ASC) Order by the nacionalidade column
 * @method TbalunoQuery orderBySexo($order = Criteria::ASC) Order by the sexo column
 * @method TbalunoQuery orderByEstadoCivil($order = Criteria::ASC) Order by the estado_civil column
 * @method TbalunoQuery orderByTitulo($order = Criteria::ASC) Order by the titulo column
 * @method TbalunoQuery orderByTituloZona($order = Criteria::ASC) Order by the titulo_zona column
 * @method TbalunoQuery orderByTituloSecao($order = Criteria::ASC) Order by the titulo_secao column
 * @method TbalunoQuery orderByRg($order = Criteria::ASC) Order by the rg column
 * @method TbalunoQuery orderByRgDtExped($order = Criteria::ASC) Order by the rg_dt_exped column
 * @method TbalunoQuery orderByRgOrgExped($order = Criteria::ASC) Order by the rg_org_exped column
 * @method TbalunoQuery orderByCpf($order = Criteria::ASC) Order by the cpf column
 * @method TbalunoQuery orderByReservista($order = Criteria::ASC) Order by the reservista column
 * @method TbalunoQuery orderByPai($order = Criteria::ASC) Order by the pai column
 * @method TbalunoQuery orderByMae($order = Criteria::ASC) Order by the mae column
 * @method TbalunoQuery orderByCep($order = Criteria::ASC) Order by the cep column
 * @method TbalunoQuery orderByNumero($order = Criteria::ASC) Order by the numero column
 * @method TbalunoQuery orderByComplemento($order = Criteria::ASC) Order by the complemento column
 * @method TbalunoQuery orderByIdVersaoCurso($order = Criteria::ASC) Order by the id_versao_curso column
 * @method TbalunoQuery orderByIdTipoIngresso($order = Criteria::ASC) Order by the id_tipo_ingresso column
 * @method TbalunoQuery orderByDtIngresso($order = Criteria::ASC) Order by the dt_ingresso column
 * @method TbalunoQuery orderByIdSituacao($order = Criteria::ASC) Order by the id_situacao column
 * @method TbalunoQuery orderByDtSituacao($order = Criteria::ASC) Order by the dt_situacao column
 * @method TbalunoQuery orderByIdDestino($order = Criteria::ASC) Order by the id_destino column
 * @method TbalunoQuery orderById2grau($order = Criteria::ASC) Order by the id_2grau column
 * @method TbalunoQuery orderByAnoConcl2grau($order = Criteria::ASC) Order by the ano_concl_2grau column
 * @method TbalunoQuery orderById3grau($order = Criteria::ASC) Order by the id_3grau column
 * @method TbalunoQuery orderByAnoConcl3grau($order = Criteria::ASC) Order by the ano_concl_3grau column
 * @method TbalunoQuery orderByIdTrabalho($order = Criteria::ASC) Order by the id_trabalho column
 * @method TbalunoQuery orderByCepTrabalho($order = Criteria::ASC) Order by the cep_trabalho column
 * @method TbalunoQuery orderByFoneTrabalho($order = Criteria::ASC) Order by the fone_trabalho column
 * @method TbalunoQuery orderByRamalTrabalho($order = Criteria::ASC) Order by the ramal_trabalho column
 * @method TbalunoQuery orderByMediaGeral($order = Criteria::ASC) Order by the media_geral column
 * @method TbalunoQuery orderByChEletivaCursada($order = Criteria::ASC) Order by the ch_eletiva_cursada column
 * @method TbalunoQuery orderByChEletivaSolicitada($order = Criteria::ASC) Order by the ch_eletiva_solicitada column
 * @method TbalunoQuery orderByChObrigCursada($order = Criteria::ASC) Order by the ch_obrig_cursada column
 * @method TbalunoQuery orderByChObrigSolicitada($order = Criteria::ASC) Order by the ch_obrig_solicitada column
 * @method TbalunoQuery orderByChTotal($order = Criteria::ASC) Order by the ch_total column
 * @method TbalunoQuery orderByOpIngresso($order = Criteria::ASC) Order by the op_ingresso column
 * @method TbalunoQuery orderByIdPolo($order = Criteria::ASC) Order by the id_polo column
 * @method TbalunoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbalunoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbalunoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbalunoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 * @method TbalunoQuery orderByIdAntigo($order = Criteria::ASC) Order by the id_antigo column
 * @method TbalunoQuery orderByIdRaca($order = Criteria::ASC) Order by the id_raca column
 *
 * @method TbalunoQuery groupByIdPessoa() Group by the id_pessoa column
 * @method TbalunoQuery groupByMatricula() Group by the matricula column
 * @method TbalunoQuery groupByNome() Group by the nome column
 * @method TbalunoQuery groupByCelular() Group by the celular column
 * @method TbalunoQuery groupByEmail() Group by the email column
 * @method TbalunoQuery groupByFoneResidencial() Group by the fone_residencial column
 * @method TbalunoQuery groupByFoto() Group by the foto column
 * @method TbalunoQuery groupByIdNecesEspecial() Group by the id_neces_especial column
 * @method TbalunoQuery groupByDtNascimento() Group by the dt_nascimento column
 * @method TbalunoQuery groupByNaturalidade() Group by the naturalidade column
 * @method TbalunoQuery groupByUfNascimento() Group by the uf_nascimento column
 * @method TbalunoQuery groupByNacionalidade() Group by the nacionalidade column
 * @method TbalunoQuery groupBySexo() Group by the sexo column
 * @method TbalunoQuery groupByEstadoCivil() Group by the estado_civil column
 * @method TbalunoQuery groupByTitulo() Group by the titulo column
 * @method TbalunoQuery groupByTituloZona() Group by the titulo_zona column
 * @method TbalunoQuery groupByTituloSecao() Group by the titulo_secao column
 * @method TbalunoQuery groupByRg() Group by the rg column
 * @method TbalunoQuery groupByRgDtExped() Group by the rg_dt_exped column
 * @method TbalunoQuery groupByRgOrgExped() Group by the rg_org_exped column
 * @method TbalunoQuery groupByCpf() Group by the cpf column
 * @method TbalunoQuery groupByReservista() Group by the reservista column
 * @method TbalunoQuery groupByPai() Group by the pai column
 * @method TbalunoQuery groupByMae() Group by the mae column
 * @method TbalunoQuery groupByCep() Group by the cep column
 * @method TbalunoQuery groupByNumero() Group by the numero column
 * @method TbalunoQuery groupByComplemento() Group by the complemento column
 * @method TbalunoQuery groupByIdVersaoCurso() Group by the id_versao_curso column
 * @method TbalunoQuery groupByIdTipoIngresso() Group by the id_tipo_ingresso column
 * @method TbalunoQuery groupByDtIngresso() Group by the dt_ingresso column
 * @method TbalunoQuery groupByIdSituacao() Group by the id_situacao column
 * @method TbalunoQuery groupByDtSituacao() Group by the dt_situacao column
 * @method TbalunoQuery groupByIdDestino() Group by the id_destino column
 * @method TbalunoQuery groupById2grau() Group by the id_2grau column
 * @method TbalunoQuery groupByAnoConcl2grau() Group by the ano_concl_2grau column
 * @method TbalunoQuery groupById3grau() Group by the id_3grau column
 * @method TbalunoQuery groupByAnoConcl3grau() Group by the ano_concl_3grau column
 * @method TbalunoQuery groupByIdTrabalho() Group by the id_trabalho column
 * @method TbalunoQuery groupByCepTrabalho() Group by the cep_trabalho column
 * @method TbalunoQuery groupByFoneTrabalho() Group by the fone_trabalho column
 * @method TbalunoQuery groupByRamalTrabalho() Group by the ramal_trabalho column
 * @method TbalunoQuery groupByMediaGeral() Group by the media_geral column
 * @method TbalunoQuery groupByChEletivaCursada() Group by the ch_eletiva_cursada column
 * @method TbalunoQuery groupByChEletivaSolicitada() Group by the ch_eletiva_solicitada column
 * @method TbalunoQuery groupByChObrigCursada() Group by the ch_obrig_cursada column
 * @method TbalunoQuery groupByChObrigSolicitada() Group by the ch_obrig_solicitada column
 * @method TbalunoQuery groupByChTotal() Group by the ch_total column
 * @method TbalunoQuery groupByOpIngresso() Group by the op_ingresso column
 * @method TbalunoQuery groupByIdPolo() Group by the id_polo column
 * @method TbalunoQuery groupByCreatedAt() Group by the created_at column
 * @method TbalunoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbalunoQuery groupByCreatedBy() Group by the created_by column
 * @method TbalunoQuery groupByUpdatedBy() Group by the updated_by column
 * @method TbalunoQuery groupByIdAntigo() Group by the id_antigo column
 * @method TbalunoQuery groupByIdRaca() Group by the id_raca column
 *
 * @method TbalunoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbalunoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbalunoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbalunoQuery leftJoinTbnecesespecial($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbnecesespecial relation
 * @method TbalunoQuery rightJoinTbnecesespecial($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbnecesespecial relation
 * @method TbalunoQuery innerJoinTbnecesespecial($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbnecesespecial relation
 *
 * @method TbalunoQuery leftJoinTbcidade($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcidade relation
 * @method TbalunoQuery rightJoinTbcidade($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcidade relation
 * @method TbalunoQuery innerJoinTbcidade($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcidade relation
 *
 * @method TbalunoQuery leftJoinTbpais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbpais relation
 * @method TbalunoQuery rightJoinTbpais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbpais relation
 * @method TbalunoQuery innerJoinTbpais($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbpais relation
 *
 * @method TbalunoQuery leftJoinTblogradouroRelatedByCep($relationAlias = null) Adds a LEFT JOIN clause to the query using the TblogradouroRelatedByCep relation
 * @method TbalunoQuery rightJoinTblogradouroRelatedByCep($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TblogradouroRelatedByCep relation
 * @method TbalunoQuery innerJoinTblogradouroRelatedByCep($relationAlias = null) Adds a INNER JOIN clause to the query using the TblogradouroRelatedByCep relation
 *
 * @method TbalunoQuery leftJoinTbcursoversao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcursoversao relation
 * @method TbalunoQuery rightJoinTbcursoversao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcursoversao relation
 * @method TbalunoQuery innerJoinTbcursoversao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcursoversao relation
 *
 * @method TbalunoQuery leftJoinTbtipoingresso($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbtipoingresso relation
 * @method TbalunoQuery rightJoinTbtipoingresso($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbtipoingresso relation
 * @method TbalunoQuery innerJoinTbtipoingresso($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbtipoingresso relation
 *
 * @method TbalunoQuery leftJoinTbalunosituacao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunosituacao relation
 * @method TbalunoQuery rightJoinTbalunosituacao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunosituacao relation
 * @method TbalunoQuery innerJoinTbalunosituacao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunosituacao relation
 *
 * @method TbalunoQuery leftJoinTbinstexternaRelatedByIdDestino($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbinstexternaRelatedByIdDestino relation
 * @method TbalunoQuery rightJoinTbinstexternaRelatedByIdDestino($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbinstexternaRelatedByIdDestino relation
 * @method TbalunoQuery innerJoinTbinstexternaRelatedByIdDestino($relationAlias = null) Adds a INNER JOIN clause to the query using the TbinstexternaRelatedByIdDestino relation
 *
 * @method TbalunoQuery leftJoinTbinstexternaRelatedById2grau($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbinstexternaRelatedById2grau relation
 * @method TbalunoQuery rightJoinTbinstexternaRelatedById2grau($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbinstexternaRelatedById2grau relation
 * @method TbalunoQuery innerJoinTbinstexternaRelatedById2grau($relationAlias = null) Adds a INNER JOIN clause to the query using the TbinstexternaRelatedById2grau relation
 *
 * @method TbalunoQuery leftJoinTbinstexternaRelatedById3grau($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbinstexternaRelatedById3grau relation
 * @method TbalunoQuery rightJoinTbinstexternaRelatedById3grau($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbinstexternaRelatedById3grau relation
 * @method TbalunoQuery innerJoinTbinstexternaRelatedById3grau($relationAlias = null) Adds a INNER JOIN clause to the query using the TbinstexternaRelatedById3grau relation
 *
 * @method TbalunoQuery leftJoinTbinstexternaRelatedByIdTrabalho($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbinstexternaRelatedByIdTrabalho relation
 * @method TbalunoQuery rightJoinTbinstexternaRelatedByIdTrabalho($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbinstexternaRelatedByIdTrabalho relation
 * @method TbalunoQuery innerJoinTbinstexternaRelatedByIdTrabalho($relationAlias = null) Adds a INNER JOIN clause to the query using the TbinstexternaRelatedByIdTrabalho relation
 *
 * @method TbalunoQuery leftJoinTblogradouroRelatedByCepTrabalho($relationAlias = null) Adds a LEFT JOIN clause to the query using the TblogradouroRelatedByCepTrabalho relation
 * @method TbalunoQuery rightJoinTblogradouroRelatedByCepTrabalho($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TblogradouroRelatedByCepTrabalho relation
 * @method TbalunoQuery innerJoinTblogradouroRelatedByCepTrabalho($relationAlias = null) Adds a INNER JOIN clause to the query using the TblogradouroRelatedByCepTrabalho relation
 *
 * @method TbalunoQuery leftJoinTbpolos($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbpolos relation
 * @method TbalunoQuery rightJoinTbpolos($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbpolos relation
 * @method TbalunoQuery innerJoinTbpolos($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbpolos relation
 *
 * @method TbalunoQuery leftJoinTbalunoracacor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunoracacor relation
 * @method TbalunoQuery rightJoinTbalunoracacor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunoracacor relation
 * @method TbalunoQuery innerJoinTbalunoracacor($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunoracacor relation
 *
 * @method TbalunoQuery leftJoinTbpendencia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbpendencia relation
 * @method TbalunoQuery rightJoinTbpendencia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbpendencia relation
 * @method TbalunoQuery innerJoinTbpendencia($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbpendencia relation
 *
 * @method TbalunoQuery leftJoinTbalunodiploma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunodiploma relation
 * @method TbalunoQuery rightJoinTbalunodiploma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunodiploma relation
 * @method TbalunoQuery innerJoinTbalunodiploma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunodiploma relation
 *
 * @method TbalunoQuery leftJoinTbalunosenha($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunosenha relation
 * @method TbalunoQuery rightJoinTbalunosenha($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunosenha relation
 * @method TbalunoQuery innerJoinTbalunosenha($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunosenha relation
 *
 * @method TbalunoQuery leftJoinTbalunosolicitacao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbalunosolicitacao relation
 * @method TbalunoQuery rightJoinTbalunosolicitacao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbalunosolicitacao relation
 * @method TbalunoQuery innerJoinTbalunosolicitacao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbalunosolicitacao relation
 *
 * @method TbalunoQuery leftJoinTbbanca($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbbanca relation
 * @method TbalunoQuery rightJoinTbbanca($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbbanca relation
 * @method TbalunoQuery innerJoinTbbanca($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbbanca relation
 *
 * @method TbalunoQuery leftJoinTbfila($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbfila relation
 * @method TbalunoQuery rightJoinTbfila($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbfila relation
 * @method TbalunoQuery innerJoinTbfila($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbfila relation
 *
 * @method TbalunoQuery leftJoinTbhistorico($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbhistorico relation
 * @method TbalunoQuery rightJoinTbhistorico($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbhistorico relation
 * @method TbalunoQuery innerJoinTbhistorico($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbhistorico relation
 *
 * @method TbalunoQuery leftJoinTbturmaAluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbturmaAluno relation
 * @method TbalunoQuery rightJoinTbturmaAluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbturmaAluno relation
 * @method TbalunoQuery innerJoinTbturmaAluno($relationAlias = null) Adds a INNER JOIN clause to the query using the TbturmaAluno relation
 *
 * @method Tbaluno findOne(PropelPDO $con = null) Return the first Tbaluno matching the query
 * @method Tbaluno findOneOrCreate(PropelPDO $con = null) Return the first Tbaluno matching the query, or a new Tbaluno object populated from the query conditions when no match is found
 *
 * @method Tbaluno findOneByIdPessoa(int $id_pessoa) Return the first Tbaluno filtered by the id_pessoa column
 * @method Tbaluno findOneByMatricula(string $matricula) Return the first Tbaluno filtered by the matricula column
 * @method Tbaluno findOneByNome(string $nome) Return the first Tbaluno filtered by the nome column
 * @method Tbaluno findOneByCelular(string $celular) Return the first Tbaluno filtered by the celular column
 * @method Tbaluno findOneByEmail(string $email) Return the first Tbaluno filtered by the email column
 * @method Tbaluno findOneByFoneResidencial(string $fone_residencial) Return the first Tbaluno filtered by the fone_residencial column
 * @method Tbaluno findOneByFoto(resource $foto) Return the first Tbaluno filtered by the foto column
 * @method Tbaluno findOneByIdNecesEspecial(string $id_neces_especial) Return the first Tbaluno filtered by the id_neces_especial column
 * @method Tbaluno findOneByDtNascimento(string $dt_nascimento) Return the first Tbaluno filtered by the dt_nascimento column
 * @method Tbaluno findOneByNaturalidade(int $naturalidade) Return the first Tbaluno filtered by the naturalidade column
 * @method Tbaluno findOneByUfNascimento(string $uf_nascimento) Return the first Tbaluno filtered by the uf_nascimento column
 * @method Tbaluno findOneByNacionalidade(int $nacionalidade) Return the first Tbaluno filtered by the nacionalidade column
 * @method Tbaluno findOneBySexo(string $sexo) Return the first Tbaluno filtered by the sexo column
 * @method Tbaluno findOneByEstadoCivil(string $estado_civil) Return the first Tbaluno filtered by the estado_civil column
 * @method Tbaluno findOneByTitulo(string $titulo) Return the first Tbaluno filtered by the titulo column
 * @method Tbaluno findOneByTituloZona(int $titulo_zona) Return the first Tbaluno filtered by the titulo_zona column
 * @method Tbaluno findOneByTituloSecao(int $titulo_secao) Return the first Tbaluno filtered by the titulo_secao column
 * @method Tbaluno findOneByRg(string $rg) Return the first Tbaluno filtered by the rg column
 * @method Tbaluno findOneByRgDtExped(string $rg_dt_exped) Return the first Tbaluno filtered by the rg_dt_exped column
 * @method Tbaluno findOneByRgOrgExped(string $rg_org_exped) Return the first Tbaluno filtered by the rg_org_exped column
 * @method Tbaluno findOneByCpf(string $cpf) Return the first Tbaluno filtered by the cpf column
 * @method Tbaluno findOneByReservista(string $reservista) Return the first Tbaluno filtered by the reservista column
 * @method Tbaluno findOneByPai(string $pai) Return the first Tbaluno filtered by the pai column
 * @method Tbaluno findOneByMae(string $mae) Return the first Tbaluno filtered by the mae column
 * @method Tbaluno findOneByCep(string $cep) Return the first Tbaluno filtered by the cep column
 * @method Tbaluno findOneByNumero(string $numero) Return the first Tbaluno filtered by the numero column
 * @method Tbaluno findOneByComplemento(string $complemento) Return the first Tbaluno filtered by the complemento column
 * @method Tbaluno findOneByIdVersaoCurso(int $id_versao_curso) Return the first Tbaluno filtered by the id_versao_curso column
 * @method Tbaluno findOneByIdTipoIngresso(int $id_tipo_ingresso) Return the first Tbaluno filtered by the id_tipo_ingresso column
 * @method Tbaluno findOneByDtIngresso(string $dt_ingresso) Return the first Tbaluno filtered by the dt_ingresso column
 * @method Tbaluno findOneByIdSituacao(int $id_situacao) Return the first Tbaluno filtered by the id_situacao column
 * @method Tbaluno findOneByDtSituacao(string $dt_situacao) Return the first Tbaluno filtered by the dt_situacao column
 * @method Tbaluno findOneByIdDestino(int $id_destino) Return the first Tbaluno filtered by the id_destino column
 * @method Tbaluno findOneById2grau(int $id_2grau) Return the first Tbaluno filtered by the id_2grau column
 * @method Tbaluno findOneByAnoConcl2grau(int $ano_concl_2grau) Return the first Tbaluno filtered by the ano_concl_2grau column
 * @method Tbaluno findOneById3grau(int $id_3grau) Return the first Tbaluno filtered by the id_3grau column
 * @method Tbaluno findOneByAnoConcl3grau(int $ano_concl_3grau) Return the first Tbaluno filtered by the ano_concl_3grau column
 * @method Tbaluno findOneByIdTrabalho(int $id_trabalho) Return the first Tbaluno filtered by the id_trabalho column
 * @method Tbaluno findOneByCepTrabalho(string $cep_trabalho) Return the first Tbaluno filtered by the cep_trabalho column
 * @method Tbaluno findOneByFoneTrabalho(string $fone_trabalho) Return the first Tbaluno filtered by the fone_trabalho column
 * @method Tbaluno findOneByRamalTrabalho(string $ramal_trabalho) Return the first Tbaluno filtered by the ramal_trabalho column
 * @method Tbaluno findOneByMediaGeral(string $media_geral) Return the first Tbaluno filtered by the media_geral column
 * @method Tbaluno findOneByChEletivaCursada(int $ch_eletiva_cursada) Return the first Tbaluno filtered by the ch_eletiva_cursada column
 * @method Tbaluno findOneByChEletivaSolicitada(int $ch_eletiva_solicitada) Return the first Tbaluno filtered by the ch_eletiva_solicitada column
 * @method Tbaluno findOneByChObrigCursada(int $ch_obrig_cursada) Return the first Tbaluno filtered by the ch_obrig_cursada column
 * @method Tbaluno findOneByChObrigSolicitada(int $ch_obrig_solicitada) Return the first Tbaluno filtered by the ch_obrig_solicitada column
 * @method Tbaluno findOneByChTotal(int $ch_total) Return the first Tbaluno filtered by the ch_total column
 * @method Tbaluno findOneByOpIngresso(int $op_ingresso) Return the first Tbaluno filtered by the op_ingresso column
 * @method Tbaluno findOneByIdPolo(int $id_polo) Return the first Tbaluno filtered by the id_polo column
 * @method Tbaluno findOneByCreatedAt(string $created_at) Return the first Tbaluno filtered by the created_at column
 * @method Tbaluno findOneByUpdatedAt(string $updated_at) Return the first Tbaluno filtered by the updated_at column
 * @method Tbaluno findOneByCreatedBy(string $created_by) Return the first Tbaluno filtered by the created_by column
 * @method Tbaluno findOneByUpdatedBy(string $updated_by) Return the first Tbaluno filtered by the updated_by column
 * @method Tbaluno findOneByIdAntigo(int $id_antigo) Return the first Tbaluno filtered by the id_antigo column
 * @method Tbaluno findOneByIdRaca(int $id_raca) Return the first Tbaluno filtered by the id_raca column
 *
 * @method array findByIdPessoa(int $id_pessoa) Return Tbaluno objects filtered by the id_pessoa column
 * @method array findByMatricula(string $matricula) Return Tbaluno objects filtered by the matricula column
 * @method array findByNome(string $nome) Return Tbaluno objects filtered by the nome column
 * @method array findByCelular(string $celular) Return Tbaluno objects filtered by the celular column
 * @method array findByEmail(string $email) Return Tbaluno objects filtered by the email column
 * @method array findByFoneResidencial(string $fone_residencial) Return Tbaluno objects filtered by the fone_residencial column
 * @method array findByFoto(resource $foto) Return Tbaluno objects filtered by the foto column
 * @method array findByIdNecesEspecial(string $id_neces_especial) Return Tbaluno objects filtered by the id_neces_especial column
 * @method array findByDtNascimento(string $dt_nascimento) Return Tbaluno objects filtered by the dt_nascimento column
 * @method array findByNaturalidade(int $naturalidade) Return Tbaluno objects filtered by the naturalidade column
 * @method array findByUfNascimento(string $uf_nascimento) Return Tbaluno objects filtered by the uf_nascimento column
 * @method array findByNacionalidade(int $nacionalidade) Return Tbaluno objects filtered by the nacionalidade column
 * @method array findBySexo(string $sexo) Return Tbaluno objects filtered by the sexo column
 * @method array findByEstadoCivil(string $estado_civil) Return Tbaluno objects filtered by the estado_civil column
 * @method array findByTitulo(string $titulo) Return Tbaluno objects filtered by the titulo column
 * @method array findByTituloZona(int $titulo_zona) Return Tbaluno objects filtered by the titulo_zona column
 * @method array findByTituloSecao(int $titulo_secao) Return Tbaluno objects filtered by the titulo_secao column
 * @method array findByRg(string $rg) Return Tbaluno objects filtered by the rg column
 * @method array findByRgDtExped(string $rg_dt_exped) Return Tbaluno objects filtered by the rg_dt_exped column
 * @method array findByRgOrgExped(string $rg_org_exped) Return Tbaluno objects filtered by the rg_org_exped column
 * @method array findByCpf(string $cpf) Return Tbaluno objects filtered by the cpf column
 * @method array findByReservista(string $reservista) Return Tbaluno objects filtered by the reservista column
 * @method array findByPai(string $pai) Return Tbaluno objects filtered by the pai column
 * @method array findByMae(string $mae) Return Tbaluno objects filtered by the mae column
 * @method array findByCep(string $cep) Return Tbaluno objects filtered by the cep column
 * @method array findByNumero(string $numero) Return Tbaluno objects filtered by the numero column
 * @method array findByComplemento(string $complemento) Return Tbaluno objects filtered by the complemento column
 * @method array findByIdVersaoCurso(int $id_versao_curso) Return Tbaluno objects filtered by the id_versao_curso column
 * @method array findByIdTipoIngresso(int $id_tipo_ingresso) Return Tbaluno objects filtered by the id_tipo_ingresso column
 * @method array findByDtIngresso(string $dt_ingresso) Return Tbaluno objects filtered by the dt_ingresso column
 * @method array findByIdSituacao(int $id_situacao) Return Tbaluno objects filtered by the id_situacao column
 * @method array findByDtSituacao(string $dt_situacao) Return Tbaluno objects filtered by the dt_situacao column
 * @method array findByIdDestino(int $id_destino) Return Tbaluno objects filtered by the id_destino column
 * @method array findById2grau(int $id_2grau) Return Tbaluno objects filtered by the id_2grau column
 * @method array findByAnoConcl2grau(int $ano_concl_2grau) Return Tbaluno objects filtered by the ano_concl_2grau column
 * @method array findById3grau(int $id_3grau) Return Tbaluno objects filtered by the id_3grau column
 * @method array findByAnoConcl3grau(int $ano_concl_3grau) Return Tbaluno objects filtered by the ano_concl_3grau column
 * @method array findByIdTrabalho(int $id_trabalho) Return Tbaluno objects filtered by the id_trabalho column
 * @method array findByCepTrabalho(string $cep_trabalho) Return Tbaluno objects filtered by the cep_trabalho column
 * @method array findByFoneTrabalho(string $fone_trabalho) Return Tbaluno objects filtered by the fone_trabalho column
 * @method array findByRamalTrabalho(string $ramal_trabalho) Return Tbaluno objects filtered by the ramal_trabalho column
 * @method array findByMediaGeral(string $media_geral) Return Tbaluno objects filtered by the media_geral column
 * @method array findByChEletivaCursada(int $ch_eletiva_cursada) Return Tbaluno objects filtered by the ch_eletiva_cursada column
 * @method array findByChEletivaSolicitada(int $ch_eletiva_solicitada) Return Tbaluno objects filtered by the ch_eletiva_solicitada column
 * @method array findByChObrigCursada(int $ch_obrig_cursada) Return Tbaluno objects filtered by the ch_obrig_cursada column
 * @method array findByChObrigSolicitada(int $ch_obrig_solicitada) Return Tbaluno objects filtered by the ch_obrig_solicitada column
 * @method array findByChTotal(int $ch_total) Return Tbaluno objects filtered by the ch_total column
 * @method array findByOpIngresso(int $op_ingresso) Return Tbaluno objects filtered by the op_ingresso column
 * @method array findByIdPolo(int $id_polo) Return Tbaluno objects filtered by the id_polo column
 * @method array findByCreatedAt(string $created_at) Return Tbaluno objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbaluno objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbaluno objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbaluno objects filtered by the updated_by column
 * @method array findByIdAntigo(int $id_antigo) Return Tbaluno objects filtered by the id_antigo column
 * @method array findByIdRaca(int $id_raca) Return Tbaluno objects filtered by the id_raca column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbalunoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbalunoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbaluno', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbalunoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbalunoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbalunoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbalunoQuery) {
            return $criteria;
        }
        $query = new TbalunoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbaluno|Tbaluno[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbalunoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbalunoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbaluno A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_PESSOA, MATRICULA, NOME, CELULAR, EMAIL, FONE_RESIDENCIAL, FOTO, ID_NECES_ESPECIAL, DT_NASCIMENTO, NATURALIDADE, UF_NASCIMENTO, NACIONALIDADE, SEXO, ESTADO_CIVIL, TITULO, TITULO_ZONA, TITULO_SECAO, RG, RG_DT_EXPED, RG_ORG_EXPED, CPF, RESERVISTA, PAI, MAE, CEP, NUMERO, COMPLEMENTO, ID_VERSAO_CURSO, ID_TIPO_INGRESSO, DT_INGRESSO, ID_SITUACAO, DT_SITUACAO, ID_DESTINO, ID_2GRAU, ANO_CONCL_2GRAU, ID_3GRAU, ANO_CONCL_3GRAU, ID_TRABALHO, CEP_TRABALHO, FONE_TRABALHO, RAMAL_TRABALHO, MEDIA_GERAL, CH_ELETIVA_CURSADA, CH_ELETIVA_SOLICITADA, CH_OBRIG_CURSADA, CH_OBRIG_SOLICITADA, CH_TOTAL, OP_INGRESSO, ID_POLO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY, ID_RACA FROM tbaluno WHERE MATRICULA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbaluno();
            $obj->hydrate($row);
            TbalunoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbaluno|Tbaluno[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbaluno[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbalunoPeer::MATRICULA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbalunoPeer::MATRICULA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_pessoa column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPessoa(1234); // WHERE id_pessoa = 1234
     * $query->filterByIdPessoa(array(12, 34)); // WHERE id_pessoa IN (12, 34)
     * $query->filterByIdPessoa(array('min' => 12)); // WHERE id_pessoa > 12
     * </code>
     *
     * @param     mixed $idPessoa The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdPessoa($idPessoa = null, $comparison = null)
    {
        if (is_array($idPessoa)) {
            $useMinMax = false;
            if (isset($idPessoa['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_PESSOA, $idPessoa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPessoa['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_PESSOA, $idPessoa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_PESSOA, $idPessoa, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbalunoPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the nome column
     *
     * Example usage:
     * <code>
     * $query->filterByNome('fooValue');   // WHERE nome = 'fooValue'
     * $query->filterByNome('%fooValue%'); // WHERE nome LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nome The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByNome($nome = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nome)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nome)) {
                $nome = str_replace('*', '%', $nome);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::NOME, $nome, $comparison);
    }

    /**
     * Filter the query on the celular column
     *
     * Example usage:
     * <code>
     * $query->filterByCelular('fooValue');   // WHERE celular = 'fooValue'
     * $query->filterByCelular('%fooValue%'); // WHERE celular LIKE '%fooValue%'
     * </code>
     *
     * @param     string $celular The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByCelular($celular = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($celular)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $celular)) {
                $celular = str_replace('*', '%', $celular);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CELULAR, $celular, $comparison);
    }

    /**
     * Filter the query on the email column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
     * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByEmail($email = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email)) {
                $email = str_replace('*', '%', $email);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::EMAIL, $email, $comparison);
    }

    /**
     * Filter the query on the fone_residencial column
     *
     * Example usage:
     * <code>
     * $query->filterByFoneResidencial('fooValue');   // WHERE fone_residencial = 'fooValue'
     * $query->filterByFoneResidencial('%fooValue%'); // WHERE fone_residencial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $foneResidencial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByFoneResidencial($foneResidencial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($foneResidencial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $foneResidencial)) {
                $foneResidencial = str_replace('*', '%', $foneResidencial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::FONE_RESIDENCIAL, $foneResidencial, $comparison);
    }

    /**
     * Filter the query on the foto column
     *
     * @param     mixed $foto The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByFoto($foto = null, $comparison = null)
    {

        return $this->addUsingAlias(TbalunoPeer::FOTO, $foto, $comparison);
    }

    /**
     * Filter the query on the id_neces_especial column
     *
     * Example usage:
     * <code>
     * $query->filterByIdNecesEspecial('fooValue');   // WHERE id_neces_especial = 'fooValue'
     * $query->filterByIdNecesEspecial('%fooValue%'); // WHERE id_neces_especial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $idNecesEspecial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdNecesEspecial($idNecesEspecial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($idNecesEspecial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $idNecesEspecial)) {
                $idNecesEspecial = str_replace('*', '%', $idNecesEspecial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_NECES_ESPECIAL, $idNecesEspecial, $comparison);
    }

    /**
     * Filter the query on the dt_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByDtNascimento('2011-03-14'); // WHERE dt_nascimento = '2011-03-14'
     * $query->filterByDtNascimento('now'); // WHERE dt_nascimento = '2011-03-14'
     * $query->filterByDtNascimento(array('max' => 'yesterday')); // WHERE dt_nascimento > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtNascimento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByDtNascimento($dtNascimento = null, $comparison = null)
    {
        if (is_array($dtNascimento)) {
            $useMinMax = false;
            if (isset($dtNascimento['min'])) {
                $this->addUsingAlias(TbalunoPeer::DT_NASCIMENTO, $dtNascimento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtNascimento['max'])) {
                $this->addUsingAlias(TbalunoPeer::DT_NASCIMENTO, $dtNascimento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::DT_NASCIMENTO, $dtNascimento, $comparison);
    }

    /**
     * Filter the query on the naturalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNaturalidade(1234); // WHERE naturalidade = 1234
     * $query->filterByNaturalidade(array(12, 34)); // WHERE naturalidade IN (12, 34)
     * $query->filterByNaturalidade(array('min' => 12)); // WHERE naturalidade > 12
     * </code>
     *
     * @see       filterByTbcidade()
     *
     * @param     mixed $naturalidade The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByNaturalidade($naturalidade = null, $comparison = null)
    {
        if (is_array($naturalidade)) {
            $useMinMax = false;
            if (isset($naturalidade['min'])) {
                $this->addUsingAlias(TbalunoPeer::NATURALIDADE, $naturalidade['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($naturalidade['max'])) {
                $this->addUsingAlias(TbalunoPeer::NATURALIDADE, $naturalidade['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::NATURALIDADE, $naturalidade, $comparison);
    }

    /**
     * Filter the query on the uf_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByUfNascimento('fooValue');   // WHERE uf_nascimento = 'fooValue'
     * $query->filterByUfNascimento('%fooValue%'); // WHERE uf_nascimento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ufNascimento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByUfNascimento($ufNascimento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ufNascimento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ufNascimento)) {
                $ufNascimento = str_replace('*', '%', $ufNascimento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::UF_NASCIMENTO, $ufNascimento, $comparison);
    }

    /**
     * Filter the query on the nacionalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNacionalidade(1234); // WHERE nacionalidade = 1234
     * $query->filterByNacionalidade(array(12, 34)); // WHERE nacionalidade IN (12, 34)
     * $query->filterByNacionalidade(array('min' => 12)); // WHERE nacionalidade > 12
     * </code>
     *
     * @see       filterByTbpais()
     *
     * @param     mixed $nacionalidade The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByNacionalidade($nacionalidade = null, $comparison = null)
    {
        if (is_array($nacionalidade)) {
            $useMinMax = false;
            if (isset($nacionalidade['min'])) {
                $this->addUsingAlias(TbalunoPeer::NACIONALIDADE, $nacionalidade['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($nacionalidade['max'])) {
                $this->addUsingAlias(TbalunoPeer::NACIONALIDADE, $nacionalidade['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::NACIONALIDADE, $nacionalidade, $comparison);
    }

    /**
     * Filter the query on the sexo column
     *
     * Example usage:
     * <code>
     * $query->filterBySexo('fooValue');   // WHERE sexo = 'fooValue'
     * $query->filterBySexo('%fooValue%'); // WHERE sexo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sexo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterBySexo($sexo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sexo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sexo)) {
                $sexo = str_replace('*', '%', $sexo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::SEXO, $sexo, $comparison);
    }

    /**
     * Filter the query on the estado_civil column
     *
     * Example usage:
     * <code>
     * $query->filterByEstadoCivil('fooValue');   // WHERE estado_civil = 'fooValue'
     * $query->filterByEstadoCivil('%fooValue%'); // WHERE estado_civil LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estadoCivil The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByEstadoCivil($estadoCivil = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estadoCivil)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estadoCivil)) {
                $estadoCivil = str_replace('*', '%', $estadoCivil);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ESTADO_CIVIL, $estadoCivil, $comparison);
    }

    /**
     * Filter the query on the titulo column
     *
     * Example usage:
     * <code>
     * $query->filterByTitulo('fooValue');   // WHERE titulo = 'fooValue'
     * $query->filterByTitulo('%fooValue%'); // WHERE titulo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $titulo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByTitulo($titulo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($titulo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $titulo)) {
                $titulo = str_replace('*', '%', $titulo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::TITULO, $titulo, $comparison);
    }

    /**
     * Filter the query on the titulo_zona column
     *
     * Example usage:
     * <code>
     * $query->filterByTituloZona(1234); // WHERE titulo_zona = 1234
     * $query->filterByTituloZona(array(12, 34)); // WHERE titulo_zona IN (12, 34)
     * $query->filterByTituloZona(array('min' => 12)); // WHERE titulo_zona > 12
     * </code>
     *
     * @param     mixed $tituloZona The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByTituloZona($tituloZona = null, $comparison = null)
    {
        if (is_array($tituloZona)) {
            $useMinMax = false;
            if (isset($tituloZona['min'])) {
                $this->addUsingAlias(TbalunoPeer::TITULO_ZONA, $tituloZona['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tituloZona['max'])) {
                $this->addUsingAlias(TbalunoPeer::TITULO_ZONA, $tituloZona['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::TITULO_ZONA, $tituloZona, $comparison);
    }

    /**
     * Filter the query on the titulo_secao column
     *
     * Example usage:
     * <code>
     * $query->filterByTituloSecao(1234); // WHERE titulo_secao = 1234
     * $query->filterByTituloSecao(array(12, 34)); // WHERE titulo_secao IN (12, 34)
     * $query->filterByTituloSecao(array('min' => 12)); // WHERE titulo_secao > 12
     * </code>
     *
     * @param     mixed $tituloSecao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByTituloSecao($tituloSecao = null, $comparison = null)
    {
        if (is_array($tituloSecao)) {
            $useMinMax = false;
            if (isset($tituloSecao['min'])) {
                $this->addUsingAlias(TbalunoPeer::TITULO_SECAO, $tituloSecao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tituloSecao['max'])) {
                $this->addUsingAlias(TbalunoPeer::TITULO_SECAO, $tituloSecao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::TITULO_SECAO, $tituloSecao, $comparison);
    }

    /**
     * Filter the query on the rg column
     *
     * Example usage:
     * <code>
     * $query->filterByRg('fooValue');   // WHERE rg = 'fooValue'
     * $query->filterByRg('%fooValue%'); // WHERE rg LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rg The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByRg($rg = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rg)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rg)) {
                $rg = str_replace('*', '%', $rg);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::RG, $rg, $comparison);
    }

    /**
     * Filter the query on the rg_dt_exped column
     *
     * Example usage:
     * <code>
     * $query->filterByRgDtExped('2011-03-14'); // WHERE rg_dt_exped = '2011-03-14'
     * $query->filterByRgDtExped('now'); // WHERE rg_dt_exped = '2011-03-14'
     * $query->filterByRgDtExped(array('max' => 'yesterday')); // WHERE rg_dt_exped > '2011-03-13'
     * </code>
     *
     * @param     mixed $rgDtExped The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByRgDtExped($rgDtExped = null, $comparison = null)
    {
        if (is_array($rgDtExped)) {
            $useMinMax = false;
            if (isset($rgDtExped['min'])) {
                $this->addUsingAlias(TbalunoPeer::RG_DT_EXPED, $rgDtExped['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($rgDtExped['max'])) {
                $this->addUsingAlias(TbalunoPeer::RG_DT_EXPED, $rgDtExped['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::RG_DT_EXPED, $rgDtExped, $comparison);
    }

    /**
     * Filter the query on the rg_org_exped column
     *
     * Example usage:
     * <code>
     * $query->filterByRgOrgExped('fooValue');   // WHERE rg_org_exped = 'fooValue'
     * $query->filterByRgOrgExped('%fooValue%'); // WHERE rg_org_exped LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rgOrgExped The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByRgOrgExped($rgOrgExped = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rgOrgExped)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rgOrgExped)) {
                $rgOrgExped = str_replace('*', '%', $rgOrgExped);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::RG_ORG_EXPED, $rgOrgExped, $comparison);
    }

    /**
     * Filter the query on the cpf column
     *
     * Example usage:
     * <code>
     * $query->filterByCpf('fooValue');   // WHERE cpf = 'fooValue'
     * $query->filterByCpf('%fooValue%'); // WHERE cpf LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cpf The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByCpf($cpf = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cpf)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cpf)) {
                $cpf = str_replace('*', '%', $cpf);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CPF, $cpf, $comparison);
    }

    /**
     * Filter the query on the reservista column
     *
     * Example usage:
     * <code>
     * $query->filterByReservista('fooValue');   // WHERE reservista = 'fooValue'
     * $query->filterByReservista('%fooValue%'); // WHERE reservista LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reservista The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByReservista($reservista = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reservista)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reservista)) {
                $reservista = str_replace('*', '%', $reservista);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::RESERVISTA, $reservista, $comparison);
    }

    /**
     * Filter the query on the pai column
     *
     * Example usage:
     * <code>
     * $query->filterByPai('fooValue');   // WHERE pai = 'fooValue'
     * $query->filterByPai('%fooValue%'); // WHERE pai LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pai The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByPai($pai = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pai)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pai)) {
                $pai = str_replace('*', '%', $pai);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::PAI, $pai, $comparison);
    }

    /**
     * Filter the query on the mae column
     *
     * Example usage:
     * <code>
     * $query->filterByMae('fooValue');   // WHERE mae = 'fooValue'
     * $query->filterByMae('%fooValue%'); // WHERE mae LIKE '%fooValue%'
     * </code>
     *
     * @param     string $mae The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByMae($mae = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($mae)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $mae)) {
                $mae = str_replace('*', '%', $mae);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::MAE, $mae, $comparison);
    }

    /**
     * Filter the query on the cep column
     *
     * Example usage:
     * <code>
     * $query->filterByCep('fooValue');   // WHERE cep = 'fooValue'
     * $query->filterByCep('%fooValue%'); // WHERE cep LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cep The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByCep($cep = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cep)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cep)) {
                $cep = str_replace('*', '%', $cep);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CEP, $cep, $comparison);
    }

    /**
     * Filter the query on the numero column
     *
     * Example usage:
     * <code>
     * $query->filterByNumero('fooValue');   // WHERE numero = 'fooValue'
     * $query->filterByNumero('%fooValue%'); // WHERE numero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $numero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByNumero($numero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($numero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $numero)) {
                $numero = str_replace('*', '%', $numero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::NUMERO, $numero, $comparison);
    }

    /**
     * Filter the query on the complemento column
     *
     * Example usage:
     * <code>
     * $query->filterByComplemento('fooValue');   // WHERE complemento = 'fooValue'
     * $query->filterByComplemento('%fooValue%'); // WHERE complemento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $complemento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByComplemento($complemento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($complemento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $complemento)) {
                $complemento = str_replace('*', '%', $complemento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::COMPLEMENTO, $complemento, $comparison);
    }

    /**
     * Filter the query on the id_versao_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByIdVersaoCurso(1234); // WHERE id_versao_curso = 1234
     * $query->filterByIdVersaoCurso(array(12, 34)); // WHERE id_versao_curso IN (12, 34)
     * $query->filterByIdVersaoCurso(array('min' => 12)); // WHERE id_versao_curso > 12
     * </code>
     *
     * @see       filterByTbcursoversao()
     *
     * @param     mixed $idVersaoCurso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdVersaoCurso($idVersaoCurso = null, $comparison = null)
    {
        if (is_array($idVersaoCurso)) {
            $useMinMax = false;
            if (isset($idVersaoCurso['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_VERSAO_CURSO, $idVersaoCurso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idVersaoCurso['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_VERSAO_CURSO, $idVersaoCurso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_VERSAO_CURSO, $idVersaoCurso, $comparison);
    }

    /**
     * Filter the query on the id_tipo_ingresso column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTipoIngresso(1234); // WHERE id_tipo_ingresso = 1234
     * $query->filterByIdTipoIngresso(array(12, 34)); // WHERE id_tipo_ingresso IN (12, 34)
     * $query->filterByIdTipoIngresso(array('min' => 12)); // WHERE id_tipo_ingresso > 12
     * </code>
     *
     * @see       filterByTbtipoingresso()
     *
     * @param     mixed $idTipoIngresso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdTipoIngresso($idTipoIngresso = null, $comparison = null)
    {
        if (is_array($idTipoIngresso)) {
            $useMinMax = false;
            if (isset($idTipoIngresso['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_TIPO_INGRESSO, $idTipoIngresso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTipoIngresso['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_TIPO_INGRESSO, $idTipoIngresso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_TIPO_INGRESSO, $idTipoIngresso, $comparison);
    }

    /**
     * Filter the query on the dt_ingresso column
     *
     * Example usage:
     * <code>
     * $query->filterByDtIngresso('2011-03-14'); // WHERE dt_ingresso = '2011-03-14'
     * $query->filterByDtIngresso('now'); // WHERE dt_ingresso = '2011-03-14'
     * $query->filterByDtIngresso(array('max' => 'yesterday')); // WHERE dt_ingresso > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtIngresso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByDtIngresso($dtIngresso = null, $comparison = null)
    {
        if (is_array($dtIngresso)) {
            $useMinMax = false;
            if (isset($dtIngresso['min'])) {
                $this->addUsingAlias(TbalunoPeer::DT_INGRESSO, $dtIngresso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtIngresso['max'])) {
                $this->addUsingAlias(TbalunoPeer::DT_INGRESSO, $dtIngresso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::DT_INGRESSO, $dtIngresso, $comparison);
    }

    /**
     * Filter the query on the id_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSituacao(1234); // WHERE id_situacao = 1234
     * $query->filterByIdSituacao(array(12, 34)); // WHERE id_situacao IN (12, 34)
     * $query->filterByIdSituacao(array('min' => 12)); // WHERE id_situacao > 12
     * </code>
     *
     * @see       filterByTbalunosituacao()
     *
     * @param     mixed $idSituacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdSituacao($idSituacao = null, $comparison = null)
    {
        if (is_array($idSituacao)) {
            $useMinMax = false;
            if (isset($idSituacao['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_SITUACAO, $idSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSituacao['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_SITUACAO, $idSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_SITUACAO, $idSituacao, $comparison);
    }

    /**
     * Filter the query on the dt_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByDtSituacao('2011-03-14'); // WHERE dt_situacao = '2011-03-14'
     * $query->filterByDtSituacao('now'); // WHERE dt_situacao = '2011-03-14'
     * $query->filterByDtSituacao(array('max' => 'yesterday')); // WHERE dt_situacao > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtSituacao The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByDtSituacao($dtSituacao = null, $comparison = null)
    {
        if (is_array($dtSituacao)) {
            $useMinMax = false;
            if (isset($dtSituacao['min'])) {
                $this->addUsingAlias(TbalunoPeer::DT_SITUACAO, $dtSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtSituacao['max'])) {
                $this->addUsingAlias(TbalunoPeer::DT_SITUACAO, $dtSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::DT_SITUACAO, $dtSituacao, $comparison);
    }

    /**
     * Filter the query on the id_destino column
     *
     * Example usage:
     * <code>
     * $query->filterByIdDestino(1234); // WHERE id_destino = 1234
     * $query->filterByIdDestino(array(12, 34)); // WHERE id_destino IN (12, 34)
     * $query->filterByIdDestino(array('min' => 12)); // WHERE id_destino > 12
     * </code>
     *
     * @see       filterByTbinstexternaRelatedByIdDestino()
     *
     * @param     mixed $idDestino The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdDestino($idDestino = null, $comparison = null)
    {
        if (is_array($idDestino)) {
            $useMinMax = false;
            if (isset($idDestino['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_DESTINO, $idDestino['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idDestino['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_DESTINO, $idDestino['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_DESTINO, $idDestino, $comparison);
    }

    /**
     * Filter the query on the id_2grau column
     *
     * Example usage:
     * <code>
     * $query->filterById2grau(1234); // WHERE id_2grau = 1234
     * $query->filterById2grau(array(12, 34)); // WHERE id_2grau IN (12, 34)
     * $query->filterById2grau(array('min' => 12)); // WHERE id_2grau > 12
     * </code>
     *
     * @see       filterByTbinstexternaRelatedById2grau()
     *
     * @param     mixed $id2grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterById2grau($id2grau = null, $comparison = null)
    {
        if (is_array($id2grau)) {
            $useMinMax = false;
            if (isset($id2grau['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_2GRAU, $id2grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id2grau['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_2GRAU, $id2grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_2GRAU, $id2grau, $comparison);
    }

    /**
     * Filter the query on the ano_concl_2grau column
     *
     * Example usage:
     * <code>
     * $query->filterByAnoConcl2grau(1234); // WHERE ano_concl_2grau = 1234
     * $query->filterByAnoConcl2grau(array(12, 34)); // WHERE ano_concl_2grau IN (12, 34)
     * $query->filterByAnoConcl2grau(array('min' => 12)); // WHERE ano_concl_2grau > 12
     * </code>
     *
     * @param     mixed $anoConcl2grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByAnoConcl2grau($anoConcl2grau = null, $comparison = null)
    {
        if (is_array($anoConcl2grau)) {
            $useMinMax = false;
            if (isset($anoConcl2grau['min'])) {
                $this->addUsingAlias(TbalunoPeer::ANO_CONCL_2GRAU, $anoConcl2grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anoConcl2grau['max'])) {
                $this->addUsingAlias(TbalunoPeer::ANO_CONCL_2GRAU, $anoConcl2grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ANO_CONCL_2GRAU, $anoConcl2grau, $comparison);
    }

    /**
     * Filter the query on the id_3grau column
     *
     * Example usage:
     * <code>
     * $query->filterById3grau(1234); // WHERE id_3grau = 1234
     * $query->filterById3grau(array(12, 34)); // WHERE id_3grau IN (12, 34)
     * $query->filterById3grau(array('min' => 12)); // WHERE id_3grau > 12
     * </code>
     *
     * @see       filterByTbinstexternaRelatedById3grau()
     *
     * @param     mixed $id3grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterById3grau($id3grau = null, $comparison = null)
    {
        if (is_array($id3grau)) {
            $useMinMax = false;
            if (isset($id3grau['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_3GRAU, $id3grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id3grau['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_3GRAU, $id3grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_3GRAU, $id3grau, $comparison);
    }

    /**
     * Filter the query on the ano_concl_3grau column
     *
     * Example usage:
     * <code>
     * $query->filterByAnoConcl3grau(1234); // WHERE ano_concl_3grau = 1234
     * $query->filterByAnoConcl3grau(array(12, 34)); // WHERE ano_concl_3grau IN (12, 34)
     * $query->filterByAnoConcl3grau(array('min' => 12)); // WHERE ano_concl_3grau > 12
     * </code>
     *
     * @param     mixed $anoConcl3grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByAnoConcl3grau($anoConcl3grau = null, $comparison = null)
    {
        if (is_array($anoConcl3grau)) {
            $useMinMax = false;
            if (isset($anoConcl3grau['min'])) {
                $this->addUsingAlias(TbalunoPeer::ANO_CONCL_3GRAU, $anoConcl3grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anoConcl3grau['max'])) {
                $this->addUsingAlias(TbalunoPeer::ANO_CONCL_3GRAU, $anoConcl3grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ANO_CONCL_3GRAU, $anoConcl3grau, $comparison);
    }

    /**
     * Filter the query on the id_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTrabalho(1234); // WHERE id_trabalho = 1234
     * $query->filterByIdTrabalho(array(12, 34)); // WHERE id_trabalho IN (12, 34)
     * $query->filterByIdTrabalho(array('min' => 12)); // WHERE id_trabalho > 12
     * </code>
     *
     * @see       filterByTbinstexternaRelatedByIdTrabalho()
     *
     * @param     mixed $idTrabalho The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdTrabalho($idTrabalho = null, $comparison = null)
    {
        if (is_array($idTrabalho)) {
            $useMinMax = false;
            if (isset($idTrabalho['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_TRABALHO, $idTrabalho['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTrabalho['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_TRABALHO, $idTrabalho['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_TRABALHO, $idTrabalho, $comparison);
    }

    /**
     * Filter the query on the cep_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByCepTrabalho('fooValue');   // WHERE cep_trabalho = 'fooValue'
     * $query->filterByCepTrabalho('%fooValue%'); // WHERE cep_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cepTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByCepTrabalho($cepTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cepTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cepTrabalho)) {
                $cepTrabalho = str_replace('*', '%', $cepTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CEP_TRABALHO, $cepTrabalho, $comparison);
    }

    /**
     * Filter the query on the fone_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByFoneTrabalho('fooValue');   // WHERE fone_trabalho = 'fooValue'
     * $query->filterByFoneTrabalho('%fooValue%'); // WHERE fone_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $foneTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByFoneTrabalho($foneTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($foneTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $foneTrabalho)) {
                $foneTrabalho = str_replace('*', '%', $foneTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::FONE_TRABALHO, $foneTrabalho, $comparison);
    }

    /**
     * Filter the query on the ramal_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByRamalTrabalho('fooValue');   // WHERE ramal_trabalho = 'fooValue'
     * $query->filterByRamalTrabalho('%fooValue%'); // WHERE ramal_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ramalTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByRamalTrabalho($ramalTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ramalTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ramalTrabalho)) {
                $ramalTrabalho = str_replace('*', '%', $ramalTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::RAMAL_TRABALHO, $ramalTrabalho, $comparison);
    }

    /**
     * Filter the query on the media_geral column
     *
     * Example usage:
     * <code>
     * $query->filterByMediaGeral(1234); // WHERE media_geral = 1234
     * $query->filterByMediaGeral(array(12, 34)); // WHERE media_geral IN (12, 34)
     * $query->filterByMediaGeral(array('min' => 12)); // WHERE media_geral > 12
     * </code>
     *
     * @param     mixed $mediaGeral The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByMediaGeral($mediaGeral = null, $comparison = null)
    {
        if (is_array($mediaGeral)) {
            $useMinMax = false;
            if (isset($mediaGeral['min'])) {
                $this->addUsingAlias(TbalunoPeer::MEDIA_GERAL, $mediaGeral['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mediaGeral['max'])) {
                $this->addUsingAlias(TbalunoPeer::MEDIA_GERAL, $mediaGeral['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::MEDIA_GERAL, $mediaGeral, $comparison);
    }

    /**
     * Filter the query on the ch_eletiva_cursada column
     *
     * Example usage:
     * <code>
     * $query->filterByChEletivaCursada(1234); // WHERE ch_eletiva_cursada = 1234
     * $query->filterByChEletivaCursada(array(12, 34)); // WHERE ch_eletiva_cursada IN (12, 34)
     * $query->filterByChEletivaCursada(array('min' => 12)); // WHERE ch_eletiva_cursada > 12
     * </code>
     *
     * @param     mixed $chEletivaCursada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByChEletivaCursada($chEletivaCursada = null, $comparison = null)
    {
        if (is_array($chEletivaCursada)) {
            $useMinMax = false;
            if (isset($chEletivaCursada['min'])) {
                $this->addUsingAlias(TbalunoPeer::CH_ELETIVA_CURSADA, $chEletivaCursada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chEletivaCursada['max'])) {
                $this->addUsingAlias(TbalunoPeer::CH_ELETIVA_CURSADA, $chEletivaCursada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CH_ELETIVA_CURSADA, $chEletivaCursada, $comparison);
    }

    /**
     * Filter the query on the ch_eletiva_solicitada column
     *
     * Example usage:
     * <code>
     * $query->filterByChEletivaSolicitada(1234); // WHERE ch_eletiva_solicitada = 1234
     * $query->filterByChEletivaSolicitada(array(12, 34)); // WHERE ch_eletiva_solicitada IN (12, 34)
     * $query->filterByChEletivaSolicitada(array('min' => 12)); // WHERE ch_eletiva_solicitada > 12
     * </code>
     *
     * @param     mixed $chEletivaSolicitada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByChEletivaSolicitada($chEletivaSolicitada = null, $comparison = null)
    {
        if (is_array($chEletivaSolicitada)) {
            $useMinMax = false;
            if (isset($chEletivaSolicitada['min'])) {
                $this->addUsingAlias(TbalunoPeer::CH_ELETIVA_SOLICITADA, $chEletivaSolicitada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chEletivaSolicitada['max'])) {
                $this->addUsingAlias(TbalunoPeer::CH_ELETIVA_SOLICITADA, $chEletivaSolicitada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CH_ELETIVA_SOLICITADA, $chEletivaSolicitada, $comparison);
    }

    /**
     * Filter the query on the ch_obrig_cursada column
     *
     * Example usage:
     * <code>
     * $query->filterByChObrigCursada(1234); // WHERE ch_obrig_cursada = 1234
     * $query->filterByChObrigCursada(array(12, 34)); // WHERE ch_obrig_cursada IN (12, 34)
     * $query->filterByChObrigCursada(array('min' => 12)); // WHERE ch_obrig_cursada > 12
     * </code>
     *
     * @param     mixed $chObrigCursada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByChObrigCursada($chObrigCursada = null, $comparison = null)
    {
        if (is_array($chObrigCursada)) {
            $useMinMax = false;
            if (isset($chObrigCursada['min'])) {
                $this->addUsingAlias(TbalunoPeer::CH_OBRIG_CURSADA, $chObrigCursada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chObrigCursada['max'])) {
                $this->addUsingAlias(TbalunoPeer::CH_OBRIG_CURSADA, $chObrigCursada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CH_OBRIG_CURSADA, $chObrigCursada, $comparison);
    }

    /**
     * Filter the query on the ch_obrig_solicitada column
     *
     * Example usage:
     * <code>
     * $query->filterByChObrigSolicitada(1234); // WHERE ch_obrig_solicitada = 1234
     * $query->filterByChObrigSolicitada(array(12, 34)); // WHERE ch_obrig_solicitada IN (12, 34)
     * $query->filterByChObrigSolicitada(array('min' => 12)); // WHERE ch_obrig_solicitada > 12
     * </code>
     *
     * @param     mixed $chObrigSolicitada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByChObrigSolicitada($chObrigSolicitada = null, $comparison = null)
    {
        if (is_array($chObrigSolicitada)) {
            $useMinMax = false;
            if (isset($chObrigSolicitada['min'])) {
                $this->addUsingAlias(TbalunoPeer::CH_OBRIG_SOLICITADA, $chObrigSolicitada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chObrigSolicitada['max'])) {
                $this->addUsingAlias(TbalunoPeer::CH_OBRIG_SOLICITADA, $chObrigSolicitada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CH_OBRIG_SOLICITADA, $chObrigSolicitada, $comparison);
    }

    /**
     * Filter the query on the ch_total column
     *
     * Example usage:
     * <code>
     * $query->filterByChTotal(1234); // WHERE ch_total = 1234
     * $query->filterByChTotal(array(12, 34)); // WHERE ch_total IN (12, 34)
     * $query->filterByChTotal(array('min' => 12)); // WHERE ch_total > 12
     * </code>
     *
     * @param     mixed $chTotal The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByChTotal($chTotal = null, $comparison = null)
    {
        if (is_array($chTotal)) {
            $useMinMax = false;
            if (isset($chTotal['min'])) {
                $this->addUsingAlias(TbalunoPeer::CH_TOTAL, $chTotal['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chTotal['max'])) {
                $this->addUsingAlias(TbalunoPeer::CH_TOTAL, $chTotal['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CH_TOTAL, $chTotal, $comparison);
    }

    /**
     * Filter the query on the op_ingresso column
     *
     * Example usage:
     * <code>
     * $query->filterByOpIngresso(1234); // WHERE op_ingresso = 1234
     * $query->filterByOpIngresso(array(12, 34)); // WHERE op_ingresso IN (12, 34)
     * $query->filterByOpIngresso(array('min' => 12)); // WHERE op_ingresso > 12
     * </code>
     *
     * @param     mixed $opIngresso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByOpIngresso($opIngresso = null, $comparison = null)
    {
        if (is_array($opIngresso)) {
            $useMinMax = false;
            if (isset($opIngresso['min'])) {
                $this->addUsingAlias(TbalunoPeer::OP_INGRESSO, $opIngresso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($opIngresso['max'])) {
                $this->addUsingAlias(TbalunoPeer::OP_INGRESSO, $opIngresso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::OP_INGRESSO, $opIngresso, $comparison);
    }

    /**
     * Filter the query on the id_polo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPolo(1234); // WHERE id_polo = 1234
     * $query->filterByIdPolo(array(12, 34)); // WHERE id_polo IN (12, 34)
     * $query->filterByIdPolo(array('min' => 12)); // WHERE id_polo > 12
     * </code>
     *
     * @see       filterByTbpolos()
     *
     * @param     mixed $idPolo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdPolo($idPolo = null, $comparison = null)
    {
        if (is_array($idPolo)) {
            $useMinMax = false;
            if (isset($idPolo['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_POLO, $idPolo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPolo['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_POLO, $idPolo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_POLO, $idPolo, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbalunoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbalunoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbalunoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbalunoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query on the id_antigo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdAntigo(1234); // WHERE id_antigo = 1234
     * $query->filterByIdAntigo(array(12, 34)); // WHERE id_antigo IN (12, 34)
     * $query->filterByIdAntigo(array('min' => 12)); // WHERE id_antigo > 12
     * </code>
     *
     * @param     mixed $idAntigo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdAntigo($idAntigo = null, $comparison = null)
    {
        if (is_array($idAntigo)) {
            $useMinMax = false;
            if (isset($idAntigo['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_ANTIGO, $idAntigo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idAntigo['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_ANTIGO, $idAntigo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_ANTIGO, $idAntigo, $comparison);
    }

    /**
     * Filter the query on the id_raca column
     *
     * Example usage:
     * <code>
     * $query->filterByIdRaca(1234); // WHERE id_raca = 1234
     * $query->filterByIdRaca(array(12, 34)); // WHERE id_raca IN (12, 34)
     * $query->filterByIdRaca(array('min' => 12)); // WHERE id_raca > 12
     * </code>
     *
     * @see       filterByTbalunoracacor()
     *
     * @param     mixed $idRaca The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function filterByIdRaca($idRaca = null, $comparison = null)
    {
        if (is_array($idRaca)) {
            $useMinMax = false;
            if (isset($idRaca['min'])) {
                $this->addUsingAlias(TbalunoPeer::ID_RACA, $idRaca['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idRaca['max'])) {
                $this->addUsingAlias(TbalunoPeer::ID_RACA, $idRaca['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoPeer::ID_RACA, $idRaca, $comparison);
    }

    /**
     * Filter the query by a related Tbnecesespecial object
     *
     * @param   Tbnecesespecial|PropelObjectCollection $tbnecesespecial The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbnecesespecial($tbnecesespecial, $comparison = null)
    {
        if ($tbnecesespecial instanceof Tbnecesespecial) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_NECES_ESPECIAL, $tbnecesespecial->getIdNecesEspecial(), $comparison);
        } elseif ($tbnecesespecial instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_NECES_ESPECIAL, $tbnecesespecial->toKeyValue('PrimaryKey', 'IdNecesEspecial'), $comparison);
        } else {
            throw new PropelException('filterByTbnecesespecial() only accepts arguments of type Tbnecesespecial or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbnecesespecial relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbnecesespecial($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbnecesespecial');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbnecesespecial');
        }

        return $this;
    }

    /**
     * Use the Tbnecesespecial relation Tbnecesespecial object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbnecesespecialQuery A secondary query class using the current class as primary query
     */
    public function useTbnecesespecialQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbnecesespecial($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbnecesespecial', 'TbnecesespecialQuery');
    }

    /**
     * Filter the query by a related Tbcidade object
     *
     * @param   Tbcidade|PropelObjectCollection $tbcidade The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcidade($tbcidade, $comparison = null)
    {
        if ($tbcidade instanceof Tbcidade) {
            return $this
                ->addUsingAlias(TbalunoPeer::NATURALIDADE, $tbcidade->getIdCidade(), $comparison);
        } elseif ($tbcidade instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::NATURALIDADE, $tbcidade->toKeyValue('PrimaryKey', 'IdCidade'), $comparison);
        } else {
            throw new PropelException('filterByTbcidade() only accepts arguments of type Tbcidade or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcidade relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbcidade($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcidade');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcidade');
        }

        return $this;
    }

    /**
     * Use the Tbcidade relation Tbcidade object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcidadeQuery A secondary query class using the current class as primary query
     */
    public function useTbcidadeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcidade($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcidade', 'TbcidadeQuery');
    }

    /**
     * Filter the query by a related Tbpais object
     *
     * @param   Tbpais|PropelObjectCollection $tbpais The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbpais($tbpais, $comparison = null)
    {
        if ($tbpais instanceof Tbpais) {
            return $this
                ->addUsingAlias(TbalunoPeer::NACIONALIDADE, $tbpais->getIdPais(), $comparison);
        } elseif ($tbpais instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::NACIONALIDADE, $tbpais->toKeyValue('PrimaryKey', 'IdPais'), $comparison);
        } else {
            throw new PropelException('filterByTbpais() only accepts arguments of type Tbpais or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbpais relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbpais($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbpais');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbpais');
        }

        return $this;
    }

    /**
     * Use the Tbpais relation Tbpais object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbpaisQuery A secondary query class using the current class as primary query
     */
    public function useTbpaisQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbpais($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbpais', 'TbpaisQuery');
    }

    /**
     * Filter the query by a related Tblogradouro object
     *
     * @param   Tblogradouro|PropelObjectCollection $tblogradouro The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTblogradouroRelatedByCep($tblogradouro, $comparison = null)
    {
        if ($tblogradouro instanceof Tblogradouro) {
            return $this
                ->addUsingAlias(TbalunoPeer::CEP, $tblogradouro->getCep(), $comparison);
        } elseif ($tblogradouro instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::CEP, $tblogradouro->toKeyValue('PrimaryKey', 'Cep'), $comparison);
        } else {
            throw new PropelException('filterByTblogradouroRelatedByCep() only accepts arguments of type Tblogradouro or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TblogradouroRelatedByCep relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTblogradouroRelatedByCep($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TblogradouroRelatedByCep');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TblogradouroRelatedByCep');
        }

        return $this;
    }

    /**
     * Use the TblogradouroRelatedByCep relation Tblogradouro object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TblogradouroQuery A secondary query class using the current class as primary query
     */
    public function useTblogradouroRelatedByCepQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTblogradouroRelatedByCep($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TblogradouroRelatedByCep', 'TblogradouroQuery');
    }

    /**
     * Filter the query by a related Tbcursoversao object
     *
     * @param   Tbcursoversao|PropelObjectCollection $tbcursoversao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcursoversao($tbcursoversao, $comparison = null)
    {
        if ($tbcursoversao instanceof Tbcursoversao) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_VERSAO_CURSO, $tbcursoversao->getIdVersaoCurso(), $comparison);
        } elseif ($tbcursoversao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_VERSAO_CURSO, $tbcursoversao->toKeyValue('PrimaryKey', 'IdVersaoCurso'), $comparison);
        } else {
            throw new PropelException('filterByTbcursoversao() only accepts arguments of type Tbcursoversao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcursoversao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbcursoversao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcursoversao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcursoversao');
        }

        return $this;
    }

    /**
     * Use the Tbcursoversao relation Tbcursoversao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursoversaoQuery A secondary query class using the current class as primary query
     */
    public function useTbcursoversaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcursoversao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcursoversao', 'TbcursoversaoQuery');
    }

    /**
     * Filter the query by a related Tbtipoingresso object
     *
     * @param   Tbtipoingresso|PropelObjectCollection $tbtipoingresso The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbtipoingresso($tbtipoingresso, $comparison = null)
    {
        if ($tbtipoingresso instanceof Tbtipoingresso) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_TIPO_INGRESSO, $tbtipoingresso->getIdTipoIngresso(), $comparison);
        } elseif ($tbtipoingresso instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_TIPO_INGRESSO, $tbtipoingresso->toKeyValue('PrimaryKey', 'IdTipoIngresso'), $comparison);
        } else {
            throw new PropelException('filterByTbtipoingresso() only accepts arguments of type Tbtipoingresso or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbtipoingresso relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbtipoingresso($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbtipoingresso');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbtipoingresso');
        }

        return $this;
    }

    /**
     * Use the Tbtipoingresso relation Tbtipoingresso object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbtipoingressoQuery A secondary query class using the current class as primary query
     */
    public function useTbtipoingressoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbtipoingresso($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbtipoingresso', 'TbtipoingressoQuery');
    }

    /**
     * Filter the query by a related Tbalunosituacao object
     *
     * @param   Tbalunosituacao|PropelObjectCollection $tbalunosituacao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunosituacao($tbalunosituacao, $comparison = null)
    {
        if ($tbalunosituacao instanceof Tbalunosituacao) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_SITUACAO, $tbalunosituacao->getIdSituacao(), $comparison);
        } elseif ($tbalunosituacao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_SITUACAO, $tbalunosituacao->toKeyValue('PrimaryKey', 'IdSituacao'), $comparison);
        } else {
            throw new PropelException('filterByTbalunosituacao() only accepts arguments of type Tbalunosituacao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunosituacao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbalunosituacao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunosituacao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunosituacao');
        }

        return $this;
    }

    /**
     * Use the Tbalunosituacao relation Tbalunosituacao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunosituacaoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunosituacaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunosituacao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunosituacao', 'TbalunosituacaoQuery');
    }

    /**
     * Filter the query by a related Tbinstexterna object
     *
     * @param   Tbinstexterna|PropelObjectCollection $tbinstexterna The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbinstexternaRelatedByIdDestino($tbinstexterna, $comparison = null)
    {
        if ($tbinstexterna instanceof Tbinstexterna) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_DESTINO, $tbinstexterna->getIdInstExterna(), $comparison);
        } elseif ($tbinstexterna instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_DESTINO, $tbinstexterna->toKeyValue('PrimaryKey', 'IdInstExterna'), $comparison);
        } else {
            throw new PropelException('filterByTbinstexternaRelatedByIdDestino() only accepts arguments of type Tbinstexterna or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbinstexternaRelatedByIdDestino relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbinstexternaRelatedByIdDestino($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbinstexternaRelatedByIdDestino');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbinstexternaRelatedByIdDestino');
        }

        return $this;
    }

    /**
     * Use the TbinstexternaRelatedByIdDestino relation Tbinstexterna object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbinstexternaQuery A secondary query class using the current class as primary query
     */
    public function useTbinstexternaRelatedByIdDestinoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbinstexternaRelatedByIdDestino($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbinstexternaRelatedByIdDestino', 'TbinstexternaQuery');
    }

    /**
     * Filter the query by a related Tbinstexterna object
     *
     * @param   Tbinstexterna|PropelObjectCollection $tbinstexterna The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbinstexternaRelatedById2grau($tbinstexterna, $comparison = null)
    {
        if ($tbinstexterna instanceof Tbinstexterna) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_2GRAU, $tbinstexterna->getIdInstExterna(), $comparison);
        } elseif ($tbinstexterna instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_2GRAU, $tbinstexterna->toKeyValue('PrimaryKey', 'IdInstExterna'), $comparison);
        } else {
            throw new PropelException('filterByTbinstexternaRelatedById2grau() only accepts arguments of type Tbinstexterna or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbinstexternaRelatedById2grau relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbinstexternaRelatedById2grau($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbinstexternaRelatedById2grau');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbinstexternaRelatedById2grau');
        }

        return $this;
    }

    /**
     * Use the TbinstexternaRelatedById2grau relation Tbinstexterna object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbinstexternaQuery A secondary query class using the current class as primary query
     */
    public function useTbinstexternaRelatedById2grauQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbinstexternaRelatedById2grau($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbinstexternaRelatedById2grau', 'TbinstexternaQuery');
    }

    /**
     * Filter the query by a related Tbinstexterna object
     *
     * @param   Tbinstexterna|PropelObjectCollection $tbinstexterna The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbinstexternaRelatedById3grau($tbinstexterna, $comparison = null)
    {
        if ($tbinstexterna instanceof Tbinstexterna) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_3GRAU, $tbinstexterna->getIdInstExterna(), $comparison);
        } elseif ($tbinstexterna instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_3GRAU, $tbinstexterna->toKeyValue('PrimaryKey', 'IdInstExterna'), $comparison);
        } else {
            throw new PropelException('filterByTbinstexternaRelatedById3grau() only accepts arguments of type Tbinstexterna or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbinstexternaRelatedById3grau relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbinstexternaRelatedById3grau($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbinstexternaRelatedById3grau');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbinstexternaRelatedById3grau');
        }

        return $this;
    }

    /**
     * Use the TbinstexternaRelatedById3grau relation Tbinstexterna object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbinstexternaQuery A secondary query class using the current class as primary query
     */
    public function useTbinstexternaRelatedById3grauQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbinstexternaRelatedById3grau($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbinstexternaRelatedById3grau', 'TbinstexternaQuery');
    }

    /**
     * Filter the query by a related Tbinstexterna object
     *
     * @param   Tbinstexterna|PropelObjectCollection $tbinstexterna The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbinstexternaRelatedByIdTrabalho($tbinstexterna, $comparison = null)
    {
        if ($tbinstexterna instanceof Tbinstexterna) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_TRABALHO, $tbinstexterna->getIdInstExterna(), $comparison);
        } elseif ($tbinstexterna instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_TRABALHO, $tbinstexterna->toKeyValue('PrimaryKey', 'IdInstExterna'), $comparison);
        } else {
            throw new PropelException('filterByTbinstexternaRelatedByIdTrabalho() only accepts arguments of type Tbinstexterna or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbinstexternaRelatedByIdTrabalho relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbinstexternaRelatedByIdTrabalho($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbinstexternaRelatedByIdTrabalho');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbinstexternaRelatedByIdTrabalho');
        }

        return $this;
    }

    /**
     * Use the TbinstexternaRelatedByIdTrabalho relation Tbinstexterna object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbinstexternaQuery A secondary query class using the current class as primary query
     */
    public function useTbinstexternaRelatedByIdTrabalhoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbinstexternaRelatedByIdTrabalho($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbinstexternaRelatedByIdTrabalho', 'TbinstexternaQuery');
    }

    /**
     * Filter the query by a related Tblogradouro object
     *
     * @param   Tblogradouro|PropelObjectCollection $tblogradouro The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTblogradouroRelatedByCepTrabalho($tblogradouro, $comparison = null)
    {
        if ($tblogradouro instanceof Tblogradouro) {
            return $this
                ->addUsingAlias(TbalunoPeer::CEP_TRABALHO, $tblogradouro->getCep(), $comparison);
        } elseif ($tblogradouro instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::CEP_TRABALHO, $tblogradouro->toKeyValue('PrimaryKey', 'Cep'), $comparison);
        } else {
            throw new PropelException('filterByTblogradouroRelatedByCepTrabalho() only accepts arguments of type Tblogradouro or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TblogradouroRelatedByCepTrabalho relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTblogradouroRelatedByCepTrabalho($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TblogradouroRelatedByCepTrabalho');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TblogradouroRelatedByCepTrabalho');
        }

        return $this;
    }

    /**
     * Use the TblogradouroRelatedByCepTrabalho relation Tblogradouro object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TblogradouroQuery A secondary query class using the current class as primary query
     */
    public function useTblogradouroRelatedByCepTrabalhoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTblogradouroRelatedByCepTrabalho($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TblogradouroRelatedByCepTrabalho', 'TblogradouroQuery');
    }

    /**
     * Filter the query by a related Tbpolos object
     *
     * @param   Tbpolos|PropelObjectCollection $tbpolos The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbpolos($tbpolos, $comparison = null)
    {
        if ($tbpolos instanceof Tbpolos) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_POLO, $tbpolos->getIdPolo(), $comparison);
        } elseif ($tbpolos instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_POLO, $tbpolos->toKeyValue('PrimaryKey', 'IdPolo'), $comparison);
        } else {
            throw new PropelException('filterByTbpolos() only accepts arguments of type Tbpolos or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbpolos relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbpolos($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbpolos');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbpolos');
        }

        return $this;
    }

    /**
     * Use the Tbpolos relation Tbpolos object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbpolosQuery A secondary query class using the current class as primary query
     */
    public function useTbpolosQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbpolos($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbpolos', 'TbpolosQuery');
    }

    /**
     * Filter the query by a related Tbalunoracacor object
     *
     * @param   Tbalunoracacor|PropelObjectCollection $tbalunoracacor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunoracacor($tbalunoracacor, $comparison = null)
    {
        if ($tbalunoracacor instanceof Tbalunoracacor) {
            return $this
                ->addUsingAlias(TbalunoPeer::ID_RACA, $tbalunoracacor->getIdRaca(), $comparison);
        } elseif ($tbalunoracacor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunoPeer::ID_RACA, $tbalunoracacor->toKeyValue('PrimaryKey', 'IdRaca'), $comparison);
        } else {
            throw new PropelException('filterByTbalunoracacor() only accepts arguments of type Tbalunoracacor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunoracacor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbalunoracacor($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunoracacor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunoracacor');
        }

        return $this;
    }

    /**
     * Use the Tbalunoracacor relation Tbalunoracacor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoracacorQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoracacorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunoracacor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunoracacor', 'TbalunoracacorQuery');
    }

    /**
     * Filter the query by a related Tbpendencia object
     *
     * @param   Tbpendencia|PropelObjectCollection $tbpendencia  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbpendencia($tbpendencia, $comparison = null)
    {
        if ($tbpendencia instanceof Tbpendencia) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbpendencia->getMatricula(), $comparison);
        } elseif ($tbpendencia instanceof PropelObjectCollection) {
            return $this
                ->useTbpendenciaQuery()
                ->filterByPrimaryKeys($tbpendencia->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbpendencia() only accepts arguments of type Tbpendencia or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbpendencia relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbpendencia($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbpendencia');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbpendencia');
        }

        return $this;
    }

    /**
     * Use the Tbpendencia relation Tbpendencia object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbpendenciaQuery A secondary query class using the current class as primary query
     */
    public function useTbpendenciaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbpendencia($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbpendencia', 'TbpendenciaQuery');
    }

    /**
     * Filter the query by a related Tbalunodiploma object
     *
     * @param   Tbalunodiploma|PropelObjectCollection $tbalunodiploma  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunodiploma($tbalunodiploma, $comparison = null)
    {
        if ($tbalunodiploma instanceof Tbalunodiploma) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbalunodiploma->getMatricula(), $comparison);
        } elseif ($tbalunodiploma instanceof PropelObjectCollection) {
            return $this
                ->useTbalunodiplomaQuery()
                ->filterByPrimaryKeys($tbalunodiploma->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunodiploma() only accepts arguments of type Tbalunodiploma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunodiploma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbalunodiploma($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunodiploma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunodiploma');
        }

        return $this;
    }

    /**
     * Use the Tbalunodiploma relation Tbalunodiploma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunodiplomaQuery A secondary query class using the current class as primary query
     */
    public function useTbalunodiplomaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunodiploma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunodiploma', 'TbalunodiplomaQuery');
    }

    /**
     * Filter the query by a related Tbalunosenha object
     *
     * @param   Tbalunosenha|PropelObjectCollection $tbalunosenha  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunosenha($tbalunosenha, $comparison = null)
    {
        if ($tbalunosenha instanceof Tbalunosenha) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbalunosenha->getMatricula(), $comparison);
        } elseif ($tbalunosenha instanceof PropelObjectCollection) {
            return $this
                ->useTbalunosenhaQuery()
                ->filterByPrimaryKeys($tbalunosenha->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunosenha() only accepts arguments of type Tbalunosenha or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunosenha relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbalunosenha($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunosenha');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunosenha');
        }

        return $this;
    }

    /**
     * Use the Tbalunosenha relation Tbalunosenha object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunosenhaQuery A secondary query class using the current class as primary query
     */
    public function useTbalunosenhaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbalunosenha($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunosenha', 'TbalunosenhaQuery');
    }

    /**
     * Filter the query by a related Tbalunosolicitacao object
     *
     * @param   Tbalunosolicitacao|PropelObjectCollection $tbalunosolicitacao  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunosolicitacao($tbalunosolicitacao, $comparison = null)
    {
        if ($tbalunosolicitacao instanceof Tbalunosolicitacao) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbalunosolicitacao->getMatricula(), $comparison);
        } elseif ($tbalunosolicitacao instanceof PropelObjectCollection) {
            return $this
                ->useTbalunosolicitacaoQuery()
                ->filterByPrimaryKeys($tbalunosolicitacao->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunosolicitacao() only accepts arguments of type Tbalunosolicitacao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbalunosolicitacao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbalunosolicitacao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbalunosolicitacao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbalunosolicitacao');
        }

        return $this;
    }

    /**
     * Use the Tbalunosolicitacao relation Tbalunosolicitacao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunosolicitacaoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunosolicitacaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunosolicitacao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbalunosolicitacao', 'TbalunosolicitacaoQuery');
    }

    /**
     * Filter the query by a related Tbbanca object
     *
     * @param   Tbbanca|PropelObjectCollection $tbbanca  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbbanca($tbbanca, $comparison = null)
    {
        if ($tbbanca instanceof Tbbanca) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbbanca->getMatricula(), $comparison);
        } elseif ($tbbanca instanceof PropelObjectCollection) {
            return $this
                ->useTbbancaQuery()
                ->filterByPrimaryKeys($tbbanca->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbbanca() only accepts arguments of type Tbbanca or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbbanca relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbbanca($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbbanca');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbbanca');
        }

        return $this;
    }

    /**
     * Use the Tbbanca relation Tbbanca object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbbancaQuery A secondary query class using the current class as primary query
     */
    public function useTbbancaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbbanca($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbbanca', 'TbbancaQuery');
    }

    /**
     * Filter the query by a related Tbfila object
     *
     * @param   Tbfila|PropelObjectCollection $tbfila  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbfila($tbfila, $comparison = null)
    {
        if ($tbfila instanceof Tbfila) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbfila->getMatricula(), $comparison);
        } elseif ($tbfila instanceof PropelObjectCollection) {
            return $this
                ->useTbfilaQuery()
                ->filterByPrimaryKeys($tbfila->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbfila() only accepts arguments of type Tbfila or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbfila relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbfila($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbfila');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbfila');
        }

        return $this;
    }

    /**
     * Use the Tbfila relation Tbfila object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbfilaQuery A secondary query class using the current class as primary query
     */
    public function useTbfilaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbfila($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbfila', 'TbfilaQuery');
    }

    /**
     * Filter the query by a related Tbhistorico object
     *
     * @param   Tbhistorico|PropelObjectCollection $tbhistorico  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbhistorico($tbhistorico, $comparison = null)
    {
        if ($tbhistorico instanceof Tbhistorico) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbhistorico->getMatricula(), $comparison);
        } elseif ($tbhistorico instanceof PropelObjectCollection) {
            return $this
                ->useTbhistoricoQuery()
                ->filterByPrimaryKeys($tbhistorico->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbhistorico() only accepts arguments of type Tbhistorico or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbhistorico relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbhistorico($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbhistorico');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbhistorico');
        }

        return $this;
    }

    /**
     * Use the Tbhistorico relation Tbhistorico object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbhistoricoQuery A secondary query class using the current class as primary query
     */
    public function useTbhistoricoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbhistorico($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbhistorico', 'TbhistoricoQuery');
    }

    /**
     * Filter the query by a related TbturmaAluno object
     *
     * @param   TbturmaAluno|PropelObjectCollection $tbturmaAluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturmaAluno($tbturmaAluno, $comparison = null)
    {
        if ($tbturmaAluno instanceof TbturmaAluno) {
            return $this
                ->addUsingAlias(TbalunoPeer::MATRICULA, $tbturmaAluno->getMatricula(), $comparison);
        } elseif ($tbturmaAluno instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaAlunoQuery()
                ->filterByPrimaryKeys($tbturmaAluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturmaAluno() only accepts arguments of type TbturmaAluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbturmaAluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function joinTbturmaAluno($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbturmaAluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbturmaAluno');
        }

        return $this;
    }

    /**
     * Use the TbturmaAluno relation TbturmaAluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaAlunoQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaAlunoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbturmaAluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbturmaAluno', 'TbturmaAlunoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbaluno $tbaluno Object to remove from the list of results
     *
     * @return TbalunoQuery The current query, for fluid interface
     */
    public function prune($tbaluno = null)
    {
        if ($tbaluno) {
            $this->addUsingAlias(TbalunoPeer::MATRICULA, $tbaluno->getMatricula(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
