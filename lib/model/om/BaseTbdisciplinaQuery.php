<?php


/**
 * Base class that represents a query for the 'tbdisciplina' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:38 2013
 *
 * @method TbdisciplinaQuery orderByCodDisciplina($order = Criteria::ASC) Order by the cod_disciplina column
 * @method TbdisciplinaQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbdisciplinaQuery orderBySucinto($order = Criteria::ASC) Order by the sucinto column
 * @method TbdisciplinaQuery orderByInicio($order = Criteria::ASC) Order by the inicio column
 * @method TbdisciplinaQuery orderByTermino($order = Criteria::ASC) Order by the termino column
 * @method TbdisciplinaQuery orderByCh($order = Criteria::ASC) Order by the ch column
 * @method TbdisciplinaQuery orderByChTeorica($order = Criteria::ASC) Order by the ch_teorica column
 * @method TbdisciplinaQuery orderByChPratica($order = Criteria::ASC) Order by the ch_pratica column
 * @method TbdisciplinaQuery orderByCredPratico($order = Criteria::ASC) Order by the cred_pratico column
 * @method TbdisciplinaQuery orderByCredTeorico($order = Criteria::ASC) Order by the cred_teorico column
 * @method TbdisciplinaQuery orderByIdSituacao($order = Criteria::ASC) Order by the id_situacao column
 * @method TbdisciplinaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbdisciplinaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbdisciplinaQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbdisciplinaQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbdisciplinaQuery groupByCodDisciplina() Group by the cod_disciplina column
 * @method TbdisciplinaQuery groupByDescricao() Group by the descricao column
 * @method TbdisciplinaQuery groupBySucinto() Group by the sucinto column
 * @method TbdisciplinaQuery groupByInicio() Group by the inicio column
 * @method TbdisciplinaQuery groupByTermino() Group by the termino column
 * @method TbdisciplinaQuery groupByCh() Group by the ch column
 * @method TbdisciplinaQuery groupByChTeorica() Group by the ch_teorica column
 * @method TbdisciplinaQuery groupByChPratica() Group by the ch_pratica column
 * @method TbdisciplinaQuery groupByCredPratico() Group by the cred_pratico column
 * @method TbdisciplinaQuery groupByCredTeorico() Group by the cred_teorico column
 * @method TbdisciplinaQuery groupByIdSituacao() Group by the id_situacao column
 * @method TbdisciplinaQuery groupByCreatedAt() Group by the created_at column
 * @method TbdisciplinaQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbdisciplinaQuery groupByCreatedBy() Group by the created_by column
 * @method TbdisciplinaQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbdisciplinaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbdisciplinaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbdisciplinaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbdisciplinaQuery leftJoinTbdisciplinasituacao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbdisciplinasituacao relation
 * @method TbdisciplinaQuery rightJoinTbdisciplinasituacao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbdisciplinasituacao relation
 * @method TbdisciplinaQuery innerJoinTbdisciplinasituacao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbdisciplinasituacao relation
 *
 * @method TbdisciplinaQuery leftJoinTbcurriculodisciplinas($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcurriculodisciplinas relation
 * @method TbdisciplinaQuery rightJoinTbcurriculodisciplinas($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcurriculodisciplinas relation
 * @method TbdisciplinaQuery innerJoinTbcurriculodisciplinas($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcurriculodisciplinas relation
 *
 * @method TbdisciplinaQuery leftJoinTbgradeEquivalente($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbgradeEquivalente relation
 * @method TbdisciplinaQuery rightJoinTbgradeEquivalente($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbgradeEquivalente relation
 * @method TbdisciplinaQuery innerJoinTbgradeEquivalente($relationAlias = null) Adds a INNER JOIN clause to the query using the TbgradeEquivalente relation
 *
 * @method TbdisciplinaQuery leftJoinTbdisciplinarequisitosRelatedByCodDisciplina($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDisciplina relation
 * @method TbdisciplinaQuery rightJoinTbdisciplinarequisitosRelatedByCodDisciplina($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDisciplina relation
 * @method TbdisciplinaQuery innerJoinTbdisciplinarequisitosRelatedByCodDisciplina($relationAlias = null) Adds a INNER JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDisciplina relation
 *
 * @method TbdisciplinaQuery leftJoinTbdisciplinarequisitosRelatedByCodDiscRequisito($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDiscRequisito relation
 * @method TbdisciplinaQuery rightJoinTbdisciplinarequisitosRelatedByCodDiscRequisito($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDiscRequisito relation
 * @method TbdisciplinaQuery innerJoinTbdisciplinarequisitosRelatedByCodDiscRequisito($relationAlias = null) Adds a INNER JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDiscRequisito relation
 *
 * @method TbdisciplinaQuery leftJoinTbdisciplinaIgnorada($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbdisciplinaIgnorada relation
 * @method TbdisciplinaQuery rightJoinTbdisciplinaIgnorada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbdisciplinaIgnorada relation
 * @method TbdisciplinaQuery innerJoinTbdisciplinaIgnorada($relationAlias = null) Adds a INNER JOIN clause to the query using the TbdisciplinaIgnorada relation
 *
 * @method TbdisciplinaQuery leftJoinTbhistorico($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbhistorico relation
 * @method TbdisciplinaQuery rightJoinTbhistorico($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbhistorico relation
 * @method TbdisciplinaQuery innerJoinTbhistorico($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbhistorico relation
 *
 * @method TbdisciplinaQuery leftJoinTboferta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tboferta relation
 * @method TbdisciplinaQuery rightJoinTboferta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tboferta relation
 * @method TbdisciplinaQuery innerJoinTboferta($relationAlias = null) Adds a INNER JOIN clause to the query using the Tboferta relation
 *
 * @method TbdisciplinaQuery leftJoinTbturma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturma relation
 * @method TbdisciplinaQuery rightJoinTbturma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturma relation
 * @method TbdisciplinaQuery innerJoinTbturma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturma relation
 *
 * @method Tbdisciplina findOne(PropelPDO $con = null) Return the first Tbdisciplina matching the query
 * @method Tbdisciplina findOneOrCreate(PropelPDO $con = null) Return the first Tbdisciplina matching the query, or a new Tbdisciplina object populated from the query conditions when no match is found
 *
 * @method Tbdisciplina findOneByCodDisciplina(string $cod_disciplina) Return the first Tbdisciplina filtered by the cod_disciplina column
 * @method Tbdisciplina findOneByDescricao(string $descricao) Return the first Tbdisciplina filtered by the descricao column
 * @method Tbdisciplina findOneBySucinto(string $sucinto) Return the first Tbdisciplina filtered by the sucinto column
 * @method Tbdisciplina findOneByInicio(string $inicio) Return the first Tbdisciplina filtered by the inicio column
 * @method Tbdisciplina findOneByTermino(string $termino) Return the first Tbdisciplina filtered by the termino column
 * @method Tbdisciplina findOneByCh(int $ch) Return the first Tbdisciplina filtered by the ch column
 * @method Tbdisciplina findOneByChTeorica(int $ch_teorica) Return the first Tbdisciplina filtered by the ch_teorica column
 * @method Tbdisciplina findOneByChPratica(int $ch_pratica) Return the first Tbdisciplina filtered by the ch_pratica column
 * @method Tbdisciplina findOneByCredPratico(string $cred_pratico) Return the first Tbdisciplina filtered by the cred_pratico column
 * @method Tbdisciplina findOneByCredTeorico(string $cred_teorico) Return the first Tbdisciplina filtered by the cred_teorico column
 * @method Tbdisciplina findOneByIdSituacao(int $id_situacao) Return the first Tbdisciplina filtered by the id_situacao column
 * @method Tbdisciplina findOneByCreatedAt(string $created_at) Return the first Tbdisciplina filtered by the created_at column
 * @method Tbdisciplina findOneByUpdatedAt(string $updated_at) Return the first Tbdisciplina filtered by the updated_at column
 * @method Tbdisciplina findOneByCreatedBy(string $created_by) Return the first Tbdisciplina filtered by the created_by column
 * @method Tbdisciplina findOneByUpdatedBy(string $updated_by) Return the first Tbdisciplina filtered by the updated_by column
 *
 * @method array findByCodDisciplina(string $cod_disciplina) Return Tbdisciplina objects filtered by the cod_disciplina column
 * @method array findByDescricao(string $descricao) Return Tbdisciplina objects filtered by the descricao column
 * @method array findBySucinto(string $sucinto) Return Tbdisciplina objects filtered by the sucinto column
 * @method array findByInicio(string $inicio) Return Tbdisciplina objects filtered by the inicio column
 * @method array findByTermino(string $termino) Return Tbdisciplina objects filtered by the termino column
 * @method array findByCh(int $ch) Return Tbdisciplina objects filtered by the ch column
 * @method array findByChTeorica(int $ch_teorica) Return Tbdisciplina objects filtered by the ch_teorica column
 * @method array findByChPratica(int $ch_pratica) Return Tbdisciplina objects filtered by the ch_pratica column
 * @method array findByCredPratico(string $cred_pratico) Return Tbdisciplina objects filtered by the cred_pratico column
 * @method array findByCredTeorico(string $cred_teorico) Return Tbdisciplina objects filtered by the cred_teorico column
 * @method array findByIdSituacao(int $id_situacao) Return Tbdisciplina objects filtered by the id_situacao column
 * @method array findByCreatedAt(string $created_at) Return Tbdisciplina objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbdisciplina objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbdisciplina objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbdisciplina objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbdisciplinaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbdisciplinaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbdisciplina', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbdisciplinaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbdisciplinaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbdisciplinaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbdisciplinaQuery) {
            return $criteria;
        }
        $query = new TbdisciplinaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbdisciplina|Tbdisciplina[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbdisciplinaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbdisciplinaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbdisciplina A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT COD_DISCIPLINA, DESCRICAO, SUCINTO, INICIO, TERMINO, CH, CH_TEORICA, CH_PRATICA, CRED_PRATICO, CRED_TEORICO, ID_SITUACAO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbdisciplina WHERE COD_DISCIPLINA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_STR);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbdisciplina();
            $obj->hydrate($row);
            TbdisciplinaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbdisciplina|Tbdisciplina[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbdisciplina[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the cod_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterByCodDisciplina('fooValue');   // WHERE cod_disciplina = 'fooValue'
     * $query->filterByCodDisciplina('%fooValue%'); // WHERE cod_disciplina LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codDisciplina The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByCodDisciplina($codDisciplina = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codDisciplina)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codDisciplina)) {
                $codDisciplina = str_replace('*', '%', $codDisciplina);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $codDisciplina, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the sucinto column
     *
     * Example usage:
     * <code>
     * $query->filterBySucinto('fooValue');   // WHERE sucinto = 'fooValue'
     * $query->filterBySucinto('%fooValue%'); // WHERE sucinto LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sucinto The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterBySucinto($sucinto = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sucinto)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sucinto)) {
                $sucinto = str_replace('*', '%', $sucinto);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::SUCINTO, $sucinto, $comparison);
    }

    /**
     * Filter the query on the inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByInicio('2011-03-14'); // WHERE inicio = '2011-03-14'
     * $query->filterByInicio('now'); // WHERE inicio = '2011-03-14'
     * $query->filterByInicio(array('max' => 'yesterday')); // WHERE inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $inicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByInicio($inicio = null, $comparison = null)
    {
        if (is_array($inicio)) {
            $useMinMax = false;
            if (isset($inicio['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::INICIO, $inicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($inicio['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::INICIO, $inicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::INICIO, $inicio, $comparison);
    }

    /**
     * Filter the query on the termino column
     *
     * Example usage:
     * <code>
     * $query->filterByTermino('2011-03-14'); // WHERE termino = '2011-03-14'
     * $query->filterByTermino('now'); // WHERE termino = '2011-03-14'
     * $query->filterByTermino(array('max' => 'yesterday')); // WHERE termino > '2011-03-13'
     * </code>
     *
     * @param     mixed $termino The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByTermino($termino = null, $comparison = null)
    {
        if (is_array($termino)) {
            $useMinMax = false;
            if (isset($termino['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::TERMINO, $termino['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($termino['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::TERMINO, $termino['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::TERMINO, $termino, $comparison);
    }

    /**
     * Filter the query on the ch column
     *
     * Example usage:
     * <code>
     * $query->filterByCh(1234); // WHERE ch = 1234
     * $query->filterByCh(array(12, 34)); // WHERE ch IN (12, 34)
     * $query->filterByCh(array('min' => 12)); // WHERE ch > 12
     * </code>
     *
     * @param     mixed $ch The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByCh($ch = null, $comparison = null)
    {
        if (is_array($ch)) {
            $useMinMax = false;
            if (isset($ch['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CH, $ch['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ch['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CH, $ch['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CH, $ch, $comparison);
    }

    /**
     * Filter the query on the ch_teorica column
     *
     * Example usage:
     * <code>
     * $query->filterByChTeorica(1234); // WHERE ch_teorica = 1234
     * $query->filterByChTeorica(array(12, 34)); // WHERE ch_teorica IN (12, 34)
     * $query->filterByChTeorica(array('min' => 12)); // WHERE ch_teorica > 12
     * </code>
     *
     * @param     mixed $chTeorica The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByChTeorica($chTeorica = null, $comparison = null)
    {
        if (is_array($chTeorica)) {
            $useMinMax = false;
            if (isset($chTeorica['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CH_TEORICA, $chTeorica['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chTeorica['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CH_TEORICA, $chTeorica['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CH_TEORICA, $chTeorica, $comparison);
    }

    /**
     * Filter the query on the ch_pratica column
     *
     * Example usage:
     * <code>
     * $query->filterByChPratica(1234); // WHERE ch_pratica = 1234
     * $query->filterByChPratica(array(12, 34)); // WHERE ch_pratica IN (12, 34)
     * $query->filterByChPratica(array('min' => 12)); // WHERE ch_pratica > 12
     * </code>
     *
     * @param     mixed $chPratica The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByChPratica($chPratica = null, $comparison = null)
    {
        if (is_array($chPratica)) {
            $useMinMax = false;
            if (isset($chPratica['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CH_PRATICA, $chPratica['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chPratica['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CH_PRATICA, $chPratica['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CH_PRATICA, $chPratica, $comparison);
    }

    /**
     * Filter the query on the cred_pratico column
     *
     * Example usage:
     * <code>
     * $query->filterByCredPratico('fooValue');   // WHERE cred_pratico = 'fooValue'
     * $query->filterByCredPratico('%fooValue%'); // WHERE cred_pratico LIKE '%fooValue%'
     * </code>
     *
     * @param     string $credPratico The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByCredPratico($credPratico = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($credPratico)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $credPratico)) {
                $credPratico = str_replace('*', '%', $credPratico);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CRED_PRATICO, $credPratico, $comparison);
    }

    /**
     * Filter the query on the cred_teorico column
     *
     * Example usage:
     * <code>
     * $query->filterByCredTeorico('fooValue');   // WHERE cred_teorico = 'fooValue'
     * $query->filterByCredTeorico('%fooValue%'); // WHERE cred_teorico LIKE '%fooValue%'
     * </code>
     *
     * @param     string $credTeorico The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByCredTeorico($credTeorico = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($credTeorico)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $credTeorico)) {
                $credTeorico = str_replace('*', '%', $credTeorico);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CRED_TEORICO, $credTeorico, $comparison);
    }

    /**
     * Filter the query on the id_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSituacao(1234); // WHERE id_situacao = 1234
     * $query->filterByIdSituacao(array(12, 34)); // WHERE id_situacao IN (12, 34)
     * $query->filterByIdSituacao(array('min' => 12)); // WHERE id_situacao > 12
     * </code>
     *
     * @see       filterByTbdisciplinasituacao()
     *
     * @param     mixed $idSituacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByIdSituacao($idSituacao = null, $comparison = null)
    {
        if (is_array($idSituacao)) {
            $useMinMax = false;
            if (isset($idSituacao['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::ID_SITUACAO, $idSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSituacao['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::ID_SITUACAO, $idSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::ID_SITUACAO, $idSituacao, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbdisciplinaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbdisciplinaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbdisciplinaPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbdisciplinasituacao object
     *
     * @param   Tbdisciplinasituacao|PropelObjectCollection $tbdisciplinasituacao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplinasituacao($tbdisciplinasituacao, $comparison = null)
    {
        if ($tbdisciplinasituacao instanceof Tbdisciplinasituacao) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::ID_SITUACAO, $tbdisciplinasituacao->getIdSituacao(), $comparison);
        } elseif ($tbdisciplinasituacao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbdisciplinaPeer::ID_SITUACAO, $tbdisciplinasituacao->toKeyValue('PrimaryKey', 'IdSituacao'), $comparison);
        } else {
            throw new PropelException('filterByTbdisciplinasituacao() only accepts arguments of type Tbdisciplinasituacao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbdisciplinasituacao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbdisciplinasituacao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbdisciplinasituacao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbdisciplinasituacao');
        }

        return $this;
    }

    /**
     * Use the Tbdisciplinasituacao relation Tbdisciplinasituacao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinasituacaoQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinasituacaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplinasituacao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbdisciplinasituacao', 'TbdisciplinasituacaoQuery');
    }

    /**
     * Filter the query by a related Tbcurriculodisciplinas object
     *
     * @param   Tbcurriculodisciplinas|PropelObjectCollection $tbcurriculodisciplinas  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcurriculodisciplinas($tbcurriculodisciplinas, $comparison = null)
    {
        if ($tbcurriculodisciplinas instanceof Tbcurriculodisciplinas) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbcurriculodisciplinas->getCodDisciplina(), $comparison);
        } elseif ($tbcurriculodisciplinas instanceof PropelObjectCollection) {
            return $this
                ->useTbcurriculodisciplinasQuery()
                ->filterByPrimaryKeys($tbcurriculodisciplinas->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbcurriculodisciplinas() only accepts arguments of type Tbcurriculodisciplinas or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcurriculodisciplinas relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbcurriculodisciplinas($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcurriculodisciplinas');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcurriculodisciplinas');
        }

        return $this;
    }

    /**
     * Use the Tbcurriculodisciplinas relation Tbcurriculodisciplinas object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcurriculodisciplinasQuery A secondary query class using the current class as primary query
     */
    public function useTbcurriculodisciplinasQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcurriculodisciplinas($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcurriculodisciplinas', 'TbcurriculodisciplinasQuery');
    }

    /**
     * Filter the query by a related TbgradeEquivalente object
     *
     * @param   TbgradeEquivalente|PropelObjectCollection $tbgradeEquivalente  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbgradeEquivalente($tbgradeEquivalente, $comparison = null)
    {
        if ($tbgradeEquivalente instanceof TbgradeEquivalente) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbgradeEquivalente->getCodDisciplina(), $comparison);
        } elseif ($tbgradeEquivalente instanceof PropelObjectCollection) {
            return $this
                ->useTbgradeEquivalenteQuery()
                ->filterByPrimaryKeys($tbgradeEquivalente->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbgradeEquivalente() only accepts arguments of type TbgradeEquivalente or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbgradeEquivalente relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbgradeEquivalente($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbgradeEquivalente');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbgradeEquivalente');
        }

        return $this;
    }

    /**
     * Use the TbgradeEquivalente relation TbgradeEquivalente object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbgradeEquivalenteQuery A secondary query class using the current class as primary query
     */
    public function useTbgradeEquivalenteQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbgradeEquivalente($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbgradeEquivalente', 'TbgradeEquivalenteQuery');
    }

    /**
     * Filter the query by a related Tbdisciplinarequisitos object
     *
     * @param   Tbdisciplinarequisitos|PropelObjectCollection $tbdisciplinarequisitos  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplinarequisitosRelatedByCodDisciplina($tbdisciplinarequisitos, $comparison = null)
    {
        if ($tbdisciplinarequisitos instanceof Tbdisciplinarequisitos) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbdisciplinarequisitos->getCodDisciplina(), $comparison);
        } elseif ($tbdisciplinarequisitos instanceof PropelObjectCollection) {
            return $this
                ->useTbdisciplinarequisitosRelatedByCodDisciplinaQuery()
                ->filterByPrimaryKeys($tbdisciplinarequisitos->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbdisciplinarequisitosRelatedByCodDisciplina() only accepts arguments of type Tbdisciplinarequisitos or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDisciplina relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbdisciplinarequisitosRelatedByCodDisciplina($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbdisciplinarequisitosRelatedByCodDisciplina');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbdisciplinarequisitosRelatedByCodDisciplina');
        }

        return $this;
    }

    /**
     * Use the TbdisciplinarequisitosRelatedByCodDisciplina relation Tbdisciplinarequisitos object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinarequisitosQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinarequisitosRelatedByCodDisciplinaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplinarequisitosRelatedByCodDisciplina($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbdisciplinarequisitosRelatedByCodDisciplina', 'TbdisciplinarequisitosQuery');
    }

    /**
     * Filter the query by a related Tbdisciplinarequisitos object
     *
     * @param   Tbdisciplinarequisitos|PropelObjectCollection $tbdisciplinarequisitos  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplinarequisitosRelatedByCodDiscRequisito($tbdisciplinarequisitos, $comparison = null)
    {
        if ($tbdisciplinarequisitos instanceof Tbdisciplinarequisitos) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbdisciplinarequisitos->getCodDiscRequisito(), $comparison);
        } elseif ($tbdisciplinarequisitos instanceof PropelObjectCollection) {
            return $this
                ->useTbdisciplinarequisitosRelatedByCodDiscRequisitoQuery()
                ->filterByPrimaryKeys($tbdisciplinarequisitos->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbdisciplinarequisitosRelatedByCodDiscRequisito() only accepts arguments of type Tbdisciplinarequisitos or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbdisciplinarequisitosRelatedByCodDiscRequisito relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbdisciplinarequisitosRelatedByCodDiscRequisito($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbdisciplinarequisitosRelatedByCodDiscRequisito');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbdisciplinarequisitosRelatedByCodDiscRequisito');
        }

        return $this;
    }

    /**
     * Use the TbdisciplinarequisitosRelatedByCodDiscRequisito relation Tbdisciplinarequisitos object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinarequisitosQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinarequisitosRelatedByCodDiscRequisitoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbdisciplinarequisitosRelatedByCodDiscRequisito($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbdisciplinarequisitosRelatedByCodDiscRequisito', 'TbdisciplinarequisitosQuery');
    }

    /**
     * Filter the query by a related TbdisciplinaIgnorada object
     *
     * @param   TbdisciplinaIgnorada|PropelObjectCollection $tbdisciplinaIgnorada  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplinaIgnorada($tbdisciplinaIgnorada, $comparison = null)
    {
        if ($tbdisciplinaIgnorada instanceof TbdisciplinaIgnorada) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbdisciplinaIgnorada->getCodDisciplina(), $comparison);
        } elseif ($tbdisciplinaIgnorada instanceof PropelObjectCollection) {
            return $this
                ->useTbdisciplinaIgnoradaQuery()
                ->filterByPrimaryKeys($tbdisciplinaIgnorada->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbdisciplinaIgnorada() only accepts arguments of type TbdisciplinaIgnorada or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbdisciplinaIgnorada relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbdisciplinaIgnorada($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbdisciplinaIgnorada');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbdisciplinaIgnorada');
        }

        return $this;
    }

    /**
     * Use the TbdisciplinaIgnorada relation TbdisciplinaIgnorada object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinaIgnoradaQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinaIgnoradaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplinaIgnorada($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbdisciplinaIgnorada', 'TbdisciplinaIgnoradaQuery');
    }

    /**
     * Filter the query by a related Tbhistorico object
     *
     * @param   Tbhistorico|PropelObjectCollection $tbhistorico  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbhistorico($tbhistorico, $comparison = null)
    {
        if ($tbhistorico instanceof Tbhistorico) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbhistorico->getCodDisciplina(), $comparison);
        } elseif ($tbhistorico instanceof PropelObjectCollection) {
            return $this
                ->useTbhistoricoQuery()
                ->filterByPrimaryKeys($tbhistorico->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbhistorico() only accepts arguments of type Tbhistorico or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbhistorico relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbhistorico($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbhistorico');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbhistorico');
        }

        return $this;
    }

    /**
     * Use the Tbhistorico relation Tbhistorico object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbhistoricoQuery A secondary query class using the current class as primary query
     */
    public function useTbhistoricoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbhistorico($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbhistorico', 'TbhistoricoQuery');
    }

    /**
     * Filter the query by a related Tboferta object
     *
     * @param   Tboferta|PropelObjectCollection $tboferta  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTboferta($tboferta, $comparison = null)
    {
        if ($tboferta instanceof Tboferta) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tboferta->getCodDisciplina(), $comparison);
        } elseif ($tboferta instanceof PropelObjectCollection) {
            return $this
                ->useTbofertaQuery()
                ->filterByPrimaryKeys($tboferta->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTboferta() only accepts arguments of type Tboferta or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tboferta relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTboferta($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tboferta');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tboferta');
        }

        return $this;
    }

    /**
     * Use the Tboferta relation Tboferta object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertaQuery A secondary query class using the current class as primary query
     */
    public function useTbofertaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTboferta($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tboferta', 'TbofertaQuery');
    }

    /**
     * Filter the query by a related Tbturma object
     *
     * @param   Tbturma|PropelObjectCollection $tbturma  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbdisciplinaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturma($tbturma, $comparison = null)
    {
        if ($tbturma instanceof Tbturma) {
            return $this
                ->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbturma->getCodDisciplina(), $comparison);
        } elseif ($tbturma instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaQuery()
                ->filterByPrimaryKeys($tbturma->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturma() only accepts arguments of type Tbturma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function joinTbturma($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturma');
        }

        return $this;
    }

    /**
     * Use the Tbturma relation Tbturma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturma', 'TbturmaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbdisciplina $tbdisciplina Object to remove from the list of results
     *
     * @return TbdisciplinaQuery The current query, for fluid interface
     */
    public function prune($tbdisciplina = null)
    {
        if ($tbdisciplina) {
            $this->addUsingAlias(TbdisciplinaPeer::COD_DISCIPLINA, $tbdisciplina->getCodDisciplina(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
