<?php

/**
 * Base class that represents a row from the 'tbloadaluno' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:48 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbloadaluno extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbloadalunoPeer
	 */
	protected static $peer;

	/**
	 * The value for the matricula field.
	 * @var        string
	 */
	protected $matricula;

	/**
	 * The value for the nome field.
	 * @var        string
	 */
	protected $nome;

	/**
	 * The value for the sexo field.
	 * @var        string
	 */
	protected $sexo;

	/**
	 * The value for the rg field.
	 * @var        string
	 */
	protected $rg;

	/**
	 * The value for the rg_org_exped field.
	 * @var        string
	 */
	protected $rg_org_exped;

	/**
	 * The value for the cpf field.
	 * @var        string
	 */
	protected $cpf;

	/**
	 * The value for the id_versao_curso field.
	 * @var        int
	 */
	protected $id_versao_curso;

	/**
	 * The value for the id_tipo_ingresso field.
	 * @var        int
	 */
	protected $id_tipo_ingresso;

	/**
	 * The value for the id_situacao field.
	 * @var        int
	 */
	protected $id_situacao;

	/**
	 * The value for the classificacao field.
	 * @var        int
	 */
	protected $classificacao;

	/**
	 * The value for the opcao field.
	 * @var        string
	 */
	protected $opcao;

	/**
	 * The value for the processo field.
	 * @var        string
	 */
	protected $processo;

	/**
	 * The value for the op_ingresso field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $op_ingresso;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbcursoversao
	 */
	protected $aTbcursoversao;

	/**
	 * @var        Tbtipoingresso
	 */
	protected $aTbtipoingresso;

	/**
	 * @var        Tbalunosituacao
	 */
	protected $aTbalunosituacao;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbloadalunoPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->op_ingresso = 0;
	}

	/**
	 * Initializes internal state of BaseTbloadaluno object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [matricula] column value.
	 * 
	 * @return     string
	 */
	public function getMatricula()
	{
		return $this->matricula;
	}

	/**
	 * Get the [nome] column value.
	 * 
	 * @return     string
	 */
	public function getNome()
	{
		return $this->nome;
	}

	/**
	 * Get the [sexo] column value.
	 * 
	 * @return     string
	 */
	public function getSexo()
	{
		return $this->sexo;
	}

	/**
	 * Get the [rg] column value.
	 * 
	 * @return     string
	 */
	public function getRg()
	{
		return $this->rg;
	}

	/**
	 * Get the [rg_org_exped] column value.
	 * 
	 * @return     string
	 */
	public function getRgOrgExped()
	{
		return $this->rg_org_exped;
	}

	/**
	 * Get the [cpf] column value.
	 * 
	 * @return     string
	 */
	public function getCpf()
	{
		return $this->cpf;
	}

	/**
	 * Get the [id_versao_curso] column value.
	 * 
	 * @return     int
	 */
	public function getIdVersaoCurso()
	{
		return $this->id_versao_curso;
	}

	/**
	 * Get the [id_tipo_ingresso] column value.
	 * 
	 * @return     int
	 */
	public function getIdTipoIngresso()
	{
		return $this->id_tipo_ingresso;
	}

	/**
	 * Get the [id_situacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdSituacao()
	{
		return $this->id_situacao;
	}

	/**
	 * Get the [classificacao] column value.
	 * 
	 * @return     int
	 */
	public function getClassificacao()
	{
		return $this->classificacao;
	}

	/**
	 * Get the [opcao] column value.
	 * 
	 * @return     string
	 */
	public function getOpcao()
	{
		return $this->opcao;
	}

	/**
	 * Get the [processo] column value.
	 * 
	 * @return     string
	 */
	public function getProcesso()
	{
		return $this->processo;
	}

	/**
	 * Get the [op_ingresso] column value.
	 * 
	 * @return     int
	 */
	public function getOpIngresso()
	{
		return $this->op_ingresso;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [matricula] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setMatricula($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->matricula !== $v) {
			$this->matricula = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::MATRICULA;
		}

		return $this;
	} // setMatricula()

	/**
	 * Set the value of [nome] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setNome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome !== $v) {
			$this->nome = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::NOME;
		}

		return $this;
	} // setNome()

	/**
	 * Set the value of [sexo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setSexo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sexo !== $v) {
			$this->sexo = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::SEXO;
		}

		return $this;
	} // setSexo()

	/**
	 * Set the value of [rg] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setRg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rg !== $v) {
			$this->rg = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::RG;
		}

		return $this;
	} // setRg()

	/**
	 * Set the value of [rg_org_exped] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setRgOrgExped($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rg_org_exped !== $v) {
			$this->rg_org_exped = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::RG_ORG_EXPED;
		}

		return $this;
	} // setRgOrgExped()

	/**
	 * Set the value of [cpf] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setCpf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cpf !== $v) {
			$this->cpf = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::CPF;
		}

		return $this;
	} // setCpf()

	/**
	 * Set the value of [id_versao_curso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setIdVersaoCurso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_versao_curso !== $v) {
			$this->id_versao_curso = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::ID_VERSAO_CURSO;
		}

		if ($this->aTbcursoversao !== null && $this->aTbcursoversao->getIdVersaoCurso() !== $v) {
			$this->aTbcursoversao = null;
		}

		return $this;
	} // setIdVersaoCurso()

	/**
	 * Set the value of [id_tipo_ingresso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setIdTipoIngresso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tipo_ingresso !== $v) {
			$this->id_tipo_ingresso = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::ID_TIPO_INGRESSO;
		}

		if ($this->aTbtipoingresso !== null && $this->aTbtipoingresso->getIdTipoIngresso() !== $v) {
			$this->aTbtipoingresso = null;
		}

		return $this;
	} // setIdTipoIngresso()

	/**
	 * Set the value of [id_situacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setIdSituacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_situacao !== $v) {
			$this->id_situacao = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::ID_SITUACAO;
		}

		if ($this->aTbalunosituacao !== null && $this->aTbalunosituacao->getIdSituacao() !== $v) {
			$this->aTbalunosituacao = null;
		}

		return $this;
	} // setIdSituacao()

	/**
	 * Set the value of [classificacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setClassificacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->classificacao !== $v) {
			$this->classificacao = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::CLASSIFICACAO;
		}

		return $this;
	} // setClassificacao()

	/**
	 * Set the value of [opcao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setOpcao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->opcao !== $v) {
			$this->opcao = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::OPCAO;
		}

		return $this;
	} // setOpcao()

	/**
	 * Set the value of [processo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setProcesso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->processo !== $v) {
			$this->processo = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::PROCESSO;
		}

		return $this;
	} // setProcesso()

	/**
	 * Set the value of [op_ingresso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setOpIngresso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->op_ingresso !== $v || $this->isNew()) {
			$this->op_ingresso = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::OP_INGRESSO;
		}

		return $this;
	} // setOpIngresso()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbloadalunoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbloadalunoPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbloadaluno The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbloadalunoPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->op_ingresso !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->matricula = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->nome = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->sexo = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->rg = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->rg_org_exped = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->cpf = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->id_versao_curso = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->id_tipo_ingresso = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->id_situacao = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->classificacao = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->opcao = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->processo = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->op_ingresso = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->created_at = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->updated_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->created_by = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->updated_by = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 17; // 17 = TbloadalunoPeer::NUM_COLUMNS - TbloadalunoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tbloadaluno object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbcursoversao !== null && $this->id_versao_curso !== $this->aTbcursoversao->getIdVersaoCurso()) {
			$this->aTbcursoversao = null;
		}
		if ($this->aTbtipoingresso !== null && $this->id_tipo_ingresso !== $this->aTbtipoingresso->getIdTipoIngresso()) {
			$this->aTbtipoingresso = null;
		}
		if ($this->aTbalunosituacao !== null && $this->id_situacao !== $this->aTbalunosituacao->getIdSituacao()) {
			$this->aTbalunosituacao = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbloadalunoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbloadalunoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbcursoversao = null;
			$this->aTbtipoingresso = null;
			$this->aTbalunosituacao = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbloadalunoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbloadaluno:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbloadalunoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbloadaluno:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbloadalunoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbloadaluno:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbloadalunoPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbloadalunoPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbloadaluno:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbloadalunoPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbcursoversao !== null) {
				if ($this->aTbcursoversao->isModified() || $this->aTbcursoversao->isNew()) {
					$affectedRows += $this->aTbcursoversao->save($con);
				}
				$this->setTbcursoversao($this->aTbcursoversao);
			}

			if ($this->aTbtipoingresso !== null) {
				if ($this->aTbtipoingresso->isModified() || $this->aTbtipoingresso->isNew()) {
					$affectedRows += $this->aTbtipoingresso->save($con);
				}
				$this->setTbtipoingresso($this->aTbtipoingresso);
			}

			if ($this->aTbalunosituacao !== null) {
				if ($this->aTbalunosituacao->isModified() || $this->aTbalunosituacao->isNew()) {
					$affectedRows += $this->aTbalunosituacao->save($con);
				}
				$this->setTbalunosituacao($this->aTbalunosituacao);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbloadalunoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += TbloadalunoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbcursoversao !== null) {
				if (!$this->aTbcursoversao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcursoversao->getValidationFailures());
				}
			}

			if ($this->aTbtipoingresso !== null) {
				if (!$this->aTbtipoingresso->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbtipoingresso->getValidationFailures());
				}
			}

			if ($this->aTbalunosituacao !== null) {
				if (!$this->aTbalunosituacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbalunosituacao->getValidationFailures());
				}
			}


			if (($retval = TbloadalunoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbloadalunoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getMatricula();
				break;
			case 1:
				return $this->getNome();
				break;
			case 2:
				return $this->getSexo();
				break;
			case 3:
				return $this->getRg();
				break;
			case 4:
				return $this->getRgOrgExped();
				break;
			case 5:
				return $this->getCpf();
				break;
			case 6:
				return $this->getIdVersaoCurso();
				break;
			case 7:
				return $this->getIdTipoIngresso();
				break;
			case 8:
				return $this->getIdSituacao();
				break;
			case 9:
				return $this->getClassificacao();
				break;
			case 10:
				return $this->getOpcao();
				break;
			case 11:
				return $this->getProcesso();
				break;
			case 12:
				return $this->getOpIngresso();
				break;
			case 13:
				return $this->getCreatedAt();
				break;
			case 14:
				return $this->getUpdatedAt();
				break;
			case 15:
				return $this->getCreatedBy();
				break;
			case 16:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbloadalunoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getMatricula(),
			$keys[1] => $this->getNome(),
			$keys[2] => $this->getSexo(),
			$keys[3] => $this->getRg(),
			$keys[4] => $this->getRgOrgExped(),
			$keys[5] => $this->getCpf(),
			$keys[6] => $this->getIdVersaoCurso(),
			$keys[7] => $this->getIdTipoIngresso(),
			$keys[8] => $this->getIdSituacao(),
			$keys[9] => $this->getClassificacao(),
			$keys[10] => $this->getOpcao(),
			$keys[11] => $this->getProcesso(),
			$keys[12] => $this->getOpIngresso(),
			$keys[13] => $this->getCreatedAt(),
			$keys[14] => $this->getUpdatedAt(),
			$keys[15] => $this->getCreatedBy(),
			$keys[16] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbloadalunoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setMatricula($value);
				break;
			case 1:
				$this->setNome($value);
				break;
			case 2:
				$this->setSexo($value);
				break;
			case 3:
				$this->setRg($value);
				break;
			case 4:
				$this->setRgOrgExped($value);
				break;
			case 5:
				$this->setCpf($value);
				break;
			case 6:
				$this->setIdVersaoCurso($value);
				break;
			case 7:
				$this->setIdTipoIngresso($value);
				break;
			case 8:
				$this->setIdSituacao($value);
				break;
			case 9:
				$this->setClassificacao($value);
				break;
			case 10:
				$this->setOpcao($value);
				break;
			case 11:
				$this->setProcesso($value);
				break;
			case 12:
				$this->setOpIngresso($value);
				break;
			case 13:
				$this->setCreatedAt($value);
				break;
			case 14:
				$this->setUpdatedAt($value);
				break;
			case 15:
				$this->setCreatedBy($value);
				break;
			case 16:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbloadalunoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setMatricula($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNome($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSexo($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRg($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRgOrgExped($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCpf($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIdVersaoCurso($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdTipoIngresso($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIdSituacao($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setClassificacao($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setOpcao($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setProcesso($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOpIngresso($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCreatedAt($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUpdatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCreatedBy($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setUpdatedBy($arr[$keys[16]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbloadalunoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbloadalunoPeer::MATRICULA)) $criteria->add(TbloadalunoPeer::MATRICULA, $this->matricula);
		if ($this->isColumnModified(TbloadalunoPeer::NOME)) $criteria->add(TbloadalunoPeer::NOME, $this->nome);
		if ($this->isColumnModified(TbloadalunoPeer::SEXO)) $criteria->add(TbloadalunoPeer::SEXO, $this->sexo);
		if ($this->isColumnModified(TbloadalunoPeer::RG)) $criteria->add(TbloadalunoPeer::RG, $this->rg);
		if ($this->isColumnModified(TbloadalunoPeer::RG_ORG_EXPED)) $criteria->add(TbloadalunoPeer::RG_ORG_EXPED, $this->rg_org_exped);
		if ($this->isColumnModified(TbloadalunoPeer::CPF)) $criteria->add(TbloadalunoPeer::CPF, $this->cpf);
		if ($this->isColumnModified(TbloadalunoPeer::ID_VERSAO_CURSO)) $criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);
		if ($this->isColumnModified(TbloadalunoPeer::ID_TIPO_INGRESSO)) $criteria->add(TbloadalunoPeer::ID_TIPO_INGRESSO, $this->id_tipo_ingresso);
		if ($this->isColumnModified(TbloadalunoPeer::ID_SITUACAO)) $criteria->add(TbloadalunoPeer::ID_SITUACAO, $this->id_situacao);
		if ($this->isColumnModified(TbloadalunoPeer::CLASSIFICACAO)) $criteria->add(TbloadalunoPeer::CLASSIFICACAO, $this->classificacao);
		if ($this->isColumnModified(TbloadalunoPeer::OPCAO)) $criteria->add(TbloadalunoPeer::OPCAO, $this->opcao);
		if ($this->isColumnModified(TbloadalunoPeer::PROCESSO)) $criteria->add(TbloadalunoPeer::PROCESSO, $this->processo);
		if ($this->isColumnModified(TbloadalunoPeer::OP_INGRESSO)) $criteria->add(TbloadalunoPeer::OP_INGRESSO, $this->op_ingresso);
		if ($this->isColumnModified(TbloadalunoPeer::CREATED_AT)) $criteria->add(TbloadalunoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbloadalunoPeer::UPDATED_AT)) $criteria->add(TbloadalunoPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbloadalunoPeer::CREATED_BY)) $criteria->add(TbloadalunoPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbloadalunoPeer::UPDATED_BY)) $criteria->add(TbloadalunoPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbloadalunoPeer::DATABASE_NAME);

		$criteria->add(TbloadalunoPeer::MATRICULA, $this->matricula);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getMatricula();
	}

	/**
	 * Generic method to set the primary key (matricula column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setMatricula($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tbloadaluno (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMatricula($this->matricula);

		$copyObj->setNome($this->nome);

		$copyObj->setSexo($this->sexo);

		$copyObj->setRg($this->rg);

		$copyObj->setRgOrgExped($this->rg_org_exped);

		$copyObj->setCpf($this->cpf);

		$copyObj->setIdVersaoCurso($this->id_versao_curso);

		$copyObj->setIdTipoIngresso($this->id_tipo_ingresso);

		$copyObj->setIdSituacao($this->id_situacao);

		$copyObj->setClassificacao($this->classificacao);

		$copyObj->setOpcao($this->opcao);

		$copyObj->setProcesso($this->processo);

		$copyObj->setOpIngresso($this->op_ingresso);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tbloadaluno Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbloadalunoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbloadalunoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbcursoversao object.
	 *
	 * @param      Tbcursoversao $v
	 * @return     Tbloadaluno The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcursoversao(Tbcursoversao $v = null)
	{
		if ($v === null) {
			$this->setIdVersaoCurso(NULL);
		} else {
			$this->setIdVersaoCurso($v->getIdVersaoCurso());
		}

		$this->aTbcursoversao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcursoversao object, it will not be re-added.
		if ($v !== null) {
			$v->addTbloadaluno($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcursoversao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcursoversao The associated Tbcursoversao object.
	 * @throws     PropelException
	 */
	public function getTbcursoversao(PropelPDO $con = null)
	{
		if ($this->aTbcursoversao === null && ($this->id_versao_curso !== null)) {
			$this->aTbcursoversao = TbcursoversaoPeer::retrieveByPk($this->id_versao_curso);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcursoversao->addTbloadalunos($this);
			 */
		}
		return $this->aTbcursoversao;
	}

	/**
	 * Declares an association between this object and a Tbtipoingresso object.
	 *
	 * @param      Tbtipoingresso $v
	 * @return     Tbloadaluno The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbtipoingresso(Tbtipoingresso $v = null)
	{
		if ($v === null) {
			$this->setIdTipoIngresso(NULL);
		} else {
			$this->setIdTipoIngresso($v->getIdTipoIngresso());
		}

		$this->aTbtipoingresso = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbtipoingresso object, it will not be re-added.
		if ($v !== null) {
			$v->addTbloadaluno($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbtipoingresso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbtipoingresso The associated Tbtipoingresso object.
	 * @throws     PropelException
	 */
	public function getTbtipoingresso(PropelPDO $con = null)
	{
		if ($this->aTbtipoingresso === null && ($this->id_tipo_ingresso !== null)) {
			$this->aTbtipoingresso = TbtipoingressoPeer::retrieveByPk($this->id_tipo_ingresso);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbtipoingresso->addTbloadalunos($this);
			 */
		}
		return $this->aTbtipoingresso;
	}

	/**
	 * Declares an association between this object and a Tbalunosituacao object.
	 *
	 * @param      Tbalunosituacao $v
	 * @return     Tbloadaluno The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbalunosituacao(Tbalunosituacao $v = null)
	{
		if ($v === null) {
			$this->setIdSituacao(NULL);
		} else {
			$this->setIdSituacao($v->getIdSituacao());
		}

		$this->aTbalunosituacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbalunosituacao object, it will not be re-added.
		if ($v !== null) {
			$v->addTbloadaluno($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbalunosituacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbalunosituacao The associated Tbalunosituacao object.
	 * @throws     PropelException
	 */
	public function getTbalunosituacao(PropelPDO $con = null)
	{
		if ($this->aTbalunosituacao === null && ($this->id_situacao !== null)) {
			$this->aTbalunosituacao = TbalunosituacaoPeer::retrieveByPk($this->id_situacao);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbalunosituacao->addTbloadalunos($this);
			 */
		}
		return $this->aTbalunosituacao;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aTbcursoversao = null;
			$this->aTbtipoingresso = null;
			$this->aTbalunosituacao = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTbloadaluno:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTbloadaluno::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTbloadaluno
