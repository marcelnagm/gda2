<?php


/**
 * Base class that represents a query for the 'tbcampus' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:38 2013
 *
 * @method TbcampusQuery orderByIdCampus($order = Criteria::ASC) Order by the id_campus column
 * @method TbcampusQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbcampusQuery orderByIdCidade($order = Criteria::ASC) Order by the id_cidade column
 * @method TbcampusQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbcampusQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbcampusQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbcampusQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbcampusQuery groupByIdCampus() Group by the id_campus column
 * @method TbcampusQuery groupByDescricao() Group by the descricao column
 * @method TbcampusQuery groupByIdCidade() Group by the id_cidade column
 * @method TbcampusQuery groupByCreatedAt() Group by the created_at column
 * @method TbcampusQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbcampusQuery groupByCreatedBy() Group by the created_by column
 * @method TbcampusQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbcampusQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbcampusQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbcampusQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbcampusQuery leftJoinTbcidade($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcidade relation
 * @method TbcampusQuery rightJoinTbcidade($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcidade relation
 * @method TbcampusQuery innerJoinTbcidade($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcidade relation
 *
 * @method TbcampusQuery leftJoinTbcursoversao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbcursoversao relation
 * @method TbcampusQuery rightJoinTbcursoversao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbcursoversao relation
 * @method TbcampusQuery innerJoinTbcursoversao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbcursoversao relation
 *
 * @method TbcampusQuery leftJoinTbsala($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbsala relation
 * @method TbcampusQuery rightJoinTbsala($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbsala relation
 * @method TbcampusQuery innerJoinTbsala($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbsala relation
 *
 * @method Tbcampus findOne(PropelPDO $con = null) Return the first Tbcampus matching the query
 * @method Tbcampus findOneOrCreate(PropelPDO $con = null) Return the first Tbcampus matching the query, or a new Tbcampus object populated from the query conditions when no match is found
 *
 * @method Tbcampus findOneByIdCampus(int $id_campus) Return the first Tbcampus filtered by the id_campus column
 * @method Tbcampus findOneByDescricao(string $descricao) Return the first Tbcampus filtered by the descricao column
 * @method Tbcampus findOneByIdCidade(string $id_cidade) Return the first Tbcampus filtered by the id_cidade column
 * @method Tbcampus findOneByCreatedAt(string $created_at) Return the first Tbcampus filtered by the created_at column
 * @method Tbcampus findOneByUpdatedAt(string $updated_at) Return the first Tbcampus filtered by the updated_at column
 * @method Tbcampus findOneByCreatedBy(string $created_by) Return the first Tbcampus filtered by the created_by column
 * @method Tbcampus findOneByUpdatedBy(string $updated_by) Return the first Tbcampus filtered by the updated_by column
 *
 * @method array findByIdCampus(int $id_campus) Return Tbcampus objects filtered by the id_campus column
 * @method array findByDescricao(string $descricao) Return Tbcampus objects filtered by the descricao column
 * @method array findByIdCidade(string $id_cidade) Return Tbcampus objects filtered by the id_cidade column
 * @method array findByCreatedAt(string $created_at) Return Tbcampus objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbcampus objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbcampus objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbcampus objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbcampusQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbcampusQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbcampus', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbcampusQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbcampusQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbcampusQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbcampusQuery) {
            return $criteria;
        }
        $query = new TbcampusQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbcampus|Tbcampus[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbcampusPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbcampusPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbcampus A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_CAMPUS, DESCRICAO, ID_CIDADE, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbcampus WHERE ID_CAMPUS = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbcampus();
            $obj->hydrate($row);
            TbcampusPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbcampus|Tbcampus[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbcampus[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbcampusPeer::ID_CAMPUS, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbcampusPeer::ID_CAMPUS, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_campus column
     *
     * Example usage:
     * <code>
     * $query->filterByIdCampus(1234); // WHERE id_campus = 1234
     * $query->filterByIdCampus(array(12, 34)); // WHERE id_campus IN (12, 34)
     * $query->filterByIdCampus(array('min' => 12)); // WHERE id_campus > 12
     * </code>
     *
     * @param     mixed $idCampus The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByIdCampus($idCampus = null, $comparison = null)
    {
        if (is_array($idCampus) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbcampusPeer::ID_CAMPUS, $idCampus, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcampusPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the id_cidade column
     *
     * Example usage:
     * <code>
     * $query->filterByIdCidade('fooValue');   // WHERE id_cidade = 'fooValue'
     * $query->filterByIdCidade('%fooValue%'); // WHERE id_cidade LIKE '%fooValue%'
     * </code>
     *
     * @param     string $idCidade The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByIdCidade($idCidade = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($idCidade)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $idCidade)) {
                $idCidade = str_replace('*', '%', $idCidade);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcampusPeer::ID_CIDADE, $idCidade, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbcampusPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbcampusPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcampusPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbcampusPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbcampusPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbcampusPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcampusPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbcampusPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbcidade object
     *
     * @param   Tbcidade|PropelObjectCollection $tbcidade The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcampusQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcidade($tbcidade, $comparison = null)
    {
        if ($tbcidade instanceof Tbcidade) {
            return $this
                ->addUsingAlias(TbcampusPeer::ID_CIDADE, $tbcidade->getIdCidade(), $comparison);
        } elseif ($tbcidade instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbcampusPeer::ID_CIDADE, $tbcidade->toKeyValue('PrimaryKey', 'IdCidade'), $comparison);
        } else {
            throw new PropelException('filterByTbcidade() only accepts arguments of type Tbcidade or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcidade relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function joinTbcidade($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcidade');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcidade');
        }

        return $this;
    }

    /**
     * Use the Tbcidade relation Tbcidade object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcidadeQuery A secondary query class using the current class as primary query
     */
    public function useTbcidadeQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcidade($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcidade', 'TbcidadeQuery');
    }

    /**
     * Filter the query by a related Tbcursoversao object
     *
     * @param   Tbcursoversao|PropelObjectCollection $tbcursoversao  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcampusQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcursoversao($tbcursoversao, $comparison = null)
    {
        if ($tbcursoversao instanceof Tbcursoversao) {
            return $this
                ->addUsingAlias(TbcampusPeer::ID_CAMPUS, $tbcursoversao->getIdCampus(), $comparison);
        } elseif ($tbcursoversao instanceof PropelObjectCollection) {
            return $this
                ->useTbcursoversaoQuery()
                ->filterByPrimaryKeys($tbcursoversao->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbcursoversao() only accepts arguments of type Tbcursoversao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbcursoversao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function joinTbcursoversao($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbcursoversao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbcursoversao');
        }

        return $this;
    }

    /**
     * Use the Tbcursoversao relation Tbcursoversao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursoversaoQuery A secondary query class using the current class as primary query
     */
    public function useTbcursoversaoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcursoversao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbcursoversao', 'TbcursoversaoQuery');
    }

    /**
     * Filter the query by a related Tbsala object
     *
     * @param   Tbsala|PropelObjectCollection $tbsala  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbcampusQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbsala($tbsala, $comparison = null)
    {
        if ($tbsala instanceof Tbsala) {
            return $this
                ->addUsingAlias(TbcampusPeer::ID_CAMPUS, $tbsala->getIdCampus(), $comparison);
        } elseif ($tbsala instanceof PropelObjectCollection) {
            return $this
                ->useTbsalaQuery()
                ->filterByPrimaryKeys($tbsala->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbsala() only accepts arguments of type Tbsala or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbsala relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function joinTbsala($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbsala');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbsala');
        }

        return $this;
    }

    /**
     * Use the Tbsala relation Tbsala object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbsalaQuery A secondary query class using the current class as primary query
     */
    public function useTbsalaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbsala($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbsala', 'TbsalaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbcampus $tbcampus Object to remove from the list of results
     *
     * @return TbcampusQuery The current query, for fluid interface
     */
    public function prune($tbcampus = null)
    {
        if ($tbcampus) {
            $this->addUsingAlias(TbcampusPeer::ID_CAMPUS, $tbcampus->getIdCampus(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
