<?php


/**
 * Base class that represents a query for the 'censo2009' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:40 2013
 *
 * @method Censo2009Query orderByAlunoC1($order = Criteria::ASC) Order by the aluno_c1 column
 * @method Censo2009Query orderByAlunoC2($order = Criteria::ASC) Order by the aluno_c2 column
 * @method Censo2009Query orderByAlunoC3($order = Criteria::ASC) Order by the aluno_c3 column
 * @method Censo2009Query orderByAlunoC4Nome($order = Criteria::ASC) Order by the aluno_c4_nome column
 * @method Censo2009Query orderByAlunoC5Cpf($order = Criteria::ASC) Order by the aluno_c5_cpf column
 * @method Censo2009Query orderByAlunoC6DocEstrangeiro($order = Criteria::ASC) Order by the aluno_c6_doc_estrangeiro column
 * @method Censo2009Query orderByAlunoC7Nascimento($order = Criteria::ASC) Order by the aluno_c7_nascimento column
 * @method Censo2009Query orderByAlunoC8Sexo($order = Criteria::ASC) Order by the aluno_c8_sexo column
 * @method Censo2009Query orderByAlunoC9CorRaca($order = Criteria::ASC) Order by the aluno_c9_cor_raca column
 * @method Censo2009Query orderByAlunoC10Mae($order = Criteria::ASC) Order by the aluno_c10_mae column
 * @method Censo2009Query orderByAlunoC11Nacionalidade($order = Criteria::ASC) Order by the aluno_c11_nacionalidade column
 * @method Censo2009Query orderByAlunoC12UfNascimento($order = Criteria::ASC) Order by the aluno_c12_uf_nascimento column
 * @method Censo2009Query orderByAlunoC13CidadeNascimento($order = Criteria::ASC) Order by the aluno_c13_cidade_nascimento column
 * @method Censo2009Query orderByAlunoC14PaisOrigem($order = Criteria::ASC) Order by the aluno_c14_pais_origem column
 * @method Censo2009Query orderByAlunoC15Deficiencia($order = Criteria::ASC) Order by the aluno_c15_deficiencia column
 * @method Censo2009Query orderByAlunoC16DefCegueria($order = Criteria::ASC) Order by the aluno_c16_def_cegueria column
 * @method Censo2009Query orderByAlunoC17DefBaixaVisao($order = Criteria::ASC) Order by the aluno_c17_def_baixa_visao column
 * @method Censo2009Query orderByAlunoC18DefSurdez($order = Criteria::ASC) Order by the aluno_c18_def_surdez column
 * @method Censo2009Query orderByAlunoC19DefAuditiva($order = Criteria::ASC) Order by the aluno_c19_def_auditiva column
 * @method Censo2009Query orderByAlunoC20DefFisica($order = Criteria::ASC) Order by the aluno_c20_def_fisica column
 * @method Censo2009Query orderByAlunoC21DefSurdocegueira($order = Criteria::ASC) Order by the aluno_c21_def_surdocegueira column
 * @method Censo2009Query orderByAlunoC22DefMultipla($order = Criteria::ASC) Order by the aluno_c22_def_multipla column
 * @method Censo2009Query orderByAlunoC23DefMental($order = Criteria::ASC) Order by the aluno_c23_def_mental column
 * @method Censo2009Query orderByCursoC1TipoReg2($order = Criteria::ASC) Order by the curso_c1_tipo_reg2 column
 * @method Censo2009Query orderByCursoC2IdInepCurso($order = Criteria::ASC) Order by the curso_c2_id_inep_curso column
 * @method Censo2009Query orderByCursoC3CodPoloInep($order = Criteria::ASC) Order by the curso_c3_cod_polo_inep column
 * @method Censo2009Query orderByCursoC4TurnoAluno($order = Criteria::ASC) Order by the curso_c4_turno_aluno column
 * @method Censo2009Query orderByCursoC5SituacaoVinculo($order = Criteria::ASC) Order by the curso_c5_situacao_vinculo column
 * @method Censo2009Query orderByCursoC6DataIngresso($order = Criteria::ASC) Order by the curso_c6_data_ingresso column
 * @method Censo2009Query orderByCursoC7AlunoPublica($order = Criteria::ASC) Order by the curso_c7_aluno_publica column
 * @method Censo2009Query orderByCursoC8FormaIngressoSelecaoVestibular($order = Criteria::ASC) Order by the curso_c8_forma_ingresso_selecao_vestibular column
 * @method Censo2009Query orderByCursoC9FormaIngressoSelecaoEnem($order = Criteria::ASC) Order by the curso_c9_forma_ingresso_selecao_enem column
 * @method Censo2009Query orderByCursoC10FormaIngressoSelecaoOutros($order = Criteria::ASC) Order by the curso_c10_forma_ingresso_selecao_outros column
 * @method Censo2009Query orderByCursoC11FormaIngressoSelecaoPecg($order = Criteria::ASC) Order by the curso_c11_forma_ingresso_selecao_pecg column
 * @method Censo2009Query orderByCursoC12FormaIngressoOutras($order = Criteria::ASC) Order by the curso_c12_forma_ingresso_outras column
 * @method Censo2009Query orderByCursoC13ProgramaReservaVagas($order = Criteria::ASC) Order by the curso_c13_programa_reserva_vagas column
 * @method Censo2009Query orderByCursoC14ProgramaReservaVagas($order = Criteria::ASC) Order by the curso_c14_programa_reserva_vagas column
 * @method Censo2009Query orderByCursoC15ProgramaReservaVagas($order = Criteria::ASC) Order by the curso_c15_programa_reserva_vagas column
 * @method Censo2009Query orderByCursoC16ProgramaReservaVagas($order = Criteria::ASC) Order by the curso_c16_programa_reserva_vagas column
 * @method Censo2009Query orderByCursoC17ProgramaReservaVagas($order = Criteria::ASC) Order by the curso_c17_programa_reserva_vagas column
 * @method Censo2009Query orderByCursoC18ProgramaReservaVagas($order = Criteria::ASC) Order by the curso_c18_programa_reserva_vagas column
 * @method Censo2009Query orderByCursoC19FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c19_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC20FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c20_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC21FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c21_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC22FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c22_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC23FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c23_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC24FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c24_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC25FinanciamentoEstudantil($order = Criteria::ASC) Order by the curso_c25_financiamento_estudantil column
 * @method Censo2009Query orderByCursoC26FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c26_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC27FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c27_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC28FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c28_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC29FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c29_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC30FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c30_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC31FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c31_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC32FinanciamentoEstudantilNReemb($order = Criteria::ASC) Order by the curso_c32_financiamento_estudantil_n_reemb column
 * @method Censo2009Query orderByCursoC33ApoioSocial($order = Criteria::ASC) Order by the curso_c33_apoio_social column
 * @method Censo2009Query orderByCursoC34TipoApoioSocial($order = Criteria::ASC) Order by the curso_c34_tipo_apoio_social column
 * @method Censo2009Query orderByCursoC35TipoApoioSocial($order = Criteria::ASC) Order by the curso_c35_tipo_apoio_social column
 * @method Censo2009Query orderByCursoC36TipoApoioSocial($order = Criteria::ASC) Order by the curso_c36_tipo_apoio_social column
 * @method Censo2009Query orderByCursoC37TipoApoioSocial($order = Criteria::ASC) Order by the curso_c37_tipo_apoio_social column
 * @method Censo2009Query orderByCursoC38TipoApoioSocial($order = Criteria::ASC) Order by the curso_c38_tipo_apoio_social column
 * @method Censo2009Query orderByCursoC39TipoApoioSocial($order = Criteria::ASC) Order by the curso_c39_tipo_apoio_social column
 * @method Censo2009Query orderByCursoC40AtividadeComplementar($order = Criteria::ASC) Order by the curso_c40_atividade_complementar column
 * @method Censo2009Query orderByCursoC41AtividadeComplementar($order = Criteria::ASC) Order by the curso_c41_atividade_complementar column
 * @method Censo2009Query orderByCursoC42Bolsa($order = Criteria::ASC) Order by the curso_c42_bolsa column
 * @method Censo2009Query orderByCursoC43AtividadeComplementar($order = Criteria::ASC) Order by the curso_c43_atividade_complementar column
 * @method Censo2009Query orderByCursoC44Bolsa($order = Criteria::ASC) Order by the curso_c44_bolsa column
 * @method Censo2009Query orderByCursoC45AtividadeComplementar($order = Criteria::ASC) Order by the curso_c45_atividade_complementar column
 * @method Censo2009Query orderByCursoC46Bolsa($order = Criteria::ASC) Order by the curso_c46_bolsa column
 * @method Censo2009Query orderByCursoC47AtividadeComplementar($order = Criteria::ASC) Order by the curso_c47_atividade_complementar column
 * @method Censo2009Query orderByCursoC48Bolsa($order = Criteria::ASC) Order by the curso_c48_bolsa column
 * @method Censo2009Query orderBycursoC49SemestreConclusao($order = Criteria::ASC) Order by the curso_c49_semestre_conclusao column
 * @method Censo2009Query orderBycursoC50AlunoParfor($order = Criteria::ASC) Order by the curso_c50_aluno_parfor column
 * @method Censo2009Query orderByExportado($order = Criteria::ASC) Order by the exportado column
 * @method Censo2009Query orderById($order = Criteria::ASC) Order by the id column
 *
 * @method Censo2009Query groupByAlunoC1() Group by the aluno_c1 column
 * @method Censo2009Query groupByAlunoC2() Group by the aluno_c2 column
 * @method Censo2009Query groupByAlunoC3() Group by the aluno_c3 column
 * @method Censo2009Query groupByAlunoC4Nome() Group by the aluno_c4_nome column
 * @method Censo2009Query groupByAlunoC5Cpf() Group by the aluno_c5_cpf column
 * @method Censo2009Query groupByAlunoC6DocEstrangeiro() Group by the aluno_c6_doc_estrangeiro column
 * @method Censo2009Query groupByAlunoC7Nascimento() Group by the aluno_c7_nascimento column
 * @method Censo2009Query groupByAlunoC8Sexo() Group by the aluno_c8_sexo column
 * @method Censo2009Query groupByAlunoC9CorRaca() Group by the aluno_c9_cor_raca column
 * @method Censo2009Query groupByAlunoC10Mae() Group by the aluno_c10_mae column
 * @method Censo2009Query groupByAlunoC11Nacionalidade() Group by the aluno_c11_nacionalidade column
 * @method Censo2009Query groupByAlunoC12UfNascimento() Group by the aluno_c12_uf_nascimento column
 * @method Censo2009Query groupByAlunoC13CidadeNascimento() Group by the aluno_c13_cidade_nascimento column
 * @method Censo2009Query groupByAlunoC14PaisOrigem() Group by the aluno_c14_pais_origem column
 * @method Censo2009Query groupByAlunoC15Deficiencia() Group by the aluno_c15_deficiencia column
 * @method Censo2009Query groupByAlunoC16DefCegueria() Group by the aluno_c16_def_cegueria column
 * @method Censo2009Query groupByAlunoC17DefBaixaVisao() Group by the aluno_c17_def_baixa_visao column
 * @method Censo2009Query groupByAlunoC18DefSurdez() Group by the aluno_c18_def_surdez column
 * @method Censo2009Query groupByAlunoC19DefAuditiva() Group by the aluno_c19_def_auditiva column
 * @method Censo2009Query groupByAlunoC20DefFisica() Group by the aluno_c20_def_fisica column
 * @method Censo2009Query groupByAlunoC21DefSurdocegueira() Group by the aluno_c21_def_surdocegueira column
 * @method Censo2009Query groupByAlunoC22DefMultipla() Group by the aluno_c22_def_multipla column
 * @method Censo2009Query groupByAlunoC23DefMental() Group by the aluno_c23_def_mental column
 * @method Censo2009Query groupByCursoC1TipoReg2() Group by the curso_c1_tipo_reg2 column
 * @method Censo2009Query groupByCursoC2IdInepCurso() Group by the curso_c2_id_inep_curso column
 * @method Censo2009Query groupByCursoC3CodPoloInep() Group by the curso_c3_cod_polo_inep column
 * @method Censo2009Query groupByCursoC4TurnoAluno() Group by the curso_c4_turno_aluno column
 * @method Censo2009Query groupByCursoC5SituacaoVinculo() Group by the curso_c5_situacao_vinculo column
 * @method Censo2009Query groupByCursoC6DataIngresso() Group by the curso_c6_data_ingresso column
 * @method Censo2009Query groupByCursoC7AlunoPublica() Group by the curso_c7_aluno_publica column
 * @method Censo2009Query groupByCursoC8FormaIngressoSelecaoVestibular() Group by the curso_c8_forma_ingresso_selecao_vestibular column
 * @method Censo2009Query groupByCursoC9FormaIngressoSelecaoEnem() Group by the curso_c9_forma_ingresso_selecao_enem column
 * @method Censo2009Query groupByCursoC10FormaIngressoSelecaoOutros() Group by the curso_c10_forma_ingresso_selecao_outros column
 * @method Censo2009Query groupByCursoC11FormaIngressoSelecaoPecg() Group by the curso_c11_forma_ingresso_selecao_pecg column
 * @method Censo2009Query groupByCursoC12FormaIngressoOutras() Group by the curso_c12_forma_ingresso_outras column
 * @method Censo2009Query groupByCursoC13ProgramaReservaVagas() Group by the curso_c13_programa_reserva_vagas column
 * @method Censo2009Query groupByCursoC14ProgramaReservaVagas() Group by the curso_c14_programa_reserva_vagas column
 * @method Censo2009Query groupByCursoC15ProgramaReservaVagas() Group by the curso_c15_programa_reserva_vagas column
 * @method Censo2009Query groupByCursoC16ProgramaReservaVagas() Group by the curso_c16_programa_reserva_vagas column
 * @method Censo2009Query groupByCursoC17ProgramaReservaVagas() Group by the curso_c17_programa_reserva_vagas column
 * @method Censo2009Query groupByCursoC18ProgramaReservaVagas() Group by the curso_c18_programa_reserva_vagas column
 * @method Censo2009Query groupByCursoC19FinanciamentoEstudantil() Group by the curso_c19_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC20FinanciamentoEstudantil() Group by the curso_c20_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC21FinanciamentoEstudantil() Group by the curso_c21_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC22FinanciamentoEstudantil() Group by the curso_c22_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC23FinanciamentoEstudantil() Group by the curso_c23_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC24FinanciamentoEstudantil() Group by the curso_c24_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC25FinanciamentoEstudantil() Group by the curso_c25_financiamento_estudantil column
 * @method Censo2009Query groupByCursoC26FinanciamentoEstudantilNReemb() Group by the curso_c26_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC27FinanciamentoEstudantilNReemb() Group by the curso_c27_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC28FinanciamentoEstudantilNReemb() Group by the curso_c28_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC29FinanciamentoEstudantilNReemb() Group by the curso_c29_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC30FinanciamentoEstudantilNReemb() Group by the curso_c30_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC31FinanciamentoEstudantilNReemb() Group by the curso_c31_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC32FinanciamentoEstudantilNReemb() Group by the curso_c32_financiamento_estudantil_n_reemb column
 * @method Censo2009Query groupByCursoC33ApoioSocial() Group by the curso_c33_apoio_social column
 * @method Censo2009Query groupByCursoC34TipoApoioSocial() Group by the curso_c34_tipo_apoio_social column
 * @method Censo2009Query groupByCursoC35TipoApoioSocial() Group by the curso_c35_tipo_apoio_social column
 * @method Censo2009Query groupByCursoC36TipoApoioSocial() Group by the curso_c36_tipo_apoio_social column
 * @method Censo2009Query groupByCursoC37TipoApoioSocial() Group by the curso_c37_tipo_apoio_social column
 * @method Censo2009Query groupByCursoC38TipoApoioSocial() Group by the curso_c38_tipo_apoio_social column
 * @method Censo2009Query groupByCursoC39TipoApoioSocial() Group by the curso_c39_tipo_apoio_social column
 * @method Censo2009Query groupByCursoC40AtividadeComplementar() Group by the curso_c40_atividade_complementar column
 * @method Censo2009Query groupByCursoC41AtividadeComplementar() Group by the curso_c41_atividade_complementar column
 * @method Censo2009Query groupByCursoC42Bolsa() Group by the curso_c42_bolsa column
 * @method Censo2009Query groupByCursoC43AtividadeComplementar() Group by the curso_c43_atividade_complementar column
 * @method Censo2009Query groupByCursoC44Bolsa() Group by the curso_c44_bolsa column
 * @method Censo2009Query groupByCursoC45AtividadeComplementar() Group by the curso_c45_atividade_complementar column
 * @method Censo2009Query groupByCursoC46Bolsa() Group by the curso_c46_bolsa column
 * @method Censo2009Query groupByCursoC47AtividadeComplementar() Group by the curso_c47_atividade_complementar column
 * @method Censo2009Query groupByCursoC48Bolsa() Group by the curso_c48_bolsa column
 * @method Censo2009Query groupBycursoC49SemestreConclusao() Group by the curso_c49_semestre_conclusao column
 * @method Censo2009Query groupBycursoC50AlunoParfor() Group by the curso_c50_aluno_parfor column
 * @method Censo2009Query groupByExportado() Group by the exportado column
 * @method Censo2009Query groupById() Group by the id column
 *
 * @method Censo2009Query leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method Censo2009Query rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method Censo2009Query innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method Censo2009 findOne(PropelPDO $con = null) Return the first Censo2009 matching the query
 * @method Censo2009 findOneOrCreate(PropelPDO $con = null) Return the first Censo2009 matching the query, or a new Censo2009 object populated from the query conditions when no match is found
 *
 * @method Censo2009 findOneByAlunoC1(int $aluno_c1) Return the first Censo2009 filtered by the aluno_c1 column
 * @method Censo2009 findOneByAlunoC2(string $aluno_c2) Return the first Censo2009 filtered by the aluno_c2 column
 * @method Censo2009 findOneByAlunoC3(string $aluno_c3) Return the first Censo2009 filtered by the aluno_c3 column
 * @method Censo2009 findOneByAlunoC4Nome(string $aluno_c4_nome) Return the first Censo2009 filtered by the aluno_c4_nome column
 * @method Censo2009 findOneByAlunoC5Cpf(string $aluno_c5_cpf) Return the first Censo2009 filtered by the aluno_c5_cpf column
 * @method Censo2009 findOneByAlunoC6DocEstrangeiro(string $aluno_c6_doc_estrangeiro) Return the first Censo2009 filtered by the aluno_c6_doc_estrangeiro column
 * @method Censo2009 findOneByAlunoC7Nascimento(string $aluno_c7_nascimento) Return the first Censo2009 filtered by the aluno_c7_nascimento column
 * @method Censo2009 findOneByAlunoC8Sexo(int $aluno_c8_sexo) Return the first Censo2009 filtered by the aluno_c8_sexo column
 * @method Censo2009 findOneByAlunoC9CorRaca(int $aluno_c9_cor_raca) Return the first Censo2009 filtered by the aluno_c9_cor_raca column
 * @method Censo2009 findOneByAlunoC10Mae(string $aluno_c10_mae) Return the first Censo2009 filtered by the aluno_c10_mae column
 * @method Censo2009 findOneByAlunoC11Nacionalidade(int $aluno_c11_nacionalidade) Return the first Censo2009 filtered by the aluno_c11_nacionalidade column
 * @method Censo2009 findOneByAlunoC12UfNascimento(string $aluno_c12_uf_nascimento) Return the first Censo2009 filtered by the aluno_c12_uf_nascimento column
 * @method Censo2009 findOneByAlunoC13CidadeNascimento(string $aluno_c13_cidade_nascimento) Return the first Censo2009 filtered by the aluno_c13_cidade_nascimento column
 * @method Censo2009 findOneByAlunoC14PaisOrigem(string $aluno_c14_pais_origem) Return the first Censo2009 filtered by the aluno_c14_pais_origem column
 * @method Censo2009 findOneByAlunoC15Deficiencia(int $aluno_c15_deficiencia) Return the first Censo2009 filtered by the aluno_c15_deficiencia column
 * @method Censo2009 findOneByAlunoC16DefCegueria(string $aluno_c16_def_cegueria) Return the first Censo2009 filtered by the aluno_c16_def_cegueria column
 * @method Censo2009 findOneByAlunoC17DefBaixaVisao(string $aluno_c17_def_baixa_visao) Return the first Censo2009 filtered by the aluno_c17_def_baixa_visao column
 * @method Censo2009 findOneByAlunoC18DefSurdez(string $aluno_c18_def_surdez) Return the first Censo2009 filtered by the aluno_c18_def_surdez column
 * @method Censo2009 findOneByAlunoC19DefAuditiva(string $aluno_c19_def_auditiva) Return the first Censo2009 filtered by the aluno_c19_def_auditiva column
 * @method Censo2009 findOneByAlunoC20DefFisica(string $aluno_c20_def_fisica) Return the first Censo2009 filtered by the aluno_c20_def_fisica column
 * @method Censo2009 findOneByAlunoC21DefSurdocegueira(string $aluno_c21_def_surdocegueira) Return the first Censo2009 filtered by the aluno_c21_def_surdocegueira column
 * @method Censo2009 findOneByAlunoC22DefMultipla(string $aluno_c22_def_multipla) Return the first Censo2009 filtered by the aluno_c22_def_multipla column
 * @method Censo2009 findOneByAlunoC23DefMental(string $aluno_c23_def_mental) Return the first Censo2009 filtered by the aluno_c23_def_mental column
 * @method Censo2009 findOneByCursoC1TipoReg2(int $curso_c1_tipo_reg2) Return the first Censo2009 filtered by the curso_c1_tipo_reg2 column
 * @method Censo2009 findOneByCursoC2IdInepCurso(string $curso_c2_id_inep_curso) Return the first Censo2009 filtered by the curso_c2_id_inep_curso column
 * @method Censo2009 findOneByCursoC3CodPoloInep(string $curso_c3_cod_polo_inep) Return the first Censo2009 filtered by the curso_c3_cod_polo_inep column
 * @method Censo2009 findOneByCursoC4TurnoAluno(string $curso_c4_turno_aluno) Return the first Censo2009 filtered by the curso_c4_turno_aluno column
 * @method Censo2009 findOneByCursoC5SituacaoVinculo(int $curso_c5_situacao_vinculo) Return the first Censo2009 filtered by the curso_c5_situacao_vinculo column
 * @method Censo2009 findOneByCursoC6DataIngresso(string $curso_c6_data_ingresso) Return the first Censo2009 filtered by the curso_c6_data_ingresso column
 * @method Censo2009 findOneByCursoC7AlunoPublica(string $curso_c7_aluno_publica) Return the first Censo2009 filtered by the curso_c7_aluno_publica column
 * @method Censo2009 findOneByCursoC8FormaIngressoSelecaoVestibular(int $curso_c8_forma_ingresso_selecao_vestibular) Return the first Censo2009 filtered by the curso_c8_forma_ingresso_selecao_vestibular column
 * @method Censo2009 findOneByCursoC9FormaIngressoSelecaoEnem(int $curso_c9_forma_ingresso_selecao_enem) Return the first Censo2009 filtered by the curso_c9_forma_ingresso_selecao_enem column
 * @method Censo2009 findOneByCursoC10FormaIngressoSelecaoOutros(int $curso_c10_forma_ingresso_selecao_outros) Return the first Censo2009 filtered by the curso_c10_forma_ingresso_selecao_outros column
 * @method Censo2009 findOneByCursoC11FormaIngressoSelecaoPecg(int $curso_c11_forma_ingresso_selecao_pecg) Return the first Censo2009 filtered by the curso_c11_forma_ingresso_selecao_pecg column
 * @method Censo2009 findOneByCursoC12FormaIngressoOutras(int $curso_c12_forma_ingresso_outras) Return the first Censo2009 filtered by the curso_c12_forma_ingresso_outras column
 * @method Censo2009 findOneByCursoC13ProgramaReservaVagas(int $curso_c13_programa_reserva_vagas) Return the first Censo2009 filtered by the curso_c13_programa_reserva_vagas column
 * @method Censo2009 findOneByCursoC14ProgramaReservaVagas(int $curso_c14_programa_reserva_vagas) Return the first Censo2009 filtered by the curso_c14_programa_reserva_vagas column
 * @method Censo2009 findOneByCursoC15ProgramaReservaVagas(int $curso_c15_programa_reserva_vagas) Return the first Censo2009 filtered by the curso_c15_programa_reserva_vagas column
 * @method Censo2009 findOneByCursoC16ProgramaReservaVagas(int $curso_c16_programa_reserva_vagas) Return the first Censo2009 filtered by the curso_c16_programa_reserva_vagas column
 * @method Censo2009 findOneByCursoC17ProgramaReservaVagas(int $curso_c17_programa_reserva_vagas) Return the first Censo2009 filtered by the curso_c17_programa_reserva_vagas column
 * @method Censo2009 findOneByCursoC18ProgramaReservaVagas(int $curso_c18_programa_reserva_vagas) Return the first Censo2009 filtered by the curso_c18_programa_reserva_vagas column
 * @method Censo2009 findOneByCursoC19FinanciamentoEstudantil(int $curso_c19_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c19_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC20FinanciamentoEstudantil(int $curso_c20_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c20_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC21FinanciamentoEstudantil(int $curso_c21_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c21_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC22FinanciamentoEstudantil(int $curso_c22_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c22_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC23FinanciamentoEstudantil(int $curso_c23_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c23_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC24FinanciamentoEstudantil(int $curso_c24_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c24_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC25FinanciamentoEstudantil(int $curso_c25_financiamento_estudantil) Return the first Censo2009 filtered by the curso_c25_financiamento_estudantil column
 * @method Censo2009 findOneByCursoC26FinanciamentoEstudantilNReemb(int $curso_c26_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c26_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC27FinanciamentoEstudantilNReemb(int $curso_c27_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c27_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC28FinanciamentoEstudantilNReemb(int $curso_c28_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c28_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC29FinanciamentoEstudantilNReemb(int $curso_c29_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c29_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC30FinanciamentoEstudantilNReemb(int $curso_c30_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c30_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC31FinanciamentoEstudantilNReemb(int $curso_c31_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c31_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC32FinanciamentoEstudantilNReemb(int $curso_c32_financiamento_estudantil_n_reemb) Return the first Censo2009 filtered by the curso_c32_financiamento_estudantil_n_reemb column
 * @method Censo2009 findOneByCursoC33ApoioSocial(int $curso_c33_apoio_social) Return the first Censo2009 filtered by the curso_c33_apoio_social column
 * @method Censo2009 findOneByCursoC34TipoApoioSocial(int $curso_c34_tipo_apoio_social) Return the first Censo2009 filtered by the curso_c34_tipo_apoio_social column
 * @method Censo2009 findOneByCursoC35TipoApoioSocial(int $curso_c35_tipo_apoio_social) Return the first Censo2009 filtered by the curso_c35_tipo_apoio_social column
 * @method Censo2009 findOneByCursoC36TipoApoioSocial(int $curso_c36_tipo_apoio_social) Return the first Censo2009 filtered by the curso_c36_tipo_apoio_social column
 * @method Censo2009 findOneByCursoC37TipoApoioSocial(int $curso_c37_tipo_apoio_social) Return the first Censo2009 filtered by the curso_c37_tipo_apoio_social column
 * @method Censo2009 findOneByCursoC38TipoApoioSocial(int $curso_c38_tipo_apoio_social) Return the first Censo2009 filtered by the curso_c38_tipo_apoio_social column
 * @method Censo2009 findOneByCursoC39TipoApoioSocial(int $curso_c39_tipo_apoio_social) Return the first Censo2009 filtered by the curso_c39_tipo_apoio_social column
 * @method Censo2009 findOneByCursoC40AtividadeComplementar(int $curso_c40_atividade_complementar) Return the first Censo2009 filtered by the curso_c40_atividade_complementar column
 * @method Censo2009 findOneByCursoC41AtividadeComplementar(int $curso_c41_atividade_complementar) Return the first Censo2009 filtered by the curso_c41_atividade_complementar column
 * @method Censo2009 findOneByCursoC42Bolsa(int $curso_c42_bolsa) Return the first Censo2009 filtered by the curso_c42_bolsa column
 * @method Censo2009 findOneByCursoC43AtividadeComplementar(int $curso_c43_atividade_complementar) Return the first Censo2009 filtered by the curso_c43_atividade_complementar column
 * @method Censo2009 findOneByCursoC44Bolsa(int $curso_c44_bolsa) Return the first Censo2009 filtered by the curso_c44_bolsa column
 * @method Censo2009 findOneByCursoC45AtividadeComplementar(int $curso_c45_atividade_complementar) Return the first Censo2009 filtered by the curso_c45_atividade_complementar column
 * @method Censo2009 findOneByCursoC46Bolsa(int $curso_c46_bolsa) Return the first Censo2009 filtered by the curso_c46_bolsa column
 * @method Censo2009 findOneByCursoC47AtividadeComplementar(int $curso_c47_atividade_complementar) Return the first Censo2009 filtered by the curso_c47_atividade_complementar column
 * @method Censo2009 findOneByCursoC48Bolsa(int $curso_c48_bolsa) Return the first Censo2009 filtered by the curso_c48_bolsa column
 * @method Censo2009 findOneBycursoC49SemestreConclusao(int $curso_c49_semestre_conclusao) Return the first Censo2009 filtered by the curso_c49_semestre_conclusao column
 * @method Censo2009 findOneBycursoC50AlunoParfor(int $curso_c50_aluno_parfor) Return the first Censo2009 filtered by the curso_c50_aluno_parfor column
 * @method Censo2009 findOneByExportado(boolean $exportado) Return the first Censo2009 filtered by the exportado column
 * @method Censo2009 findOneById(int $id) Return the first Censo2009 filtered by the id column
 *
 * @method array findByAlunoC1(int $aluno_c1) Return Censo2009 objects filtered by the aluno_c1 column
 * @method array findByAlunoC2(string $aluno_c2) Return Censo2009 objects filtered by the aluno_c2 column
 * @method array findByAlunoC3(string $aluno_c3) Return Censo2009 objects filtered by the aluno_c3 column
 * @method array findByAlunoC4Nome(string $aluno_c4_nome) Return Censo2009 objects filtered by the aluno_c4_nome column
 * @method array findByAlunoC5Cpf(string $aluno_c5_cpf) Return Censo2009 objects filtered by the aluno_c5_cpf column
 * @method array findByAlunoC6DocEstrangeiro(string $aluno_c6_doc_estrangeiro) Return Censo2009 objects filtered by the aluno_c6_doc_estrangeiro column
 * @method array findByAlunoC7Nascimento(string $aluno_c7_nascimento) Return Censo2009 objects filtered by the aluno_c7_nascimento column
 * @method array findByAlunoC8Sexo(int $aluno_c8_sexo) Return Censo2009 objects filtered by the aluno_c8_sexo column
 * @method array findByAlunoC9CorRaca(int $aluno_c9_cor_raca) Return Censo2009 objects filtered by the aluno_c9_cor_raca column
 * @method array findByAlunoC10Mae(string $aluno_c10_mae) Return Censo2009 objects filtered by the aluno_c10_mae column
 * @method array findByAlunoC11Nacionalidade(int $aluno_c11_nacionalidade) Return Censo2009 objects filtered by the aluno_c11_nacionalidade column
 * @method array findByAlunoC12UfNascimento(string $aluno_c12_uf_nascimento) Return Censo2009 objects filtered by the aluno_c12_uf_nascimento column
 * @method array findByAlunoC13CidadeNascimento(string $aluno_c13_cidade_nascimento) Return Censo2009 objects filtered by the aluno_c13_cidade_nascimento column
 * @method array findByAlunoC14PaisOrigem(string $aluno_c14_pais_origem) Return Censo2009 objects filtered by the aluno_c14_pais_origem column
 * @method array findByAlunoC15Deficiencia(int $aluno_c15_deficiencia) Return Censo2009 objects filtered by the aluno_c15_deficiencia column
 * @method array findByAlunoC16DefCegueria(string $aluno_c16_def_cegueria) Return Censo2009 objects filtered by the aluno_c16_def_cegueria column
 * @method array findByAlunoC17DefBaixaVisao(string $aluno_c17_def_baixa_visao) Return Censo2009 objects filtered by the aluno_c17_def_baixa_visao column
 * @method array findByAlunoC18DefSurdez(string $aluno_c18_def_surdez) Return Censo2009 objects filtered by the aluno_c18_def_surdez column
 * @method array findByAlunoC19DefAuditiva(string $aluno_c19_def_auditiva) Return Censo2009 objects filtered by the aluno_c19_def_auditiva column
 * @method array findByAlunoC20DefFisica(string $aluno_c20_def_fisica) Return Censo2009 objects filtered by the aluno_c20_def_fisica column
 * @method array findByAlunoC21DefSurdocegueira(string $aluno_c21_def_surdocegueira) Return Censo2009 objects filtered by the aluno_c21_def_surdocegueira column
 * @method array findByAlunoC22DefMultipla(string $aluno_c22_def_multipla) Return Censo2009 objects filtered by the aluno_c22_def_multipla column
 * @method array findByAlunoC23DefMental(string $aluno_c23_def_mental) Return Censo2009 objects filtered by the aluno_c23_def_mental column
 * @method array findByCursoC1TipoReg2(int $curso_c1_tipo_reg2) Return Censo2009 objects filtered by the curso_c1_tipo_reg2 column
 * @method array findByCursoC2IdInepCurso(string $curso_c2_id_inep_curso) Return Censo2009 objects filtered by the curso_c2_id_inep_curso column
 * @method array findByCursoC3CodPoloInep(string $curso_c3_cod_polo_inep) Return Censo2009 objects filtered by the curso_c3_cod_polo_inep column
 * @method array findByCursoC4TurnoAluno(string $curso_c4_turno_aluno) Return Censo2009 objects filtered by the curso_c4_turno_aluno column
 * @method array findByCursoC5SituacaoVinculo(int $curso_c5_situacao_vinculo) Return Censo2009 objects filtered by the curso_c5_situacao_vinculo column
 * @method array findByCursoC6DataIngresso(string $curso_c6_data_ingresso) Return Censo2009 objects filtered by the curso_c6_data_ingresso column
 * @method array findByCursoC7AlunoPublica(string $curso_c7_aluno_publica) Return Censo2009 objects filtered by the curso_c7_aluno_publica column
 * @method array findByCursoC8FormaIngressoSelecaoVestibular(int $curso_c8_forma_ingresso_selecao_vestibular) Return Censo2009 objects filtered by the curso_c8_forma_ingresso_selecao_vestibular column
 * @method array findByCursoC9FormaIngressoSelecaoEnem(int $curso_c9_forma_ingresso_selecao_enem) Return Censo2009 objects filtered by the curso_c9_forma_ingresso_selecao_enem column
 * @method array findByCursoC10FormaIngressoSelecaoOutros(int $curso_c10_forma_ingresso_selecao_outros) Return Censo2009 objects filtered by the curso_c10_forma_ingresso_selecao_outros column
 * @method array findByCursoC11FormaIngressoSelecaoPecg(int $curso_c11_forma_ingresso_selecao_pecg) Return Censo2009 objects filtered by the curso_c11_forma_ingresso_selecao_pecg column
 * @method array findByCursoC12FormaIngressoOutras(int $curso_c12_forma_ingresso_outras) Return Censo2009 objects filtered by the curso_c12_forma_ingresso_outras column
 * @method array findByCursoC13ProgramaReservaVagas(int $curso_c13_programa_reserva_vagas) Return Censo2009 objects filtered by the curso_c13_programa_reserva_vagas column
 * @method array findByCursoC14ProgramaReservaVagas(int $curso_c14_programa_reserva_vagas) Return Censo2009 objects filtered by the curso_c14_programa_reserva_vagas column
 * @method array findByCursoC15ProgramaReservaVagas(int $curso_c15_programa_reserva_vagas) Return Censo2009 objects filtered by the curso_c15_programa_reserva_vagas column
 * @method array findByCursoC16ProgramaReservaVagas(int $curso_c16_programa_reserva_vagas) Return Censo2009 objects filtered by the curso_c16_programa_reserva_vagas column
 * @method array findByCursoC17ProgramaReservaVagas(int $curso_c17_programa_reserva_vagas) Return Censo2009 objects filtered by the curso_c17_programa_reserva_vagas column
 * @method array findByCursoC18ProgramaReservaVagas(int $curso_c18_programa_reserva_vagas) Return Censo2009 objects filtered by the curso_c18_programa_reserva_vagas column
 * @method array findByCursoC19FinanciamentoEstudantil(int $curso_c19_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c19_financiamento_estudantil column
 * @method array findByCursoC20FinanciamentoEstudantil(int $curso_c20_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c20_financiamento_estudantil column
 * @method array findByCursoC21FinanciamentoEstudantil(int $curso_c21_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c21_financiamento_estudantil column
 * @method array findByCursoC22FinanciamentoEstudantil(int $curso_c22_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c22_financiamento_estudantil column
 * @method array findByCursoC23FinanciamentoEstudantil(int $curso_c23_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c23_financiamento_estudantil column
 * @method array findByCursoC24FinanciamentoEstudantil(int $curso_c24_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c24_financiamento_estudantil column
 * @method array findByCursoC25FinanciamentoEstudantil(int $curso_c25_financiamento_estudantil) Return Censo2009 objects filtered by the curso_c25_financiamento_estudantil column
 * @method array findByCursoC26FinanciamentoEstudantilNReemb(int $curso_c26_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c26_financiamento_estudantil_n_reemb column
 * @method array findByCursoC27FinanciamentoEstudantilNReemb(int $curso_c27_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c27_financiamento_estudantil_n_reemb column
 * @method array findByCursoC28FinanciamentoEstudantilNReemb(int $curso_c28_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c28_financiamento_estudantil_n_reemb column
 * @method array findByCursoC29FinanciamentoEstudantilNReemb(int $curso_c29_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c29_financiamento_estudantil_n_reemb column
 * @method array findByCursoC30FinanciamentoEstudantilNReemb(int $curso_c30_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c30_financiamento_estudantil_n_reemb column
 * @method array findByCursoC31FinanciamentoEstudantilNReemb(int $curso_c31_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c31_financiamento_estudantil_n_reemb column
 * @method array findByCursoC32FinanciamentoEstudantilNReemb(int $curso_c32_financiamento_estudantil_n_reemb) Return Censo2009 objects filtered by the curso_c32_financiamento_estudantil_n_reemb column
 * @method array findByCursoC33ApoioSocial(int $curso_c33_apoio_social) Return Censo2009 objects filtered by the curso_c33_apoio_social column
 * @method array findByCursoC34TipoApoioSocial(int $curso_c34_tipo_apoio_social) Return Censo2009 objects filtered by the curso_c34_tipo_apoio_social column
 * @method array findByCursoC35TipoApoioSocial(int $curso_c35_tipo_apoio_social) Return Censo2009 objects filtered by the curso_c35_tipo_apoio_social column
 * @method array findByCursoC36TipoApoioSocial(int $curso_c36_tipo_apoio_social) Return Censo2009 objects filtered by the curso_c36_tipo_apoio_social column
 * @method array findByCursoC37TipoApoioSocial(int $curso_c37_tipo_apoio_social) Return Censo2009 objects filtered by the curso_c37_tipo_apoio_social column
 * @method array findByCursoC38TipoApoioSocial(int $curso_c38_tipo_apoio_social) Return Censo2009 objects filtered by the curso_c38_tipo_apoio_social column
 * @method array findByCursoC39TipoApoioSocial(int $curso_c39_tipo_apoio_social) Return Censo2009 objects filtered by the curso_c39_tipo_apoio_social column
 * @method array findByCursoC40AtividadeComplementar(int $curso_c40_atividade_complementar) Return Censo2009 objects filtered by the curso_c40_atividade_complementar column
 * @method array findByCursoC41AtividadeComplementar(int $curso_c41_atividade_complementar) Return Censo2009 objects filtered by the curso_c41_atividade_complementar column
 * @method array findByCursoC42Bolsa(int $curso_c42_bolsa) Return Censo2009 objects filtered by the curso_c42_bolsa column
 * @method array findByCursoC43AtividadeComplementar(int $curso_c43_atividade_complementar) Return Censo2009 objects filtered by the curso_c43_atividade_complementar column
 * @method array findByCursoC44Bolsa(int $curso_c44_bolsa) Return Censo2009 objects filtered by the curso_c44_bolsa column
 * @method array findByCursoC45AtividadeComplementar(int $curso_c45_atividade_complementar) Return Censo2009 objects filtered by the curso_c45_atividade_complementar column
 * @method array findByCursoC46Bolsa(int $curso_c46_bolsa) Return Censo2009 objects filtered by the curso_c46_bolsa column
 * @method array findByCursoC47AtividadeComplementar(int $curso_c47_atividade_complementar) Return Censo2009 objects filtered by the curso_c47_atividade_complementar column
 * @method array findByCursoC48Bolsa(int $curso_c48_bolsa) Return Censo2009 objects filtered by the curso_c48_bolsa column
 * @method array findBycursoC49SemestreConclusao(int $curso_c49_semestre_conclusao) Return Censo2009 objects filtered by the curso_c49_semestre_conclusao column
 * @method array findBycursoC50AlunoParfor(int $curso_c50_aluno_parfor) Return Censo2009 objects filtered by the curso_c50_aluno_parfor column
 * @method array findByExportado(boolean $exportado) Return Censo2009 objects filtered by the exportado column
 * @method array findById(int $id) Return Censo2009 objects filtered by the id column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseCenso2009Query extends ModelCriteria
{
    /**
     * Initializes internal state of BaseCenso2009Query object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Censo2009', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new Censo2009Query object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     Censo2009Query|Criteria $criteria Optional Criteria to build the query from
     *
     * @return Censo2009Query
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof Censo2009Query) {
            return $criteria;
        }
        $query = new Censo2009Query();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Censo2009|Censo2009[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = Censo2009Peer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Censo2009 A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ALUNO_C1, ALUNO_C2, ALUNO_C3, ALUNO_C4_NOME, ALUNO_C5_CPF, ALUNO_C6_DOC_ESTRANGEIRO, ALUNO_C7_NASCIMENTO, ALUNO_C8_SEXO, ALUNO_C9_COR_RACA, ALUNO_C10_MAE, ALUNO_C11_NACIONALIDADE, ALUNO_C12_UF_NASCIMENTO, ALUNO_C13_CIDADE_NASCIMENTO, ALUNO_C14_PAIS_ORIGEM, ALUNO_C15_DEFICIENCIA, ALUNO_C16_DEF_CEGUERIA, ALUNO_C17_DEF_BAIXA_VISAO, ALUNO_C18_DEF_SURDEZ, ALUNO_C19_DEF_AUDITIVA, ALUNO_C20_DEF_FISICA, ALUNO_C21_DEF_SURDOCEGUEIRA, ALUNO_C22_DEF_MULTIPLA, ALUNO_C23_DEF_MENTAL, CURSO_C1_TIPO_REG2, CURSO_C2_ID_INEP_CURSO, CURSO_C3_COD_POLO_INEP, CURSO_C4_TURNO_ALUNO, CURSO_C5_SITUACAO_VINCULO, CURSO_C6_DATA_INGRESSO, CURSO_C7_ALUNO_PUBLICA, CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR, CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM, CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS, CURSO_C11_FORMA_INGRESSO_SELECAO_PECG, CURSO_C12_FORMA_INGRESSO_OUTRAS, CURSO_C13_PROGRAMA_RESERVA_VAGAS, CURSO_C14_PROGRAMA_RESERVA_VAGAS, CURSO_C15_PROGRAMA_RESERVA_VAGAS, CURSO_C16_PROGRAMA_RESERVA_VAGAS, CURSO_C17_PROGRAMA_RESERVA_VAGAS, CURSO_C18_PROGRAMA_RESERVA_VAGAS, CURSO_C19_FINANCIAMENTO_ESTUDANTIL, CURSO_C20_FINANCIAMENTO_ESTUDANTIL, CURSO_C21_FINANCIAMENTO_ESTUDANTIL, CURSO_C22_FINANCIAMENTO_ESTUDANTIL, CURSO_C23_FINANCIAMENTO_ESTUDANTIL, CURSO_C24_FINANCIAMENTO_ESTUDANTIL, CURSO_C25_FINANCIAMENTO_ESTUDANTIL, CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB, CURSO_C33_APOIO_SOCIAL, CURSO_C34_TIPO_APOIO_SOCIAL, CURSO_C35_TIPO_APOIO_SOCIAL, CURSO_C36_TIPO_APOIO_SOCIAL, CURSO_C37_TIPO_APOIO_SOCIAL, CURSO_C38_TIPO_APOIO_SOCIAL, CURSO_C39_TIPO_APOIO_SOCIAL, CURSO_C40_ATIVIDADE_COMPLEMENTAR, CURSO_C41_ATIVIDADE_COMPLEMENTAR, CURSO_C42_BOLSA, CURSO_C43_ATIVIDADE_COMPLEMENTAR, CURSO_C44_BOLSA, CURSO_C45_ATIVIDADE_COMPLEMENTAR, CURSO_C46_BOLSA, CURSO_C47_ATIVIDADE_COMPLEMENTAR, CURSO_C48_BOLSA, CURSO_C49_SEMESTRE_CONCLUSAO, CURSO_C50_ALUNO_PARFOR, EXPORTADO, ID FROM censo2009 WHERE ID = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Censo2009();
            $obj->hydrate($row);
            Censo2009Peer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Censo2009|Censo2009[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Censo2009[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(Censo2009Peer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(Censo2009Peer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the aluno_c1 column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC1(1234); // WHERE aluno_c1 = 1234
     * $query->filterByAlunoC1(array(12, 34)); // WHERE aluno_c1 IN (12, 34)
     * $query->filterByAlunoC1(array('min' => 12)); // WHERE aluno_c1 > 12
     * </code>
     *
     * @param     mixed $alunoC1 The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC1($alunoC1 = null, $comparison = null)
    {
        if (is_array($alunoC1)) {
            $useMinMax = false;
            if (isset($alunoC1['min'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C1, $alunoC1['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($alunoC1['max'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C1, $alunoC1['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C1, $alunoC1, $comparison);
    }

    /**
     * Filter the query on the aluno_c2 column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC2('fooValue');   // WHERE aluno_c2 = 'fooValue'
     * $query->filterByAlunoC2('%fooValue%'); // WHERE aluno_c2 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC2 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC2($alunoC2 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC2)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC2)) {
                $alunoC2 = str_replace('*', '%', $alunoC2);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C2, $alunoC2, $comparison);
    }

    /**
     * Filter the query on the aluno_c3 column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC3('fooValue');   // WHERE aluno_c3 = 'fooValue'
     * $query->filterByAlunoC3('%fooValue%'); // WHERE aluno_c3 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC3 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC3($alunoC3 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC3)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC3)) {
                $alunoC3 = str_replace('*', '%', $alunoC3);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C3, $alunoC3, $comparison);
    }

    /**
     * Filter the query on the aluno_c4_nome column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC4Nome('fooValue');   // WHERE aluno_c4_nome = 'fooValue'
     * $query->filterByAlunoC4Nome('%fooValue%'); // WHERE aluno_c4_nome LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC4Nome The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC4Nome($alunoC4Nome = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC4Nome)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC4Nome)) {
                $alunoC4Nome = str_replace('*', '%', $alunoC4Nome);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C4_NOME, $alunoC4Nome, $comparison);
    }

    /**
     * Filter the query on the aluno_c5_cpf column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC5Cpf('fooValue');   // WHERE aluno_c5_cpf = 'fooValue'
     * $query->filterByAlunoC5Cpf('%fooValue%'); // WHERE aluno_c5_cpf LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC5Cpf The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC5Cpf($alunoC5Cpf = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC5Cpf)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC5Cpf)) {
                $alunoC5Cpf = str_replace('*', '%', $alunoC5Cpf);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C5_CPF, $alunoC5Cpf, $comparison);
    }

    /**
     * Filter the query on the aluno_c6_doc_estrangeiro column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC6DocEstrangeiro('fooValue');   // WHERE aluno_c6_doc_estrangeiro = 'fooValue'
     * $query->filterByAlunoC6DocEstrangeiro('%fooValue%'); // WHERE aluno_c6_doc_estrangeiro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC6DocEstrangeiro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC6DocEstrangeiro($alunoC6DocEstrangeiro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC6DocEstrangeiro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC6DocEstrangeiro)) {
                $alunoC6DocEstrangeiro = str_replace('*', '%', $alunoC6DocEstrangeiro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C6_DOC_ESTRANGEIRO, $alunoC6DocEstrangeiro, $comparison);
    }

    /**
     * Filter the query on the aluno_c7_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC7Nascimento('fooValue');   // WHERE aluno_c7_nascimento = 'fooValue'
     * $query->filterByAlunoC7Nascimento('%fooValue%'); // WHERE aluno_c7_nascimento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC7Nascimento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC7Nascimento($alunoC7Nascimento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC7Nascimento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC7Nascimento)) {
                $alunoC7Nascimento = str_replace('*', '%', $alunoC7Nascimento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C7_NASCIMENTO, $alunoC7Nascimento, $comparison);
    }

    /**
     * Filter the query on the aluno_c8_sexo column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC8Sexo(1234); // WHERE aluno_c8_sexo = 1234
     * $query->filterByAlunoC8Sexo(array(12, 34)); // WHERE aluno_c8_sexo IN (12, 34)
     * $query->filterByAlunoC8Sexo(array('min' => 12)); // WHERE aluno_c8_sexo > 12
     * </code>
     *
     * @param     mixed $alunoC8Sexo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC8Sexo($alunoC8Sexo = null, $comparison = null)
    {
        if (is_array($alunoC8Sexo)) {
            $useMinMax = false;
            if (isset($alunoC8Sexo['min'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C8_SEXO, $alunoC8Sexo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($alunoC8Sexo['max'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C8_SEXO, $alunoC8Sexo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C8_SEXO, $alunoC8Sexo, $comparison);
    }

    /**
     * Filter the query on the aluno_c9_cor_raca column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC9CorRaca(1234); // WHERE aluno_c9_cor_raca = 1234
     * $query->filterByAlunoC9CorRaca(array(12, 34)); // WHERE aluno_c9_cor_raca IN (12, 34)
     * $query->filterByAlunoC9CorRaca(array('min' => 12)); // WHERE aluno_c9_cor_raca > 12
     * </code>
     *
     * @param     mixed $alunoC9CorRaca The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC9CorRaca($alunoC9CorRaca = null, $comparison = null)
    {
        if (is_array($alunoC9CorRaca)) {
            $useMinMax = false;
            if (isset($alunoC9CorRaca['min'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C9_COR_RACA, $alunoC9CorRaca['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($alunoC9CorRaca['max'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C9_COR_RACA, $alunoC9CorRaca['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C9_COR_RACA, $alunoC9CorRaca, $comparison);
    }

    /**
     * Filter the query on the aluno_c10_mae column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC10Mae('fooValue');   // WHERE aluno_c10_mae = 'fooValue'
     * $query->filterByAlunoC10Mae('%fooValue%'); // WHERE aluno_c10_mae LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC10Mae The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC10Mae($alunoC10Mae = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC10Mae)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC10Mae)) {
                $alunoC10Mae = str_replace('*', '%', $alunoC10Mae);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C10_MAE, $alunoC10Mae, $comparison);
    }

    /**
     * Filter the query on the aluno_c11_nacionalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC11Nacionalidade(1234); // WHERE aluno_c11_nacionalidade = 1234
     * $query->filterByAlunoC11Nacionalidade(array(12, 34)); // WHERE aluno_c11_nacionalidade IN (12, 34)
     * $query->filterByAlunoC11Nacionalidade(array('min' => 12)); // WHERE aluno_c11_nacionalidade > 12
     * </code>
     *
     * @param     mixed $alunoC11Nacionalidade The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC11Nacionalidade($alunoC11Nacionalidade = null, $comparison = null)
    {
        if (is_array($alunoC11Nacionalidade)) {
            $useMinMax = false;
            if (isset($alunoC11Nacionalidade['min'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C11_NACIONALIDADE, $alunoC11Nacionalidade['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($alunoC11Nacionalidade['max'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C11_NACIONALIDADE, $alunoC11Nacionalidade['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C11_NACIONALIDADE, $alunoC11Nacionalidade, $comparison);
    }

    /**
     * Filter the query on the aluno_c12_uf_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC12UfNascimento('fooValue');   // WHERE aluno_c12_uf_nascimento = 'fooValue'
     * $query->filterByAlunoC12UfNascimento('%fooValue%'); // WHERE aluno_c12_uf_nascimento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC12UfNascimento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC12UfNascimento($alunoC12UfNascimento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC12UfNascimento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC12UfNascimento)) {
                $alunoC12UfNascimento = str_replace('*', '%', $alunoC12UfNascimento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C12_UF_NASCIMENTO, $alunoC12UfNascimento, $comparison);
    }

    /**
     * Filter the query on the aluno_c13_cidade_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC13CidadeNascimento('fooValue');   // WHERE aluno_c13_cidade_nascimento = 'fooValue'
     * $query->filterByAlunoC13CidadeNascimento('%fooValue%'); // WHERE aluno_c13_cidade_nascimento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC13CidadeNascimento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC13CidadeNascimento($alunoC13CidadeNascimento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC13CidadeNascimento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC13CidadeNascimento)) {
                $alunoC13CidadeNascimento = str_replace('*', '%', $alunoC13CidadeNascimento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C13_CIDADE_NASCIMENTO, $alunoC13CidadeNascimento, $comparison);
    }

    /**
     * Filter the query on the aluno_c14_pais_origem column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC14PaisOrigem('fooValue');   // WHERE aluno_c14_pais_origem = 'fooValue'
     * $query->filterByAlunoC14PaisOrigem('%fooValue%'); // WHERE aluno_c14_pais_origem LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC14PaisOrigem The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC14PaisOrigem($alunoC14PaisOrigem = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC14PaisOrigem)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC14PaisOrigem)) {
                $alunoC14PaisOrigem = str_replace('*', '%', $alunoC14PaisOrigem);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C14_PAIS_ORIGEM, $alunoC14PaisOrigem, $comparison);
    }

    /**
     * Filter the query on the aluno_c15_deficiencia column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC15Deficiencia(1234); // WHERE aluno_c15_deficiencia = 1234
     * $query->filterByAlunoC15Deficiencia(array(12, 34)); // WHERE aluno_c15_deficiencia IN (12, 34)
     * $query->filterByAlunoC15Deficiencia(array('min' => 12)); // WHERE aluno_c15_deficiencia > 12
     * </code>
     *
     * @param     mixed $alunoC15Deficiencia The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC15Deficiencia($alunoC15Deficiencia = null, $comparison = null)
    {
        if (is_array($alunoC15Deficiencia)) {
            $useMinMax = false;
            if (isset($alunoC15Deficiencia['min'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C15_DEFICIENCIA, $alunoC15Deficiencia['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($alunoC15Deficiencia['max'])) {
                $this->addUsingAlias(Censo2009Peer::ALUNO_C15_DEFICIENCIA, $alunoC15Deficiencia['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C15_DEFICIENCIA, $alunoC15Deficiencia, $comparison);
    }

    /**
     * Filter the query on the aluno_c16_def_cegueria column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC16DefCegueria('fooValue');   // WHERE aluno_c16_def_cegueria = 'fooValue'
     * $query->filterByAlunoC16DefCegueria('%fooValue%'); // WHERE aluno_c16_def_cegueria LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC16DefCegueria The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC16DefCegueria($alunoC16DefCegueria = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC16DefCegueria)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC16DefCegueria)) {
                $alunoC16DefCegueria = str_replace('*', '%', $alunoC16DefCegueria);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C16_DEF_CEGUERIA, $alunoC16DefCegueria, $comparison);
    }

    /**
     * Filter the query on the aluno_c17_def_baixa_visao column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC17DefBaixaVisao('fooValue');   // WHERE aluno_c17_def_baixa_visao = 'fooValue'
     * $query->filterByAlunoC17DefBaixaVisao('%fooValue%'); // WHERE aluno_c17_def_baixa_visao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC17DefBaixaVisao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC17DefBaixaVisao($alunoC17DefBaixaVisao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC17DefBaixaVisao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC17DefBaixaVisao)) {
                $alunoC17DefBaixaVisao = str_replace('*', '%', $alunoC17DefBaixaVisao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C17_DEF_BAIXA_VISAO, $alunoC17DefBaixaVisao, $comparison);
    }

    /**
     * Filter the query on the aluno_c18_def_surdez column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC18DefSurdez('fooValue');   // WHERE aluno_c18_def_surdez = 'fooValue'
     * $query->filterByAlunoC18DefSurdez('%fooValue%'); // WHERE aluno_c18_def_surdez LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC18DefSurdez The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC18DefSurdez($alunoC18DefSurdez = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC18DefSurdez)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC18DefSurdez)) {
                $alunoC18DefSurdez = str_replace('*', '%', $alunoC18DefSurdez);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C18_DEF_SURDEZ, $alunoC18DefSurdez, $comparison);
    }

    /**
     * Filter the query on the aluno_c19_def_auditiva column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC19DefAuditiva('fooValue');   // WHERE aluno_c19_def_auditiva = 'fooValue'
     * $query->filterByAlunoC19DefAuditiva('%fooValue%'); // WHERE aluno_c19_def_auditiva LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC19DefAuditiva The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC19DefAuditiva($alunoC19DefAuditiva = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC19DefAuditiva)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC19DefAuditiva)) {
                $alunoC19DefAuditiva = str_replace('*', '%', $alunoC19DefAuditiva);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C19_DEF_AUDITIVA, $alunoC19DefAuditiva, $comparison);
    }

    /**
     * Filter the query on the aluno_c20_def_fisica column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC20DefFisica('fooValue');   // WHERE aluno_c20_def_fisica = 'fooValue'
     * $query->filterByAlunoC20DefFisica('%fooValue%'); // WHERE aluno_c20_def_fisica LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC20DefFisica The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC20DefFisica($alunoC20DefFisica = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC20DefFisica)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC20DefFisica)) {
                $alunoC20DefFisica = str_replace('*', '%', $alunoC20DefFisica);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C20_DEF_FISICA, $alunoC20DefFisica, $comparison);
    }

    /**
     * Filter the query on the aluno_c21_def_surdocegueira column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC21DefSurdocegueira('fooValue');   // WHERE aluno_c21_def_surdocegueira = 'fooValue'
     * $query->filterByAlunoC21DefSurdocegueira('%fooValue%'); // WHERE aluno_c21_def_surdocegueira LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC21DefSurdocegueira The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC21DefSurdocegueira($alunoC21DefSurdocegueira = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC21DefSurdocegueira)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC21DefSurdocegueira)) {
                $alunoC21DefSurdocegueira = str_replace('*', '%', $alunoC21DefSurdocegueira);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C21_DEF_SURDOCEGUEIRA, $alunoC21DefSurdocegueira, $comparison);
    }

    /**
     * Filter the query on the aluno_c22_def_multipla column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC22DefMultipla('fooValue');   // WHERE aluno_c22_def_multipla = 'fooValue'
     * $query->filterByAlunoC22DefMultipla('%fooValue%'); // WHERE aluno_c22_def_multipla LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC22DefMultipla The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC22DefMultipla($alunoC22DefMultipla = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC22DefMultipla)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC22DefMultipla)) {
                $alunoC22DefMultipla = str_replace('*', '%', $alunoC22DefMultipla);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C22_DEF_MULTIPLA, $alunoC22DefMultipla, $comparison);
    }

    /**
     * Filter the query on the aluno_c23_def_mental column
     *
     * Example usage:
     * <code>
     * $query->filterByAlunoC23DefMental('fooValue');   // WHERE aluno_c23_def_mental = 'fooValue'
     * $query->filterByAlunoC23DefMental('%fooValue%'); // WHERE aluno_c23_def_mental LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alunoC23DefMental The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByAlunoC23DefMental($alunoC23DefMental = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alunoC23DefMental)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alunoC23DefMental)) {
                $alunoC23DefMental = str_replace('*', '%', $alunoC23DefMental);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::ALUNO_C23_DEF_MENTAL, $alunoC23DefMental, $comparison);
    }

    /**
     * Filter the query on the curso_c1_tipo_reg2 column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC1TipoReg2(1234); // WHERE curso_c1_tipo_reg2 = 1234
     * $query->filterByCursoC1TipoReg2(array(12, 34)); // WHERE curso_c1_tipo_reg2 IN (12, 34)
     * $query->filterByCursoC1TipoReg2(array('min' => 12)); // WHERE curso_c1_tipo_reg2 > 12
     * </code>
     *
     * @param     mixed $cursoC1TipoReg2 The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC1TipoReg2($cursoC1TipoReg2 = null, $comparison = null)
    {
        if (is_array($cursoC1TipoReg2)) {
            $useMinMax = false;
            if (isset($cursoC1TipoReg2['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C1_TIPO_REG2, $cursoC1TipoReg2['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC1TipoReg2['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C1_TIPO_REG2, $cursoC1TipoReg2['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C1_TIPO_REG2, $cursoC1TipoReg2, $comparison);
    }

    /**
     * Filter the query on the curso_c2_id_inep_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC2IdInepCurso('fooValue');   // WHERE curso_c2_id_inep_curso = 'fooValue'
     * $query->filterByCursoC2IdInepCurso('%fooValue%'); // WHERE curso_c2_id_inep_curso LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cursoC2IdInepCurso The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC2IdInepCurso($cursoC2IdInepCurso = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cursoC2IdInepCurso)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cursoC2IdInepCurso)) {
                $cursoC2IdInepCurso = str_replace('*', '%', $cursoC2IdInepCurso);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C2_ID_INEP_CURSO, $cursoC2IdInepCurso, $comparison);
    }

    /**
     * Filter the query on the curso_c3_cod_polo_inep column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC3CodPoloInep('fooValue');   // WHERE curso_c3_cod_polo_inep = 'fooValue'
     * $query->filterByCursoC3CodPoloInep('%fooValue%'); // WHERE curso_c3_cod_polo_inep LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cursoC3CodPoloInep The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC3CodPoloInep($cursoC3CodPoloInep = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cursoC3CodPoloInep)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cursoC3CodPoloInep)) {
                $cursoC3CodPoloInep = str_replace('*', '%', $cursoC3CodPoloInep);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C3_COD_POLO_INEP, $cursoC3CodPoloInep, $comparison);
    }

    /**
     * Filter the query on the curso_c4_turno_aluno column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC4TurnoAluno('fooValue');   // WHERE curso_c4_turno_aluno = 'fooValue'
     * $query->filterByCursoC4TurnoAluno('%fooValue%'); // WHERE curso_c4_turno_aluno LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cursoC4TurnoAluno The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC4TurnoAluno($cursoC4TurnoAluno = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cursoC4TurnoAluno)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cursoC4TurnoAluno)) {
                $cursoC4TurnoAluno = str_replace('*', '%', $cursoC4TurnoAluno);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C4_TURNO_ALUNO, $cursoC4TurnoAluno, $comparison);
    }

    /**
     * Filter the query on the curso_c5_situacao_vinculo column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC5SituacaoVinculo(1234); // WHERE curso_c5_situacao_vinculo = 1234
     * $query->filterByCursoC5SituacaoVinculo(array(12, 34)); // WHERE curso_c5_situacao_vinculo IN (12, 34)
     * $query->filterByCursoC5SituacaoVinculo(array('min' => 12)); // WHERE curso_c5_situacao_vinculo > 12
     * </code>
     *
     * @param     mixed $cursoC5SituacaoVinculo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC5SituacaoVinculo($cursoC5SituacaoVinculo = null, $comparison = null)
    {
        if (is_array($cursoC5SituacaoVinculo)) {
            $useMinMax = false;
            if (isset($cursoC5SituacaoVinculo['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C5_SITUACAO_VINCULO, $cursoC5SituacaoVinculo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC5SituacaoVinculo['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C5_SITUACAO_VINCULO, $cursoC5SituacaoVinculo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C5_SITUACAO_VINCULO, $cursoC5SituacaoVinculo, $comparison);
    }

    /**
     * Filter the query on the curso_c6_data_ingresso column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC6DataIngresso('fooValue');   // WHERE curso_c6_data_ingresso = 'fooValue'
     * $query->filterByCursoC6DataIngresso('%fooValue%'); // WHERE curso_c6_data_ingresso LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cursoC6DataIngresso The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC6DataIngresso($cursoC6DataIngresso = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cursoC6DataIngresso)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cursoC6DataIngresso)) {
                $cursoC6DataIngresso = str_replace('*', '%', $cursoC6DataIngresso);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C6_DATA_INGRESSO, $cursoC6DataIngresso, $comparison);
    }

    /**
     * Filter the query on the curso_c7_aluno_publica column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC7AlunoPublica('fooValue');   // WHERE curso_c7_aluno_publica = 'fooValue'
     * $query->filterByCursoC7AlunoPublica('%fooValue%'); // WHERE curso_c7_aluno_publica LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cursoC7AlunoPublica The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC7AlunoPublica($cursoC7AlunoPublica = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cursoC7AlunoPublica)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cursoC7AlunoPublica)) {
                $cursoC7AlunoPublica = str_replace('*', '%', $cursoC7AlunoPublica);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C7_ALUNO_PUBLICA, $cursoC7AlunoPublica, $comparison);
    }

    /**
     * Filter the query on the curso_c8_forma_ingresso_selecao_vestibular column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC8FormaIngressoSelecaoVestibular(1234); // WHERE curso_c8_forma_ingresso_selecao_vestibular = 1234
     * $query->filterByCursoC8FormaIngressoSelecaoVestibular(array(12, 34)); // WHERE curso_c8_forma_ingresso_selecao_vestibular IN (12, 34)
     * $query->filterByCursoC8FormaIngressoSelecaoVestibular(array('min' => 12)); // WHERE curso_c8_forma_ingresso_selecao_vestibular > 12
     * </code>
     *
     * @param     mixed $cursoC8FormaIngressoSelecaoVestibular The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC8FormaIngressoSelecaoVestibular($cursoC8FormaIngressoSelecaoVestibular = null, $comparison = null)
    {
        if (is_array($cursoC8FormaIngressoSelecaoVestibular)) {
            $useMinMax = false;
            if (isset($cursoC8FormaIngressoSelecaoVestibular['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR, $cursoC8FormaIngressoSelecaoVestibular['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC8FormaIngressoSelecaoVestibular['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR, $cursoC8FormaIngressoSelecaoVestibular['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR, $cursoC8FormaIngressoSelecaoVestibular, $comparison);
    }

    /**
     * Filter the query on the curso_c9_forma_ingresso_selecao_enem column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC9FormaIngressoSelecaoEnem(1234); // WHERE curso_c9_forma_ingresso_selecao_enem = 1234
     * $query->filterByCursoC9FormaIngressoSelecaoEnem(array(12, 34)); // WHERE curso_c9_forma_ingresso_selecao_enem IN (12, 34)
     * $query->filterByCursoC9FormaIngressoSelecaoEnem(array('min' => 12)); // WHERE curso_c9_forma_ingresso_selecao_enem > 12
     * </code>
     *
     * @param     mixed $cursoC9FormaIngressoSelecaoEnem The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC9FormaIngressoSelecaoEnem($cursoC9FormaIngressoSelecaoEnem = null, $comparison = null)
    {
        if (is_array($cursoC9FormaIngressoSelecaoEnem)) {
            $useMinMax = false;
            if (isset($cursoC9FormaIngressoSelecaoEnem['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM, $cursoC9FormaIngressoSelecaoEnem['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC9FormaIngressoSelecaoEnem['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM, $cursoC9FormaIngressoSelecaoEnem['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM, $cursoC9FormaIngressoSelecaoEnem, $comparison);
    }

    /**
     * Filter the query on the curso_c10_forma_ingresso_selecao_outros column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC10FormaIngressoSelecaoOutros(1234); // WHERE curso_c10_forma_ingresso_selecao_outros = 1234
     * $query->filterByCursoC10FormaIngressoSelecaoOutros(array(12, 34)); // WHERE curso_c10_forma_ingresso_selecao_outros IN (12, 34)
     * $query->filterByCursoC10FormaIngressoSelecaoOutros(array('min' => 12)); // WHERE curso_c10_forma_ingresso_selecao_outros > 12
     * </code>
     *
     * @param     mixed $cursoC10FormaIngressoSelecaoOutros The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC10FormaIngressoSelecaoOutros($cursoC10FormaIngressoSelecaoOutros = null, $comparison = null)
    {
        if (is_array($cursoC10FormaIngressoSelecaoOutros)) {
            $useMinMax = false;
            if (isset($cursoC10FormaIngressoSelecaoOutros['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS, $cursoC10FormaIngressoSelecaoOutros['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC10FormaIngressoSelecaoOutros['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS, $cursoC10FormaIngressoSelecaoOutros['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS, $cursoC10FormaIngressoSelecaoOutros, $comparison);
    }

    /**
     * Filter the query on the curso_c11_forma_ingresso_selecao_pecg column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC11FormaIngressoSelecaoPecg(1234); // WHERE curso_c11_forma_ingresso_selecao_pecg = 1234
     * $query->filterByCursoC11FormaIngressoSelecaoPecg(array(12, 34)); // WHERE curso_c11_forma_ingresso_selecao_pecg IN (12, 34)
     * $query->filterByCursoC11FormaIngressoSelecaoPecg(array('min' => 12)); // WHERE curso_c11_forma_ingresso_selecao_pecg > 12
     * </code>
     *
     * @param     mixed $cursoC11FormaIngressoSelecaoPecg The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC11FormaIngressoSelecaoPecg($cursoC11FormaIngressoSelecaoPecg = null, $comparison = null)
    {
        if (is_array($cursoC11FormaIngressoSelecaoPecg)) {
            $useMinMax = false;
            if (isset($cursoC11FormaIngressoSelecaoPecg['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C11_FORMA_INGRESSO_SELECAO_PECG, $cursoC11FormaIngressoSelecaoPecg['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC11FormaIngressoSelecaoPecg['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C11_FORMA_INGRESSO_SELECAO_PECG, $cursoC11FormaIngressoSelecaoPecg['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C11_FORMA_INGRESSO_SELECAO_PECG, $cursoC11FormaIngressoSelecaoPecg, $comparison);
    }

    /**
     * Filter the query on the curso_c12_forma_ingresso_outras column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC12FormaIngressoOutras(1234); // WHERE curso_c12_forma_ingresso_outras = 1234
     * $query->filterByCursoC12FormaIngressoOutras(array(12, 34)); // WHERE curso_c12_forma_ingresso_outras IN (12, 34)
     * $query->filterByCursoC12FormaIngressoOutras(array('min' => 12)); // WHERE curso_c12_forma_ingresso_outras > 12
     * </code>
     *
     * @param     mixed $cursoC12FormaIngressoOutras The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC12FormaIngressoOutras($cursoC12FormaIngressoOutras = null, $comparison = null)
    {
        if (is_array($cursoC12FormaIngressoOutras)) {
            $useMinMax = false;
            if (isset($cursoC12FormaIngressoOutras['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C12_FORMA_INGRESSO_OUTRAS, $cursoC12FormaIngressoOutras['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC12FormaIngressoOutras['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C12_FORMA_INGRESSO_OUTRAS, $cursoC12FormaIngressoOutras['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C12_FORMA_INGRESSO_OUTRAS, $cursoC12FormaIngressoOutras, $comparison);
    }

    /**
     * Filter the query on the curso_c13_programa_reserva_vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC13ProgramaReservaVagas(1234); // WHERE curso_c13_programa_reserva_vagas = 1234
     * $query->filterByCursoC13ProgramaReservaVagas(array(12, 34)); // WHERE curso_c13_programa_reserva_vagas IN (12, 34)
     * $query->filterByCursoC13ProgramaReservaVagas(array('min' => 12)); // WHERE curso_c13_programa_reserva_vagas > 12
     * </code>
     *
     * @param     mixed $cursoC13ProgramaReservaVagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC13ProgramaReservaVagas($cursoC13ProgramaReservaVagas = null, $comparison = null)
    {
        if (is_array($cursoC13ProgramaReservaVagas)) {
            $useMinMax = false;
            if (isset($cursoC13ProgramaReservaVagas['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C13_PROGRAMA_RESERVA_VAGAS, $cursoC13ProgramaReservaVagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC13ProgramaReservaVagas['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C13_PROGRAMA_RESERVA_VAGAS, $cursoC13ProgramaReservaVagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C13_PROGRAMA_RESERVA_VAGAS, $cursoC13ProgramaReservaVagas, $comparison);
    }

    /**
     * Filter the query on the curso_c14_programa_reserva_vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC14ProgramaReservaVagas(1234); // WHERE curso_c14_programa_reserva_vagas = 1234
     * $query->filterByCursoC14ProgramaReservaVagas(array(12, 34)); // WHERE curso_c14_programa_reserva_vagas IN (12, 34)
     * $query->filterByCursoC14ProgramaReservaVagas(array('min' => 12)); // WHERE curso_c14_programa_reserva_vagas > 12
     * </code>
     *
     * @param     mixed $cursoC14ProgramaReservaVagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC14ProgramaReservaVagas($cursoC14ProgramaReservaVagas = null, $comparison = null)
    {
        if (is_array($cursoC14ProgramaReservaVagas)) {
            $useMinMax = false;
            if (isset($cursoC14ProgramaReservaVagas['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C14_PROGRAMA_RESERVA_VAGAS, $cursoC14ProgramaReservaVagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC14ProgramaReservaVagas['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C14_PROGRAMA_RESERVA_VAGAS, $cursoC14ProgramaReservaVagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C14_PROGRAMA_RESERVA_VAGAS, $cursoC14ProgramaReservaVagas, $comparison);
    }

    /**
     * Filter the query on the curso_c15_programa_reserva_vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC15ProgramaReservaVagas(1234); // WHERE curso_c15_programa_reserva_vagas = 1234
     * $query->filterByCursoC15ProgramaReservaVagas(array(12, 34)); // WHERE curso_c15_programa_reserva_vagas IN (12, 34)
     * $query->filterByCursoC15ProgramaReservaVagas(array('min' => 12)); // WHERE curso_c15_programa_reserva_vagas > 12
     * </code>
     *
     * @param     mixed $cursoC15ProgramaReservaVagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC15ProgramaReservaVagas($cursoC15ProgramaReservaVagas = null, $comparison = null)
    {
        if (is_array($cursoC15ProgramaReservaVagas)) {
            $useMinMax = false;
            if (isset($cursoC15ProgramaReservaVagas['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C15_PROGRAMA_RESERVA_VAGAS, $cursoC15ProgramaReservaVagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC15ProgramaReservaVagas['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C15_PROGRAMA_RESERVA_VAGAS, $cursoC15ProgramaReservaVagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C15_PROGRAMA_RESERVA_VAGAS, $cursoC15ProgramaReservaVagas, $comparison);
    }

    /**
     * Filter the query on the curso_c16_programa_reserva_vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC16ProgramaReservaVagas(1234); // WHERE curso_c16_programa_reserva_vagas = 1234
     * $query->filterByCursoC16ProgramaReservaVagas(array(12, 34)); // WHERE curso_c16_programa_reserva_vagas IN (12, 34)
     * $query->filterByCursoC16ProgramaReservaVagas(array('min' => 12)); // WHERE curso_c16_programa_reserva_vagas > 12
     * </code>
     *
     * @param     mixed $cursoC16ProgramaReservaVagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC16ProgramaReservaVagas($cursoC16ProgramaReservaVagas = null, $comparison = null)
    {
        if (is_array($cursoC16ProgramaReservaVagas)) {
            $useMinMax = false;
            if (isset($cursoC16ProgramaReservaVagas['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C16_PROGRAMA_RESERVA_VAGAS, $cursoC16ProgramaReservaVagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC16ProgramaReservaVagas['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C16_PROGRAMA_RESERVA_VAGAS, $cursoC16ProgramaReservaVagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C16_PROGRAMA_RESERVA_VAGAS, $cursoC16ProgramaReservaVagas, $comparison);
    }

    /**
     * Filter the query on the curso_c17_programa_reserva_vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC17ProgramaReservaVagas(1234); // WHERE curso_c17_programa_reserva_vagas = 1234
     * $query->filterByCursoC17ProgramaReservaVagas(array(12, 34)); // WHERE curso_c17_programa_reserva_vagas IN (12, 34)
     * $query->filterByCursoC17ProgramaReservaVagas(array('min' => 12)); // WHERE curso_c17_programa_reserva_vagas > 12
     * </code>
     *
     * @param     mixed $cursoC17ProgramaReservaVagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC17ProgramaReservaVagas($cursoC17ProgramaReservaVagas = null, $comparison = null)
    {
        if (is_array($cursoC17ProgramaReservaVagas)) {
            $useMinMax = false;
            if (isset($cursoC17ProgramaReservaVagas['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C17_PROGRAMA_RESERVA_VAGAS, $cursoC17ProgramaReservaVagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC17ProgramaReservaVagas['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C17_PROGRAMA_RESERVA_VAGAS, $cursoC17ProgramaReservaVagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C17_PROGRAMA_RESERVA_VAGAS, $cursoC17ProgramaReservaVagas, $comparison);
    }

    /**
     * Filter the query on the curso_c18_programa_reserva_vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC18ProgramaReservaVagas(1234); // WHERE curso_c18_programa_reserva_vagas = 1234
     * $query->filterByCursoC18ProgramaReservaVagas(array(12, 34)); // WHERE curso_c18_programa_reserva_vagas IN (12, 34)
     * $query->filterByCursoC18ProgramaReservaVagas(array('min' => 12)); // WHERE curso_c18_programa_reserva_vagas > 12
     * </code>
     *
     * @param     mixed $cursoC18ProgramaReservaVagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC18ProgramaReservaVagas($cursoC18ProgramaReservaVagas = null, $comparison = null)
    {
        if (is_array($cursoC18ProgramaReservaVagas)) {
            $useMinMax = false;
            if (isset($cursoC18ProgramaReservaVagas['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C18_PROGRAMA_RESERVA_VAGAS, $cursoC18ProgramaReservaVagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC18ProgramaReservaVagas['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C18_PROGRAMA_RESERVA_VAGAS, $cursoC18ProgramaReservaVagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C18_PROGRAMA_RESERVA_VAGAS, $cursoC18ProgramaReservaVagas, $comparison);
    }

    /**
     * Filter the query on the curso_c19_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC19FinanciamentoEstudantil(1234); // WHERE curso_c19_financiamento_estudantil = 1234
     * $query->filterByCursoC19FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c19_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC19FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c19_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC19FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC19FinanciamentoEstudantil($cursoC19FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC19FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC19FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C19_FINANCIAMENTO_ESTUDANTIL, $cursoC19FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC19FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C19_FINANCIAMENTO_ESTUDANTIL, $cursoC19FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C19_FINANCIAMENTO_ESTUDANTIL, $cursoC19FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c20_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC20FinanciamentoEstudantil(1234); // WHERE curso_c20_financiamento_estudantil = 1234
     * $query->filterByCursoC20FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c20_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC20FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c20_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC20FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC20FinanciamentoEstudantil($cursoC20FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC20FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC20FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C20_FINANCIAMENTO_ESTUDANTIL, $cursoC20FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC20FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C20_FINANCIAMENTO_ESTUDANTIL, $cursoC20FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C20_FINANCIAMENTO_ESTUDANTIL, $cursoC20FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c21_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC21FinanciamentoEstudantil(1234); // WHERE curso_c21_financiamento_estudantil = 1234
     * $query->filterByCursoC21FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c21_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC21FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c21_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC21FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC21FinanciamentoEstudantil($cursoC21FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC21FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC21FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C21_FINANCIAMENTO_ESTUDANTIL, $cursoC21FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC21FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C21_FINANCIAMENTO_ESTUDANTIL, $cursoC21FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C21_FINANCIAMENTO_ESTUDANTIL, $cursoC21FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c22_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC22FinanciamentoEstudantil(1234); // WHERE curso_c22_financiamento_estudantil = 1234
     * $query->filterByCursoC22FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c22_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC22FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c22_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC22FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC22FinanciamentoEstudantil($cursoC22FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC22FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC22FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C22_FINANCIAMENTO_ESTUDANTIL, $cursoC22FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC22FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C22_FINANCIAMENTO_ESTUDANTIL, $cursoC22FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C22_FINANCIAMENTO_ESTUDANTIL, $cursoC22FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c23_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC23FinanciamentoEstudantil(1234); // WHERE curso_c23_financiamento_estudantil = 1234
     * $query->filterByCursoC23FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c23_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC23FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c23_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC23FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC23FinanciamentoEstudantil($cursoC23FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC23FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC23FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C23_FINANCIAMENTO_ESTUDANTIL, $cursoC23FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC23FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C23_FINANCIAMENTO_ESTUDANTIL, $cursoC23FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C23_FINANCIAMENTO_ESTUDANTIL, $cursoC23FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c24_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC24FinanciamentoEstudantil(1234); // WHERE curso_c24_financiamento_estudantil = 1234
     * $query->filterByCursoC24FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c24_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC24FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c24_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC24FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC24FinanciamentoEstudantil($cursoC24FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC24FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC24FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C24_FINANCIAMENTO_ESTUDANTIL, $cursoC24FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC24FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C24_FINANCIAMENTO_ESTUDANTIL, $cursoC24FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C24_FINANCIAMENTO_ESTUDANTIL, $cursoC24FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c25_financiamento_estudantil column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC25FinanciamentoEstudantil(1234); // WHERE curso_c25_financiamento_estudantil = 1234
     * $query->filterByCursoC25FinanciamentoEstudantil(array(12, 34)); // WHERE curso_c25_financiamento_estudantil IN (12, 34)
     * $query->filterByCursoC25FinanciamentoEstudantil(array('min' => 12)); // WHERE curso_c25_financiamento_estudantil > 12
     * </code>
     *
     * @param     mixed $cursoC25FinanciamentoEstudantil The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC25FinanciamentoEstudantil($cursoC25FinanciamentoEstudantil = null, $comparison = null)
    {
        if (is_array($cursoC25FinanciamentoEstudantil)) {
            $useMinMax = false;
            if (isset($cursoC25FinanciamentoEstudantil['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C25_FINANCIAMENTO_ESTUDANTIL, $cursoC25FinanciamentoEstudantil['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC25FinanciamentoEstudantil['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C25_FINANCIAMENTO_ESTUDANTIL, $cursoC25FinanciamentoEstudantil['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C25_FINANCIAMENTO_ESTUDANTIL, $cursoC25FinanciamentoEstudantil, $comparison);
    }

    /**
     * Filter the query on the curso_c26_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC26FinanciamentoEstudantilNReemb(1234); // WHERE curso_c26_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC26FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c26_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC26FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c26_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC26FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC26FinanciamentoEstudantilNReemb($cursoC26FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC26FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC26FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC26FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC26FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC26FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC26FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c27_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC27FinanciamentoEstudantilNReemb(1234); // WHERE curso_c27_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC27FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c27_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC27FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c27_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC27FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC27FinanciamentoEstudantilNReemb($cursoC27FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC27FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC27FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC27FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC27FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC27FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC27FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c28_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC28FinanciamentoEstudantilNReemb(1234); // WHERE curso_c28_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC28FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c28_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC28FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c28_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC28FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC28FinanciamentoEstudantilNReemb($cursoC28FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC28FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC28FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC28FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC28FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC28FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC28FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c29_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC29FinanciamentoEstudantilNReemb(1234); // WHERE curso_c29_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC29FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c29_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC29FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c29_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC29FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC29FinanciamentoEstudantilNReemb($cursoC29FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC29FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC29FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC29FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC29FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC29FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC29FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c30_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC30FinanciamentoEstudantilNReemb(1234); // WHERE curso_c30_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC30FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c30_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC30FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c30_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC30FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC30FinanciamentoEstudantilNReemb($cursoC30FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC30FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC30FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC30FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC30FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC30FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC30FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c31_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC31FinanciamentoEstudantilNReemb(1234); // WHERE curso_c31_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC31FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c31_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC31FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c31_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC31FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC31FinanciamentoEstudantilNReemb($cursoC31FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC31FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC31FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC31FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC31FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC31FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC31FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c32_financiamento_estudantil_n_reemb column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC32FinanciamentoEstudantilNReemb(1234); // WHERE curso_c32_financiamento_estudantil_n_reemb = 1234
     * $query->filterByCursoC32FinanciamentoEstudantilNReemb(array(12, 34)); // WHERE curso_c32_financiamento_estudantil_n_reemb IN (12, 34)
     * $query->filterByCursoC32FinanciamentoEstudantilNReemb(array('min' => 12)); // WHERE curso_c32_financiamento_estudantil_n_reemb > 12
     * </code>
     *
     * @param     mixed $cursoC32FinanciamentoEstudantilNReemb The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC32FinanciamentoEstudantilNReemb($cursoC32FinanciamentoEstudantilNReemb = null, $comparison = null)
    {
        if (is_array($cursoC32FinanciamentoEstudantilNReemb)) {
            $useMinMax = false;
            if (isset($cursoC32FinanciamentoEstudantilNReemb['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC32FinanciamentoEstudantilNReemb['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC32FinanciamentoEstudantilNReemb['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC32FinanciamentoEstudantilNReemb['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB, $cursoC32FinanciamentoEstudantilNReemb, $comparison);
    }

    /**
     * Filter the query on the curso_c33_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC33ApoioSocial(1234); // WHERE curso_c33_apoio_social = 1234
     * $query->filterByCursoC33ApoioSocial(array(12, 34)); // WHERE curso_c33_apoio_social IN (12, 34)
     * $query->filterByCursoC33ApoioSocial(array('min' => 12)); // WHERE curso_c33_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC33ApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC33ApoioSocial($cursoC33ApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC33ApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC33ApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C33_APOIO_SOCIAL, $cursoC33ApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC33ApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C33_APOIO_SOCIAL, $cursoC33ApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C33_APOIO_SOCIAL, $cursoC33ApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c34_tipo_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC34TipoApoioSocial(1234); // WHERE curso_c34_tipo_apoio_social = 1234
     * $query->filterByCursoC34TipoApoioSocial(array(12, 34)); // WHERE curso_c34_tipo_apoio_social IN (12, 34)
     * $query->filterByCursoC34TipoApoioSocial(array('min' => 12)); // WHERE curso_c34_tipo_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC34TipoApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC34TipoApoioSocial($cursoC34TipoApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC34TipoApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC34TipoApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C34_TIPO_APOIO_SOCIAL, $cursoC34TipoApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC34TipoApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C34_TIPO_APOIO_SOCIAL, $cursoC34TipoApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C34_TIPO_APOIO_SOCIAL, $cursoC34TipoApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c35_tipo_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC35TipoApoioSocial(1234); // WHERE curso_c35_tipo_apoio_social = 1234
     * $query->filterByCursoC35TipoApoioSocial(array(12, 34)); // WHERE curso_c35_tipo_apoio_social IN (12, 34)
     * $query->filterByCursoC35TipoApoioSocial(array('min' => 12)); // WHERE curso_c35_tipo_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC35TipoApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC35TipoApoioSocial($cursoC35TipoApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC35TipoApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC35TipoApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C35_TIPO_APOIO_SOCIAL, $cursoC35TipoApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC35TipoApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C35_TIPO_APOIO_SOCIAL, $cursoC35TipoApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C35_TIPO_APOIO_SOCIAL, $cursoC35TipoApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c36_tipo_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC36TipoApoioSocial(1234); // WHERE curso_c36_tipo_apoio_social = 1234
     * $query->filterByCursoC36TipoApoioSocial(array(12, 34)); // WHERE curso_c36_tipo_apoio_social IN (12, 34)
     * $query->filterByCursoC36TipoApoioSocial(array('min' => 12)); // WHERE curso_c36_tipo_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC36TipoApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC36TipoApoioSocial($cursoC36TipoApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC36TipoApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC36TipoApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C36_TIPO_APOIO_SOCIAL, $cursoC36TipoApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC36TipoApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C36_TIPO_APOIO_SOCIAL, $cursoC36TipoApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C36_TIPO_APOIO_SOCIAL, $cursoC36TipoApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c37_tipo_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC37TipoApoioSocial(1234); // WHERE curso_c37_tipo_apoio_social = 1234
     * $query->filterByCursoC37TipoApoioSocial(array(12, 34)); // WHERE curso_c37_tipo_apoio_social IN (12, 34)
     * $query->filterByCursoC37TipoApoioSocial(array('min' => 12)); // WHERE curso_c37_tipo_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC37TipoApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC37TipoApoioSocial($cursoC37TipoApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC37TipoApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC37TipoApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C37_TIPO_APOIO_SOCIAL, $cursoC37TipoApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC37TipoApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C37_TIPO_APOIO_SOCIAL, $cursoC37TipoApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C37_TIPO_APOIO_SOCIAL, $cursoC37TipoApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c38_tipo_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC38TipoApoioSocial(1234); // WHERE curso_c38_tipo_apoio_social = 1234
     * $query->filterByCursoC38TipoApoioSocial(array(12, 34)); // WHERE curso_c38_tipo_apoio_social IN (12, 34)
     * $query->filterByCursoC38TipoApoioSocial(array('min' => 12)); // WHERE curso_c38_tipo_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC38TipoApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC38TipoApoioSocial($cursoC38TipoApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC38TipoApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC38TipoApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C38_TIPO_APOIO_SOCIAL, $cursoC38TipoApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC38TipoApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C38_TIPO_APOIO_SOCIAL, $cursoC38TipoApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C38_TIPO_APOIO_SOCIAL, $cursoC38TipoApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c39_tipo_apoio_social column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC39TipoApoioSocial(1234); // WHERE curso_c39_tipo_apoio_social = 1234
     * $query->filterByCursoC39TipoApoioSocial(array(12, 34)); // WHERE curso_c39_tipo_apoio_social IN (12, 34)
     * $query->filterByCursoC39TipoApoioSocial(array('min' => 12)); // WHERE curso_c39_tipo_apoio_social > 12
     * </code>
     *
     * @param     mixed $cursoC39TipoApoioSocial The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC39TipoApoioSocial($cursoC39TipoApoioSocial = null, $comparison = null)
    {
        if (is_array($cursoC39TipoApoioSocial)) {
            $useMinMax = false;
            if (isset($cursoC39TipoApoioSocial['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C39_TIPO_APOIO_SOCIAL, $cursoC39TipoApoioSocial['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC39TipoApoioSocial['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C39_TIPO_APOIO_SOCIAL, $cursoC39TipoApoioSocial['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C39_TIPO_APOIO_SOCIAL, $cursoC39TipoApoioSocial, $comparison);
    }

    /**
     * Filter the query on the curso_c40_atividade_complementar column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC40AtividadeComplementar(1234); // WHERE curso_c40_atividade_complementar = 1234
     * $query->filterByCursoC40AtividadeComplementar(array(12, 34)); // WHERE curso_c40_atividade_complementar IN (12, 34)
     * $query->filterByCursoC40AtividadeComplementar(array('min' => 12)); // WHERE curso_c40_atividade_complementar > 12
     * </code>
     *
     * @param     mixed $cursoC40AtividadeComplementar The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC40AtividadeComplementar($cursoC40AtividadeComplementar = null, $comparison = null)
    {
        if (is_array($cursoC40AtividadeComplementar)) {
            $useMinMax = false;
            if (isset($cursoC40AtividadeComplementar['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C40_ATIVIDADE_COMPLEMENTAR, $cursoC40AtividadeComplementar['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC40AtividadeComplementar['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C40_ATIVIDADE_COMPLEMENTAR, $cursoC40AtividadeComplementar['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C40_ATIVIDADE_COMPLEMENTAR, $cursoC40AtividadeComplementar, $comparison);
    }

    /**
     * Filter the query on the curso_c41_atividade_complementar column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC41AtividadeComplementar(1234); // WHERE curso_c41_atividade_complementar = 1234
     * $query->filterByCursoC41AtividadeComplementar(array(12, 34)); // WHERE curso_c41_atividade_complementar IN (12, 34)
     * $query->filterByCursoC41AtividadeComplementar(array('min' => 12)); // WHERE curso_c41_atividade_complementar > 12
     * </code>
     *
     * @param     mixed $cursoC41AtividadeComplementar The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC41AtividadeComplementar($cursoC41AtividadeComplementar = null, $comparison = null)
    {
        if (is_array($cursoC41AtividadeComplementar)) {
            $useMinMax = false;
            if (isset($cursoC41AtividadeComplementar['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C41_ATIVIDADE_COMPLEMENTAR, $cursoC41AtividadeComplementar['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC41AtividadeComplementar['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C41_ATIVIDADE_COMPLEMENTAR, $cursoC41AtividadeComplementar['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C41_ATIVIDADE_COMPLEMENTAR, $cursoC41AtividadeComplementar, $comparison);
    }

    /**
     * Filter the query on the curso_c42_bolsa column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC42Bolsa(1234); // WHERE curso_c42_bolsa = 1234
     * $query->filterByCursoC42Bolsa(array(12, 34)); // WHERE curso_c42_bolsa IN (12, 34)
     * $query->filterByCursoC42Bolsa(array('min' => 12)); // WHERE curso_c42_bolsa > 12
     * </code>
     *
     * @param     mixed $cursoC42Bolsa The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC42Bolsa($cursoC42Bolsa = null, $comparison = null)
    {
        if (is_array($cursoC42Bolsa)) {
            $useMinMax = false;
            if (isset($cursoC42Bolsa['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C42_BOLSA, $cursoC42Bolsa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC42Bolsa['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C42_BOLSA, $cursoC42Bolsa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C42_BOLSA, $cursoC42Bolsa, $comparison);
    }

    /**
     * Filter the query on the curso_c43_atividade_complementar column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC43AtividadeComplementar(1234); // WHERE curso_c43_atividade_complementar = 1234
     * $query->filterByCursoC43AtividadeComplementar(array(12, 34)); // WHERE curso_c43_atividade_complementar IN (12, 34)
     * $query->filterByCursoC43AtividadeComplementar(array('min' => 12)); // WHERE curso_c43_atividade_complementar > 12
     * </code>
     *
     * @param     mixed $cursoC43AtividadeComplementar The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC43AtividadeComplementar($cursoC43AtividadeComplementar = null, $comparison = null)
    {
        if (is_array($cursoC43AtividadeComplementar)) {
            $useMinMax = false;
            if (isset($cursoC43AtividadeComplementar['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C43_ATIVIDADE_COMPLEMENTAR, $cursoC43AtividadeComplementar['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC43AtividadeComplementar['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C43_ATIVIDADE_COMPLEMENTAR, $cursoC43AtividadeComplementar['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C43_ATIVIDADE_COMPLEMENTAR, $cursoC43AtividadeComplementar, $comparison);
    }

    /**
     * Filter the query on the curso_c44_bolsa column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC44Bolsa(1234); // WHERE curso_c44_bolsa = 1234
     * $query->filterByCursoC44Bolsa(array(12, 34)); // WHERE curso_c44_bolsa IN (12, 34)
     * $query->filterByCursoC44Bolsa(array('min' => 12)); // WHERE curso_c44_bolsa > 12
     * </code>
     *
     * @param     mixed $cursoC44Bolsa The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC44Bolsa($cursoC44Bolsa = null, $comparison = null)
    {
        if (is_array($cursoC44Bolsa)) {
            $useMinMax = false;
            if (isset($cursoC44Bolsa['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C44_BOLSA, $cursoC44Bolsa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC44Bolsa['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C44_BOLSA, $cursoC44Bolsa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C44_BOLSA, $cursoC44Bolsa, $comparison);
    }

    /**
     * Filter the query on the curso_c45_atividade_complementar column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC45AtividadeComplementar(1234); // WHERE curso_c45_atividade_complementar = 1234
     * $query->filterByCursoC45AtividadeComplementar(array(12, 34)); // WHERE curso_c45_atividade_complementar IN (12, 34)
     * $query->filterByCursoC45AtividadeComplementar(array('min' => 12)); // WHERE curso_c45_atividade_complementar > 12
     * </code>
     *
     * @param     mixed $cursoC45AtividadeComplementar The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC45AtividadeComplementar($cursoC45AtividadeComplementar = null, $comparison = null)
    {
        if (is_array($cursoC45AtividadeComplementar)) {
            $useMinMax = false;
            if (isset($cursoC45AtividadeComplementar['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C45_ATIVIDADE_COMPLEMENTAR, $cursoC45AtividadeComplementar['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC45AtividadeComplementar['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C45_ATIVIDADE_COMPLEMENTAR, $cursoC45AtividadeComplementar['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C45_ATIVIDADE_COMPLEMENTAR, $cursoC45AtividadeComplementar, $comparison);
    }

    /**
     * Filter the query on the curso_c46_bolsa column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC46Bolsa(1234); // WHERE curso_c46_bolsa = 1234
     * $query->filterByCursoC46Bolsa(array(12, 34)); // WHERE curso_c46_bolsa IN (12, 34)
     * $query->filterByCursoC46Bolsa(array('min' => 12)); // WHERE curso_c46_bolsa > 12
     * </code>
     *
     * @param     mixed $cursoC46Bolsa The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC46Bolsa($cursoC46Bolsa = null, $comparison = null)
    {
        if (is_array($cursoC46Bolsa)) {
            $useMinMax = false;
            if (isset($cursoC46Bolsa['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C46_BOLSA, $cursoC46Bolsa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC46Bolsa['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C46_BOLSA, $cursoC46Bolsa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C46_BOLSA, $cursoC46Bolsa, $comparison);
    }

    /**
     * Filter the query on the curso_c47_atividade_complementar column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC47AtividadeComplementar(1234); // WHERE curso_c47_atividade_complementar = 1234
     * $query->filterByCursoC47AtividadeComplementar(array(12, 34)); // WHERE curso_c47_atividade_complementar IN (12, 34)
     * $query->filterByCursoC47AtividadeComplementar(array('min' => 12)); // WHERE curso_c47_atividade_complementar > 12
     * </code>
     *
     * @param     mixed $cursoC47AtividadeComplementar The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC47AtividadeComplementar($cursoC47AtividadeComplementar = null, $comparison = null)
    {
        if (is_array($cursoC47AtividadeComplementar)) {
            $useMinMax = false;
            if (isset($cursoC47AtividadeComplementar['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C47_ATIVIDADE_COMPLEMENTAR, $cursoC47AtividadeComplementar['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC47AtividadeComplementar['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C47_ATIVIDADE_COMPLEMENTAR, $cursoC47AtividadeComplementar['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C47_ATIVIDADE_COMPLEMENTAR, $cursoC47AtividadeComplementar, $comparison);
    }

    /**
     * Filter the query on the curso_c48_bolsa column
     *
     * Example usage:
     * <code>
     * $query->filterByCursoC48Bolsa(1234); // WHERE curso_c48_bolsa = 1234
     * $query->filterByCursoC48Bolsa(array(12, 34)); // WHERE curso_c48_bolsa IN (12, 34)
     * $query->filterByCursoC48Bolsa(array('min' => 12)); // WHERE curso_c48_bolsa > 12
     * </code>
     *
     * @param     mixed $cursoC48Bolsa The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByCursoC48Bolsa($cursoC48Bolsa = null, $comparison = null)
    {
        if (is_array($cursoC48Bolsa)) {
            $useMinMax = false;
            if (isset($cursoC48Bolsa['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C48_BOLSA, $cursoC48Bolsa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC48Bolsa['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C48_BOLSA, $cursoC48Bolsa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C48_BOLSA, $cursoC48Bolsa, $comparison);
    }

    /**
     * Filter the query on the curso_c49_semestre_conclusao column
     *
     * Example usage:
     * <code>
     * $query->filterBycursoC49SemestreConclusao(1234); // WHERE curso_c49_semestre_conclusao = 1234
     * $query->filterBycursoC49SemestreConclusao(array(12, 34)); // WHERE curso_c49_semestre_conclusao IN (12, 34)
     * $query->filterBycursoC49SemestreConclusao(array('min' => 12)); // WHERE curso_c49_semestre_conclusao > 12
     * </code>
     *
     * @param     mixed $cursoC49SemestreConclusao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterBycursoC49SemestreConclusao($cursoC49SemestreConclusao = null, $comparison = null)
    {
        if (is_array($cursoC49SemestreConclusao)) {
            $useMinMax = false;
            if (isset($cursoC49SemestreConclusao['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C49_SEMESTRE_CONCLUSAO, $cursoC49SemestreConclusao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC49SemestreConclusao['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C49_SEMESTRE_CONCLUSAO, $cursoC49SemestreConclusao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C49_SEMESTRE_CONCLUSAO, $cursoC49SemestreConclusao, $comparison);
    }

    /**
     * Filter the query on the curso_c50_aluno_parfor column
     *
     * Example usage:
     * <code>
     * $query->filterBycursoC50AlunoParfor(1234); // WHERE curso_c50_aluno_parfor = 1234
     * $query->filterBycursoC50AlunoParfor(array(12, 34)); // WHERE curso_c50_aluno_parfor IN (12, 34)
     * $query->filterBycursoC50AlunoParfor(array('min' => 12)); // WHERE curso_c50_aluno_parfor > 12
     * </code>
     *
     * @param     mixed $cursoC50AlunoParfor The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterBycursoC50AlunoParfor($cursoC50AlunoParfor = null, $comparison = null)
    {
        if (is_array($cursoC50AlunoParfor)) {
            $useMinMax = false;
            if (isset($cursoC50AlunoParfor['min'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C50_ALUNO_PARFOR, $cursoC50AlunoParfor['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cursoC50AlunoParfor['max'])) {
                $this->addUsingAlias(Censo2009Peer::CURSO_C50_ALUNO_PARFOR, $cursoC50AlunoParfor['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(Censo2009Peer::CURSO_C50_ALUNO_PARFOR, $cursoC50AlunoParfor, $comparison);
    }

    /**
     * Filter the query on the exportado column
     *
     * Example usage:
     * <code>
     * $query->filterByExportado(true); // WHERE exportado = true
     * $query->filterByExportado('yes'); // WHERE exportado = true
     * </code>
     *
     * @param     boolean|string $exportado The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterByExportado($exportado = null, $comparison = null)
    {
        if (is_string($exportado)) {
            $exportado = in_array(strtolower($exportado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(Censo2009Peer::EXPORTADO, $exportado, $comparison);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(Censo2009Peer::ID, $id, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   Censo2009 $censo2009 Object to remove from the list of results
     *
     * @return Censo2009Query The current query, for fluid interface
     */
    public function prune($censo2009 = null)
    {
        if ($censo2009) {
            $this->addUsingAlias(Censo2009Peer::ID, $censo2009->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
