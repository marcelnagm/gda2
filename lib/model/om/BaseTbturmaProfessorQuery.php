<?php


/**
 * Base class that represents a query for the 'tbturma_professor' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:40 2013
 *
 * @method TbturmaProfessorQuery orderByIdTurma($order = Criteria::ASC) Order by the id_turma column
 * @method TbturmaProfessorQuery orderByMatriculaProf($order = Criteria::ASC) Order by the matricula_prof column
 *
 * @method TbturmaProfessorQuery groupByIdTurma() Group by the id_turma column
 * @method TbturmaProfessorQuery groupByMatriculaProf() Group by the matricula_prof column
 *
 * @method TbturmaProfessorQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbturmaProfessorQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbturmaProfessorQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbturmaProfessorQuery leftJoinTbturma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturma relation
 * @method TbturmaProfessorQuery rightJoinTbturma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturma relation
 * @method TbturmaProfessorQuery innerJoinTbturma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturma relation
 *
 * @method TbturmaProfessorQuery leftJoinTbprofessor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbprofessor relation
 * @method TbturmaProfessorQuery rightJoinTbprofessor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbprofessor relation
 * @method TbturmaProfessorQuery innerJoinTbprofessor($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbprofessor relation
 *
 * @method TbturmaProfessor findOne(PropelPDO $con = null) Return the first TbturmaProfessor matching the query
 * @method TbturmaProfessor findOneOrCreate(PropelPDO $con = null) Return the first TbturmaProfessor matching the query, or a new TbturmaProfessor object populated from the query conditions when no match is found
 *
 * @method TbturmaProfessor findOneByIdTurma(int $id_turma) Return the first TbturmaProfessor filtered by the id_turma column
 * @method TbturmaProfessor findOneByMatriculaProf(int $matricula_prof) Return the first TbturmaProfessor filtered by the matricula_prof column
 *
 * @method array findByIdTurma(int $id_turma) Return TbturmaProfessor objects filtered by the id_turma column
 * @method array findByMatriculaProf(int $matricula_prof) Return TbturmaProfessor objects filtered by the matricula_prof column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbturmaProfessorQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbturmaProfessorQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'TbturmaProfessor', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbturmaProfessorQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbturmaProfessorQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbturmaProfessorQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbturmaProfessorQuery) {
            return $criteria;
        }
        $query = new TbturmaProfessorQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj = $c->findPk(array(12, 34), $con);
     * </code>
     *
     * @param array $key Primary key to use for the query
                         A Primary key composition: [$id_turma, $matricula_prof]
     * @param     PropelPDO $con an optional connection object
     *
     * @return   TbturmaProfessor|TbturmaProfessor[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbturmaProfessorPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1]))))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbturmaProfessorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   TbturmaProfessor A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_TURMA, MATRICULA_PROF FROM tbturma_professor WHERE ID_TURMA = :p0 AND MATRICULA_PROF = :p1';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key[0], PDO::PARAM_INT);
            $stmt->bindValue(':p1', $key[1], PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new TbturmaProfessor();
            $obj->hydrate($row);
            TbturmaProfessorPeer::addInstanceToPool($obj, serialize(array((string) $key[0], (string) $key[1])));
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return TbturmaProfessor|TbturmaProfessor[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|TbturmaProfessor[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {
        $this->addUsingAlias(TbturmaProfessorPeer::ID_TURMA, $key[0], Criteria::EQUAL);
        $this->addUsingAlias(TbturmaProfessorPeer::MATRICULA_PROF, $key[1], Criteria::EQUAL);

        return $this;
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {
        if (empty($keys)) {
            return $this->add(null, '1<>1', Criteria::CUSTOM);
        }
        foreach ($keys as $key) {
            $cton0 = $this->getNewCriterion(TbturmaProfessorPeer::ID_TURMA, $key[0], Criteria::EQUAL);
            $cton1 = $this->getNewCriterion(TbturmaProfessorPeer::MATRICULA_PROF, $key[1], Criteria::EQUAL);
            $cton0->addAnd($cton1);
            $this->addOr($cton0);
        }

        return $this;
    }

    /**
     * Filter the query on the id_turma column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTurma(1234); // WHERE id_turma = 1234
     * $query->filterByIdTurma(array(12, 34)); // WHERE id_turma IN (12, 34)
     * $query->filterByIdTurma(array('min' => 12)); // WHERE id_turma > 12
     * </code>
     *
     * @see       filterByTbturma()
     *
     * @param     mixed $idTurma The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function filterByIdTurma($idTurma = null, $comparison = null)
    {
        if (is_array($idTurma) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbturmaProfessorPeer::ID_TURMA, $idTurma, $comparison);
    }

    /**
     * Filter the query on the matricula_prof column
     *
     * Example usage:
     * <code>
     * $query->filterByMatriculaProf(1234); // WHERE matricula_prof = 1234
     * $query->filterByMatriculaProf(array(12, 34)); // WHERE matricula_prof IN (12, 34)
     * $query->filterByMatriculaProf(array('min' => 12)); // WHERE matricula_prof > 12
     * </code>
     *
     * @see       filterByTbprofessor()
     *
     * @param     mixed $matriculaProf The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function filterByMatriculaProf($matriculaProf = null, $comparison = null)
    {
        if (is_array($matriculaProf) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbturmaProfessorPeer::MATRICULA_PROF, $matriculaProf, $comparison);
    }

    /**
     * Filter the query by a related Tbturma object
     *
     * @param   Tbturma|PropelObjectCollection $tbturma The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaProfessorQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturma($tbturma, $comparison = null)
    {
        if ($tbturma instanceof Tbturma) {
            return $this
                ->addUsingAlias(TbturmaProfessorPeer::ID_TURMA, $tbturma->getIdTurma(), $comparison);
        } elseif ($tbturma instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaProfessorPeer::ID_TURMA, $tbturma->toKeyValue('PrimaryKey', 'IdTurma'), $comparison);
        } else {
            throw new PropelException('filterByTbturma() only accepts arguments of type Tbturma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function joinTbturma($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturma');
        }

        return $this;
    }

    /**
     * Use the Tbturma relation Tbturma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturma', 'TbturmaQuery');
    }

    /**
     * Filter the query by a related Tbprofessor object
     *
     * @param   Tbprofessor|PropelObjectCollection $tbprofessor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaProfessorQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbprofessor($tbprofessor, $comparison = null)
    {
        if ($tbprofessor instanceof Tbprofessor) {
            return $this
                ->addUsingAlias(TbturmaProfessorPeer::MATRICULA_PROF, $tbprofessor->getMatriculaProf(), $comparison);
        } elseif ($tbprofessor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaProfessorPeer::MATRICULA_PROF, $tbprofessor->toKeyValue('PrimaryKey', 'MatriculaProf'), $comparison);
        } else {
            throw new PropelException('filterByTbprofessor() only accepts arguments of type Tbprofessor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbprofessor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function joinTbprofessor($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbprofessor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbprofessor');
        }

        return $this;
    }

    /**
     * Use the Tbprofessor relation Tbprofessor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbprofessorQuery A secondary query class using the current class as primary query
     */
    public function useTbprofessorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbprofessor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbprofessor', 'TbprofessorQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   TbturmaProfessor $tbturmaProfessor Object to remove from the list of results
     *
     * @return TbturmaProfessorQuery The current query, for fluid interface
     */
    public function prune($tbturmaProfessor = null)
    {
        if ($tbturmaProfessor) {
            $this->addCond('pruneCond0', $this->getAliasedColName(TbturmaProfessorPeer::ID_TURMA), $tbturmaProfessor->getIdTurma(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond1', $this->getAliasedColName(TbturmaProfessorPeer::MATRICULA_PROF), $tbturmaProfessor->getMatriculaProf(), Criteria::NOT_EQUAL);
            $this->combine(array('pruneCond0', 'pruneCond1'), Criteria::LOGICAL_OR);
        }

        return $this;
    }

}
