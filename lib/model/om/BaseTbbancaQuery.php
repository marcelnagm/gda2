<?php


/**
 * Base class that represents a query for the 'tbbanca' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:38 2013
 *
 * @method TbbancaQuery orderByBancaId($order = Criteria::ASC) Order by the banca_id column
 * @method TbbancaQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbbancaQuery orderByNomeorientador($order = Criteria::ASC) Order by the nomeorientador column
 * @method TbbancaQuery orderByPrimeiromembro($order = Criteria::ASC) Order by the primeiromembro column
 * @method TbbancaQuery orderBySegundomembro($order = Criteria::ASC) Order by the segundomembro column
 * @method TbbancaQuery orderByTerceiromembro($order = Criteria::ASC) Order by the terceiromembro column
 * @method TbbancaQuery orderByQuartomembro($order = Criteria::ASC) Order by the quartomembro column
 * @method TbbancaQuery orderByDatadefesa($order = Criteria::ASC) Order by the datadefesa column
 * @method TbbancaQuery orderByResultado($order = Criteria::ASC) Order by the resultado column
 * @method TbbancaQuery orderByMediabanca($order = Criteria::ASC) Order by the mediabanca column
 * @method TbbancaQuery orderByTitulomonografia($order = Criteria::ASC) Order by the titulomonografia column
 *
 * @method TbbancaQuery groupByBancaId() Group by the banca_id column
 * @method TbbancaQuery groupByMatricula() Group by the matricula column
 * @method TbbancaQuery groupByNomeorientador() Group by the nomeorientador column
 * @method TbbancaQuery groupByPrimeiromembro() Group by the primeiromembro column
 * @method TbbancaQuery groupBySegundomembro() Group by the segundomembro column
 * @method TbbancaQuery groupByTerceiromembro() Group by the terceiromembro column
 * @method TbbancaQuery groupByQuartomembro() Group by the quartomembro column
 * @method TbbancaQuery groupByDatadefesa() Group by the datadefesa column
 * @method TbbancaQuery groupByResultado() Group by the resultado column
 * @method TbbancaQuery groupByMediabanca() Group by the mediabanca column
 * @method TbbancaQuery groupByTitulomonografia() Group by the titulomonografia column
 *
 * @method TbbancaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbbancaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbbancaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbbancaQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbbancaQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbbancaQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method Tbbanca findOne(PropelPDO $con = null) Return the first Tbbanca matching the query
 * @method Tbbanca findOneOrCreate(PropelPDO $con = null) Return the first Tbbanca matching the query, or a new Tbbanca object populated from the query conditions when no match is found
 *
 * @method Tbbanca findOneByBancaId(int $banca_id) Return the first Tbbanca filtered by the banca_id column
 * @method Tbbanca findOneByMatricula(string $matricula) Return the first Tbbanca filtered by the matricula column
 * @method Tbbanca findOneByNomeorientador(string $nomeorientador) Return the first Tbbanca filtered by the nomeorientador column
 * @method Tbbanca findOneByPrimeiromembro(string $primeiromembro) Return the first Tbbanca filtered by the primeiromembro column
 * @method Tbbanca findOneBySegundomembro(string $segundomembro) Return the first Tbbanca filtered by the segundomembro column
 * @method Tbbanca findOneByTerceiromembro(string $terceiromembro) Return the first Tbbanca filtered by the terceiromembro column
 * @method Tbbanca findOneByQuartomembro(string $quartomembro) Return the first Tbbanca filtered by the quartomembro column
 * @method Tbbanca findOneByDatadefesa(string $datadefesa) Return the first Tbbanca filtered by the datadefesa column
 * @method Tbbanca findOneByResultado(string $resultado) Return the first Tbbanca filtered by the resultado column
 * @method Tbbanca findOneByMediabanca(string $mediabanca) Return the first Tbbanca filtered by the mediabanca column
 * @method Tbbanca findOneByTitulomonografia(string $titulomonografia) Return the first Tbbanca filtered by the titulomonografia column
 *
 * @method array findByBancaId(int $banca_id) Return Tbbanca objects filtered by the banca_id column
 * @method array findByMatricula(string $matricula) Return Tbbanca objects filtered by the matricula column
 * @method array findByNomeorientador(string $nomeorientador) Return Tbbanca objects filtered by the nomeorientador column
 * @method array findByPrimeiromembro(string $primeiromembro) Return Tbbanca objects filtered by the primeiromembro column
 * @method array findBySegundomembro(string $segundomembro) Return Tbbanca objects filtered by the segundomembro column
 * @method array findByTerceiromembro(string $terceiromembro) Return Tbbanca objects filtered by the terceiromembro column
 * @method array findByQuartomembro(string $quartomembro) Return Tbbanca objects filtered by the quartomembro column
 * @method array findByDatadefesa(string $datadefesa) Return Tbbanca objects filtered by the datadefesa column
 * @method array findByResultado(string $resultado) Return Tbbanca objects filtered by the resultado column
 * @method array findByMediabanca(string $mediabanca) Return Tbbanca objects filtered by the mediabanca column
 * @method array findByTitulomonografia(string $titulomonografia) Return Tbbanca objects filtered by the titulomonografia column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbbancaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbbancaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbbanca', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbbancaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbbancaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbbancaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbbancaQuery) {
            return $criteria;
        }
        $query = new TbbancaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbbanca|Tbbanca[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbbancaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbbancaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbbanca A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT BANCA_ID, MATRICULA, NOMEORIENTADOR, PRIMEIROMEMBRO, SEGUNDOMEMBRO, TERCEIROMEMBRO, QUARTOMEMBRO, DATADEFESA, RESULTADO, MEDIABANCA, TITULOMONOGRAFIA FROM tbbanca WHERE BANCA_ID = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbbanca();
            $obj->hydrate($row);
            TbbancaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbbanca|Tbbanca[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbbanca[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbbancaPeer::BANCA_ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbbancaPeer::BANCA_ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the banca_id column
     *
     * Example usage:
     * <code>
     * $query->filterByBancaId(1234); // WHERE banca_id = 1234
     * $query->filterByBancaId(array(12, 34)); // WHERE banca_id IN (12, 34)
     * $query->filterByBancaId(array('min' => 12)); // WHERE banca_id > 12
     * </code>
     *
     * @param     mixed $bancaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByBancaId($bancaId = null, $comparison = null)
    {
        if (is_array($bancaId) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbbancaPeer::BANCA_ID, $bancaId, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @see       filterByTbaluno()
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbbancaPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbbancaPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the nomeorientador column
     *
     * Example usage:
     * <code>
     * $query->filterByNomeorientador('fooValue');   // WHERE nomeorientador = 'fooValue'
     * $query->filterByNomeorientador('%fooValue%'); // WHERE nomeorientador LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nomeorientador The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByNomeorientador($nomeorientador = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nomeorientador)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nomeorientador)) {
                $nomeorientador = str_replace('*', '%', $nomeorientador);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::NOMEORIENTADOR, $nomeorientador, $comparison);
    }

    /**
     * Filter the query on the primeiromembro column
     *
     * Example usage:
     * <code>
     * $query->filterByPrimeiromembro('fooValue');   // WHERE primeiromembro = 'fooValue'
     * $query->filterByPrimeiromembro('%fooValue%'); // WHERE primeiromembro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $primeiromembro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByPrimeiromembro($primeiromembro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($primeiromembro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $primeiromembro)) {
                $primeiromembro = str_replace('*', '%', $primeiromembro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::PRIMEIROMEMBRO, $primeiromembro, $comparison);
    }

    /**
     * Filter the query on the segundomembro column
     *
     * Example usage:
     * <code>
     * $query->filterBySegundomembro('fooValue');   // WHERE segundomembro = 'fooValue'
     * $query->filterBySegundomembro('%fooValue%'); // WHERE segundomembro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $segundomembro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterBySegundomembro($segundomembro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($segundomembro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $segundomembro)) {
                $segundomembro = str_replace('*', '%', $segundomembro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::SEGUNDOMEMBRO, $segundomembro, $comparison);
    }

    /**
     * Filter the query on the terceiromembro column
     *
     * Example usage:
     * <code>
     * $query->filterByTerceiromembro('fooValue');   // WHERE terceiromembro = 'fooValue'
     * $query->filterByTerceiromembro('%fooValue%'); // WHERE terceiromembro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $terceiromembro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByTerceiromembro($terceiromembro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($terceiromembro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $terceiromembro)) {
                $terceiromembro = str_replace('*', '%', $terceiromembro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::TERCEIROMEMBRO, $terceiromembro, $comparison);
    }

    /**
     * Filter the query on the quartomembro column
     *
     * Example usage:
     * <code>
     * $query->filterByQuartomembro('fooValue');   // WHERE quartomembro = 'fooValue'
     * $query->filterByQuartomembro('%fooValue%'); // WHERE quartomembro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $quartomembro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByQuartomembro($quartomembro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($quartomembro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $quartomembro)) {
                $quartomembro = str_replace('*', '%', $quartomembro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::QUARTOMEMBRO, $quartomembro, $comparison);
    }

    /**
     * Filter the query on the datadefesa column
     *
     * Example usage:
     * <code>
     * $query->filterByDatadefesa('2011-03-14'); // WHERE datadefesa = '2011-03-14'
     * $query->filterByDatadefesa('now'); // WHERE datadefesa = '2011-03-14'
     * $query->filterByDatadefesa(array('max' => 'yesterday')); // WHERE datadefesa > '2011-03-13'
     * </code>
     *
     * @param     mixed $datadefesa The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByDatadefesa($datadefesa = null, $comparison = null)
    {
        if (is_array($datadefesa)) {
            $useMinMax = false;
            if (isset($datadefesa['min'])) {
                $this->addUsingAlias(TbbancaPeer::DATADEFESA, $datadefesa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($datadefesa['max'])) {
                $this->addUsingAlias(TbbancaPeer::DATADEFESA, $datadefesa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::DATADEFESA, $datadefesa, $comparison);
    }

    /**
     * Filter the query on the resultado column
     *
     * Example usage:
     * <code>
     * $query->filterByResultado('fooValue');   // WHERE resultado = 'fooValue'
     * $query->filterByResultado('%fooValue%'); // WHERE resultado LIKE '%fooValue%'
     * </code>
     *
     * @param     string $resultado The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByResultado($resultado = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($resultado)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $resultado)) {
                $resultado = str_replace('*', '%', $resultado);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::RESULTADO, $resultado, $comparison);
    }

    /**
     * Filter the query on the mediabanca column
     *
     * Example usage:
     * <code>
     * $query->filterByMediabanca(1234); // WHERE mediabanca = 1234
     * $query->filterByMediabanca(array(12, 34)); // WHERE mediabanca IN (12, 34)
     * $query->filterByMediabanca(array('min' => 12)); // WHERE mediabanca > 12
     * </code>
     *
     * @param     mixed $mediabanca The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByMediabanca($mediabanca = null, $comparison = null)
    {
        if (is_array($mediabanca)) {
            $useMinMax = false;
            if (isset($mediabanca['min'])) {
                $this->addUsingAlias(TbbancaPeer::MEDIABANCA, $mediabanca['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mediabanca['max'])) {
                $this->addUsingAlias(TbbancaPeer::MEDIABANCA, $mediabanca['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::MEDIABANCA, $mediabanca, $comparison);
    }

    /**
     * Filter the query on the titulomonografia column
     *
     * Example usage:
     * <code>
     * $query->filterByTitulomonografia('fooValue');   // WHERE titulomonografia = 'fooValue'
     * $query->filterByTitulomonografia('%fooValue%'); // WHERE titulomonografia LIKE '%fooValue%'
     * </code>
     *
     * @param     string $titulomonografia The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function filterByTitulomonografia($titulomonografia = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($titulomonografia)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $titulomonografia)) {
                $titulomonografia = str_replace('*', '%', $titulomonografia);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbbancaPeer::TITULOMONOGRAFIA, $titulomonografia, $comparison);
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbbancaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbbancaPeer::MATRICULA, $tbaluno->getMatricula(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbbancaPeer::MATRICULA, $tbaluno->toKeyValue('PrimaryKey', 'Matricula'), $comparison);
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbbanca $tbbanca Object to remove from the list of results
     *
     * @return TbbancaQuery The current query, for fluid interface
     */
    public function prune($tbbanca = null)
    {
        if ($tbbanca) {
            $this->addUsingAlias(TbbancaPeer::BANCA_ID, $tbbanca->getBancaId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
