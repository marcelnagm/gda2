<?php


/**
 * Base class that represents a query for the 'tbalunodiploma' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:37 2013
 *
 * @method TbalunodiplomaQuery orderByIdAlunoDiploma($order = Criteria::ASC) Order by the id_aluno_diploma column
 * @method TbalunodiplomaQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbalunodiplomaQuery orderByDtEntrega($order = Criteria::ASC) Order by the dt_entrega column
 * @method TbalunodiplomaQuery orderByDtEntregaHistorico($order = Criteria::ASC) Order by the dt_entrega_historico column
 * @method TbalunodiplomaQuery orderByDtEnade($order = Criteria::ASC) Order by the dt_enade column
 * @method TbalunodiplomaQuery orderByNRegistro($order = Criteria::ASC) Order by the n_registro column
 * @method TbalunodiplomaQuery orderByDtRegistro($order = Criteria::ASC) Order by the dt_registro column
 * @method TbalunodiplomaQuery orderByLivro($order = Criteria::ASC) Order by the livro column
 * @method TbalunodiplomaQuery orderByFolha($order = Criteria::ASC) Order by the folha column
 * @method TbalunodiplomaQuery orderByNProcesso($order = Criteria::ASC) Order by the n_processo column
 * @method TbalunodiplomaQuery orderByObs($order = Criteria::ASC) Order by the obs column
 * @method TbalunodiplomaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbalunodiplomaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbalunodiplomaQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbalunodiplomaQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbalunodiplomaQuery groupByIdAlunoDiploma() Group by the id_aluno_diploma column
 * @method TbalunodiplomaQuery groupByMatricula() Group by the matricula column
 * @method TbalunodiplomaQuery groupByDtEntrega() Group by the dt_entrega column
 * @method TbalunodiplomaQuery groupByDtEntregaHistorico() Group by the dt_entrega_historico column
 * @method TbalunodiplomaQuery groupByDtEnade() Group by the dt_enade column
 * @method TbalunodiplomaQuery groupByNRegistro() Group by the n_registro column
 * @method TbalunodiplomaQuery groupByDtRegistro() Group by the dt_registro column
 * @method TbalunodiplomaQuery groupByLivro() Group by the livro column
 * @method TbalunodiplomaQuery groupByFolha() Group by the folha column
 * @method TbalunodiplomaQuery groupByNProcesso() Group by the n_processo column
 * @method TbalunodiplomaQuery groupByObs() Group by the obs column
 * @method TbalunodiplomaQuery groupByCreatedAt() Group by the created_at column
 * @method TbalunodiplomaQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbalunodiplomaQuery groupByCreatedBy() Group by the created_by column
 * @method TbalunodiplomaQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbalunodiplomaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbalunodiplomaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbalunodiplomaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbalunodiplomaQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbalunodiplomaQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbalunodiplomaQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method Tbalunodiploma findOne(PropelPDO $con = null) Return the first Tbalunodiploma matching the query
 * @method Tbalunodiploma findOneOrCreate(PropelPDO $con = null) Return the first Tbalunodiploma matching the query, or a new Tbalunodiploma object populated from the query conditions when no match is found
 *
 * @method Tbalunodiploma findOneByIdAlunoDiploma(int $id_aluno_diploma) Return the first Tbalunodiploma filtered by the id_aluno_diploma column
 * @method Tbalunodiploma findOneByMatricula(string $matricula) Return the first Tbalunodiploma filtered by the matricula column
 * @method Tbalunodiploma findOneByDtEntrega(string $dt_entrega) Return the first Tbalunodiploma filtered by the dt_entrega column
 * @method Tbalunodiploma findOneByDtEntregaHistorico(string $dt_entrega_historico) Return the first Tbalunodiploma filtered by the dt_entrega_historico column
 * @method Tbalunodiploma findOneByDtEnade(string $dt_enade) Return the first Tbalunodiploma filtered by the dt_enade column
 * @method Tbalunodiploma findOneByNRegistro(int $n_registro) Return the first Tbalunodiploma filtered by the n_registro column
 * @method Tbalunodiploma findOneByDtRegistro(string $dt_registro) Return the first Tbalunodiploma filtered by the dt_registro column
 * @method Tbalunodiploma findOneByLivro(string $livro) Return the first Tbalunodiploma filtered by the livro column
 * @method Tbalunodiploma findOneByFolha(int $folha) Return the first Tbalunodiploma filtered by the folha column
 * @method Tbalunodiploma findOneByNProcesso(string $n_processo) Return the first Tbalunodiploma filtered by the n_processo column
 * @method Tbalunodiploma findOneByObs(string $obs) Return the first Tbalunodiploma filtered by the obs column
 * @method Tbalunodiploma findOneByCreatedAt(string $created_at) Return the first Tbalunodiploma filtered by the created_at column
 * @method Tbalunodiploma findOneByUpdatedAt(string $updated_at) Return the first Tbalunodiploma filtered by the updated_at column
 * @method Tbalunodiploma findOneByCreatedBy(string $created_by) Return the first Tbalunodiploma filtered by the created_by column
 * @method Tbalunodiploma findOneByUpdatedBy(string $updated_by) Return the first Tbalunodiploma filtered by the updated_by column
 *
 * @method array findByIdAlunoDiploma(int $id_aluno_diploma) Return Tbalunodiploma objects filtered by the id_aluno_diploma column
 * @method array findByMatricula(string $matricula) Return Tbalunodiploma objects filtered by the matricula column
 * @method array findByDtEntrega(string $dt_entrega) Return Tbalunodiploma objects filtered by the dt_entrega column
 * @method array findByDtEntregaHistorico(string $dt_entrega_historico) Return Tbalunodiploma objects filtered by the dt_entrega_historico column
 * @method array findByDtEnade(string $dt_enade) Return Tbalunodiploma objects filtered by the dt_enade column
 * @method array findByNRegistro(int $n_registro) Return Tbalunodiploma objects filtered by the n_registro column
 * @method array findByDtRegistro(string $dt_registro) Return Tbalunodiploma objects filtered by the dt_registro column
 * @method array findByLivro(string $livro) Return Tbalunodiploma objects filtered by the livro column
 * @method array findByFolha(int $folha) Return Tbalunodiploma objects filtered by the folha column
 * @method array findByNProcesso(string $n_processo) Return Tbalunodiploma objects filtered by the n_processo column
 * @method array findByObs(string $obs) Return Tbalunodiploma objects filtered by the obs column
 * @method array findByCreatedAt(string $created_at) Return Tbalunodiploma objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbalunodiploma objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbalunodiploma objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbalunodiploma objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbalunodiplomaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbalunodiplomaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbalunodiploma', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbalunodiplomaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbalunodiplomaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbalunodiplomaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbalunodiplomaQuery) {
            return $criteria;
        }
        $query = new TbalunodiplomaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbalunodiploma|Tbalunodiploma[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbalunodiplomaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbalunodiplomaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbalunodiploma A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_ALUNO_DIPLOMA, MATRICULA, DT_ENTREGA, DT_ENTREGA_HISTORICO, DT_ENADE, N_REGISTRO, DT_REGISTRO, LIVRO, FOLHA, N_PROCESSO, OBS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbalunodiploma WHERE ID_ALUNO_DIPLOMA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbalunodiploma();
            $obj->hydrate($row);
            TbalunodiplomaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbalunodiploma|Tbalunodiploma[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbalunodiploma[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbalunodiplomaPeer::ID_ALUNO_DIPLOMA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbalunodiplomaPeer::ID_ALUNO_DIPLOMA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_aluno_diploma column
     *
     * Example usage:
     * <code>
     * $query->filterByIdAlunoDiploma(1234); // WHERE id_aluno_diploma = 1234
     * $query->filterByIdAlunoDiploma(array(12, 34)); // WHERE id_aluno_diploma IN (12, 34)
     * $query->filterByIdAlunoDiploma(array('min' => 12)); // WHERE id_aluno_diploma > 12
     * </code>
     *
     * @param     mixed $idAlunoDiploma The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByIdAlunoDiploma($idAlunoDiploma = null, $comparison = null)
    {
        if (is_array($idAlunoDiploma) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::ID_ALUNO_DIPLOMA, $idAlunoDiploma, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @see       filterByTbaluno()
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the dt_entrega column
     *
     * Example usage:
     * <code>
     * $query->filterByDtEntrega('2011-03-14'); // WHERE dt_entrega = '2011-03-14'
     * $query->filterByDtEntrega('now'); // WHERE dt_entrega = '2011-03-14'
     * $query->filterByDtEntrega(array('max' => 'yesterday')); // WHERE dt_entrega > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtEntrega The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByDtEntrega($dtEntrega = null, $comparison = null)
    {
        if (is_array($dtEntrega)) {
            $useMinMax = false;
            if (isset($dtEntrega['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_ENTREGA, $dtEntrega['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtEntrega['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_ENTREGA, $dtEntrega['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::DT_ENTREGA, $dtEntrega, $comparison);
    }

    /**
     * Filter the query on the dt_entrega_historico column
     *
     * Example usage:
     * <code>
     * $query->filterByDtEntregaHistorico('2011-03-14'); // WHERE dt_entrega_historico = '2011-03-14'
     * $query->filterByDtEntregaHistorico('now'); // WHERE dt_entrega_historico = '2011-03-14'
     * $query->filterByDtEntregaHistorico(array('max' => 'yesterday')); // WHERE dt_entrega_historico > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtEntregaHistorico The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByDtEntregaHistorico($dtEntregaHistorico = null, $comparison = null)
    {
        if (is_array($dtEntregaHistorico)) {
            $useMinMax = false;
            if (isset($dtEntregaHistorico['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_ENTREGA_HISTORICO, $dtEntregaHistorico['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtEntregaHistorico['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_ENTREGA_HISTORICO, $dtEntregaHistorico['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::DT_ENTREGA_HISTORICO, $dtEntregaHistorico, $comparison);
    }

    /**
     * Filter the query on the dt_enade column
     *
     * Example usage:
     * <code>
     * $query->filterByDtEnade('2011-03-14'); // WHERE dt_enade = '2011-03-14'
     * $query->filterByDtEnade('now'); // WHERE dt_enade = '2011-03-14'
     * $query->filterByDtEnade(array('max' => 'yesterday')); // WHERE dt_enade > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtEnade The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByDtEnade($dtEnade = null, $comparison = null)
    {
        if (is_array($dtEnade)) {
            $useMinMax = false;
            if (isset($dtEnade['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_ENADE, $dtEnade['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtEnade['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_ENADE, $dtEnade['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::DT_ENADE, $dtEnade, $comparison);
    }

    /**
     * Filter the query on the n_registro column
     *
     * Example usage:
     * <code>
     * $query->filterByNRegistro(1234); // WHERE n_registro = 1234
     * $query->filterByNRegistro(array(12, 34)); // WHERE n_registro IN (12, 34)
     * $query->filterByNRegistro(array('min' => 12)); // WHERE n_registro > 12
     * </code>
     *
     * @param     mixed $nRegistro The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByNRegistro($nRegistro = null, $comparison = null)
    {
        if (is_array($nRegistro)) {
            $useMinMax = false;
            if (isset($nRegistro['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::N_REGISTRO, $nRegistro['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($nRegistro['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::N_REGISTRO, $nRegistro['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::N_REGISTRO, $nRegistro, $comparison);
    }

    /**
     * Filter the query on the dt_registro column
     *
     * Example usage:
     * <code>
     * $query->filterByDtRegistro('2011-03-14'); // WHERE dt_registro = '2011-03-14'
     * $query->filterByDtRegistro('now'); // WHERE dt_registro = '2011-03-14'
     * $query->filterByDtRegistro(array('max' => 'yesterday')); // WHERE dt_registro > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtRegistro The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByDtRegistro($dtRegistro = null, $comparison = null)
    {
        if (is_array($dtRegistro)) {
            $useMinMax = false;
            if (isset($dtRegistro['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_REGISTRO, $dtRegistro['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtRegistro['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::DT_REGISTRO, $dtRegistro['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::DT_REGISTRO, $dtRegistro, $comparison);
    }

    /**
     * Filter the query on the livro column
     *
     * Example usage:
     * <code>
     * $query->filterByLivro('fooValue');   // WHERE livro = 'fooValue'
     * $query->filterByLivro('%fooValue%'); // WHERE livro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $livro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByLivro($livro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($livro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $livro)) {
                $livro = str_replace('*', '%', $livro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::LIVRO, $livro, $comparison);
    }

    /**
     * Filter the query on the folha column
     *
     * Example usage:
     * <code>
     * $query->filterByFolha(1234); // WHERE folha = 1234
     * $query->filterByFolha(array(12, 34)); // WHERE folha IN (12, 34)
     * $query->filterByFolha(array('min' => 12)); // WHERE folha > 12
     * </code>
     *
     * @param     mixed $folha The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByFolha($folha = null, $comparison = null)
    {
        if (is_array($folha)) {
            $useMinMax = false;
            if (isset($folha['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::FOLHA, $folha['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($folha['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::FOLHA, $folha['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::FOLHA, $folha, $comparison);
    }

    /**
     * Filter the query on the n_processo column
     *
     * Example usage:
     * <code>
     * $query->filterByNProcesso('fooValue');   // WHERE n_processo = 'fooValue'
     * $query->filterByNProcesso('%fooValue%'); // WHERE n_processo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nProcesso The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByNProcesso($nProcesso = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nProcesso)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nProcesso)) {
                $nProcesso = str_replace('*', '%', $nProcesso);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::N_PROCESSO, $nProcesso, $comparison);
    }

    /**
     * Filter the query on the obs column
     *
     * Example usage:
     * <code>
     * $query->filterByObs('fooValue');   // WHERE obs = 'fooValue'
     * $query->filterByObs('%fooValue%'); // WHERE obs LIKE '%fooValue%'
     * </code>
     *
     * @param     string $obs The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByObs($obs = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($obs)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $obs)) {
                $obs = str_replace('*', '%', $obs);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::OBS, $obs, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbalunodiplomaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunodiplomaPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbalunodiplomaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbalunodiplomaPeer::MATRICULA, $tbaluno->getMatricula(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbalunodiplomaPeer::MATRICULA, $tbaluno->toKeyValue('PrimaryKey', 'Matricula'), $comparison);
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbalunodiploma $tbalunodiploma Object to remove from the list of results
     *
     * @return TbalunodiplomaQuery The current query, for fluid interface
     */
    public function prune($tbalunodiploma = null)
    {
        if ($tbalunodiploma) {
            $this->addUsingAlias(TbalunodiplomaPeer::ID_ALUNO_DIPLOMA, $tbalunodiploma->getIdAlunoDiploma(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
