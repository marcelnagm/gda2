<?php


/**
 * Base class that represents a query for the 'tbaluno_atual' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:37 2013
 *
 * @method TbalunoAtualQuery orderByNome($order = Criteria::ASC) Order by the nome column
 * @method TbalunoAtualQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbalunoAtualQuery orderByDtNascimento($order = Criteria::ASC) Order by the dt_nascimento column
 * @method TbalunoAtualQuery orderByNaturalidade($order = Criteria::ASC) Order by the naturalidade column
 * @method TbalunoAtualQuery orderByUfNascimento($order = Criteria::ASC) Order by the uf_nascimento column
 * @method TbalunoAtualQuery orderByNacionalidade($order = Criteria::ASC) Order by the nacionalidade column
 * @method TbalunoAtualQuery orderBySexo($order = Criteria::ASC) Order by the sexo column
 * @method TbalunoAtualQuery orderByEstadoCivil($order = Criteria::ASC) Order by the estado_civil column
 * @method TbalunoAtualQuery orderByPai($order = Criteria::ASC) Order by the pai column
 * @method TbalunoAtualQuery orderByMae($order = Criteria::ASC) Order by the mae column
 * @method TbalunoAtualQuery orderByCelular($order = Criteria::ASC) Order by the celular column
 * @method TbalunoAtualQuery orderByFoneResidencial($order = Criteria::ASC) Order by the fone_residencial column
 * @method TbalunoAtualQuery orderByEmail1($order = Criteria::ASC) Order by the email1 column
 * @method TbalunoAtualQuery orderByEmail2($order = Criteria::ASC) Order by the email2 column
 * @method TbalunoAtualQuery orderByEndResidencial($order = Criteria::ASC) Order by the end_residencial column
 * @method TbalunoAtualQuery orderByBairroResidencial($order = Criteria::ASC) Order by the bairro_residencial column
 * @method TbalunoAtualQuery orderByCepResidencial($order = Criteria::ASC) Order by the cep_residencial column
 * @method TbalunoAtualQuery orderByNumero($order = Criteria::ASC) Order by the numero column
 * @method TbalunoAtualQuery orderByComplemento($order = Criteria::ASC) Order by the complemento column
 * @method TbalunoAtualQuery orderByGrau2($order = Criteria::ASC) Order by the grau_2 column
 * @method TbalunoAtualQuery orderByUfConc2($order = Criteria::ASC) Order by the uf_conc_2 column
 * @method TbalunoAtualQuery orderByAnoConcl2grau($order = Criteria::ASC) Order by the ano_concl_2grau column
 * @method TbalunoAtualQuery orderByLocalTrabalho($order = Criteria::ASC) Order by the local_trabalho column
 * @method TbalunoAtualQuery orderByEndTrabalho($order = Criteria::ASC) Order by the end_trabalho column
 * @method TbalunoAtualQuery orderByBairroTrabalho($order = Criteria::ASC) Order by the bairro_trabalho column
 * @method TbalunoAtualQuery orderByCepTrabalho($order = Criteria::ASC) Order by the cep_trabalho column
 * @method TbalunoAtualQuery orderByFoneTrabalho($order = Criteria::ASC) Order by the fone_trabalho column
 * @method TbalunoAtualQuery orderByRamalTrabalho($order = Criteria::ASC) Order by the ramal_trabalho column
 * @method TbalunoAtualQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbalunoAtualQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbalunoAtualQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbalunoAtualQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbalunoAtualQuery groupByNome() Group by the nome column
 * @method TbalunoAtualQuery groupByMatricula() Group by the matricula column
 * @method TbalunoAtualQuery groupByDtNascimento() Group by the dt_nascimento column
 * @method TbalunoAtualQuery groupByNaturalidade() Group by the naturalidade column
 * @method TbalunoAtualQuery groupByUfNascimento() Group by the uf_nascimento column
 * @method TbalunoAtualQuery groupByNacionalidade() Group by the nacionalidade column
 * @method TbalunoAtualQuery groupBySexo() Group by the sexo column
 * @method TbalunoAtualQuery groupByEstadoCivil() Group by the estado_civil column
 * @method TbalunoAtualQuery groupByPai() Group by the pai column
 * @method TbalunoAtualQuery groupByMae() Group by the mae column
 * @method TbalunoAtualQuery groupByCelular() Group by the celular column
 * @method TbalunoAtualQuery groupByFoneResidencial() Group by the fone_residencial column
 * @method TbalunoAtualQuery groupByEmail1() Group by the email1 column
 * @method TbalunoAtualQuery groupByEmail2() Group by the email2 column
 * @method TbalunoAtualQuery groupByEndResidencial() Group by the end_residencial column
 * @method TbalunoAtualQuery groupByBairroResidencial() Group by the bairro_residencial column
 * @method TbalunoAtualQuery groupByCepResidencial() Group by the cep_residencial column
 * @method TbalunoAtualQuery groupByNumero() Group by the numero column
 * @method TbalunoAtualQuery groupByComplemento() Group by the complemento column
 * @method TbalunoAtualQuery groupByGrau2() Group by the grau_2 column
 * @method TbalunoAtualQuery groupByUfConc2() Group by the uf_conc_2 column
 * @method TbalunoAtualQuery groupByAnoConcl2grau() Group by the ano_concl_2grau column
 * @method TbalunoAtualQuery groupByLocalTrabalho() Group by the local_trabalho column
 * @method TbalunoAtualQuery groupByEndTrabalho() Group by the end_trabalho column
 * @method TbalunoAtualQuery groupByBairroTrabalho() Group by the bairro_trabalho column
 * @method TbalunoAtualQuery groupByCepTrabalho() Group by the cep_trabalho column
 * @method TbalunoAtualQuery groupByFoneTrabalho() Group by the fone_trabalho column
 * @method TbalunoAtualQuery groupByRamalTrabalho() Group by the ramal_trabalho column
 * @method TbalunoAtualQuery groupByCreatedAt() Group by the created_at column
 * @method TbalunoAtualQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbalunoAtualQuery groupByCreatedBy() Group by the created_by column
 * @method TbalunoAtualQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbalunoAtualQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbalunoAtualQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbalunoAtualQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbalunoAtual findOne(PropelPDO $con = null) Return the first TbalunoAtual matching the query
 * @method TbalunoAtual findOneOrCreate(PropelPDO $con = null) Return the first TbalunoAtual matching the query, or a new TbalunoAtual object populated from the query conditions when no match is found
 *
 * @method TbalunoAtual findOneByNome(string $nome) Return the first TbalunoAtual filtered by the nome column
 * @method TbalunoAtual findOneByMatricula(string $matricula) Return the first TbalunoAtual filtered by the matricula column
 * @method TbalunoAtual findOneByDtNascimento(string $dt_nascimento) Return the first TbalunoAtual filtered by the dt_nascimento column
 * @method TbalunoAtual findOneByNaturalidade(string $naturalidade) Return the first TbalunoAtual filtered by the naturalidade column
 * @method TbalunoAtual findOneByUfNascimento(string $uf_nascimento) Return the first TbalunoAtual filtered by the uf_nascimento column
 * @method TbalunoAtual findOneByNacionalidade(string $nacionalidade) Return the first TbalunoAtual filtered by the nacionalidade column
 * @method TbalunoAtual findOneBySexo(string $sexo) Return the first TbalunoAtual filtered by the sexo column
 * @method TbalunoAtual findOneByEstadoCivil(string $estado_civil) Return the first TbalunoAtual filtered by the estado_civil column
 * @method TbalunoAtual findOneByPai(string $pai) Return the first TbalunoAtual filtered by the pai column
 * @method TbalunoAtual findOneByMae(string $mae) Return the first TbalunoAtual filtered by the mae column
 * @method TbalunoAtual findOneByCelular(string $celular) Return the first TbalunoAtual filtered by the celular column
 * @method TbalunoAtual findOneByFoneResidencial(string $fone_residencial) Return the first TbalunoAtual filtered by the fone_residencial column
 * @method TbalunoAtual findOneByEmail1(string $email1) Return the first TbalunoAtual filtered by the email1 column
 * @method TbalunoAtual findOneByEmail2(string $email2) Return the first TbalunoAtual filtered by the email2 column
 * @method TbalunoAtual findOneByEndResidencial(string $end_residencial) Return the first TbalunoAtual filtered by the end_residencial column
 * @method TbalunoAtual findOneByBairroResidencial(string $bairro_residencial) Return the first TbalunoAtual filtered by the bairro_residencial column
 * @method TbalunoAtual findOneByCepResidencial(string $cep_residencial) Return the first TbalunoAtual filtered by the cep_residencial column
 * @method TbalunoAtual findOneByNumero(string $numero) Return the first TbalunoAtual filtered by the numero column
 * @method TbalunoAtual findOneByComplemento(string $complemento) Return the first TbalunoAtual filtered by the complemento column
 * @method TbalunoAtual findOneByGrau2(string $grau_2) Return the first TbalunoAtual filtered by the grau_2 column
 * @method TbalunoAtual findOneByUfConc2(string $uf_conc_2) Return the first TbalunoAtual filtered by the uf_conc_2 column
 * @method TbalunoAtual findOneByAnoConcl2grau(string $ano_concl_2grau) Return the first TbalunoAtual filtered by the ano_concl_2grau column
 * @method TbalunoAtual findOneByLocalTrabalho(string $local_trabalho) Return the first TbalunoAtual filtered by the local_trabalho column
 * @method TbalunoAtual findOneByEndTrabalho(string $end_trabalho) Return the first TbalunoAtual filtered by the end_trabalho column
 * @method TbalunoAtual findOneByBairroTrabalho(string $bairro_trabalho) Return the first TbalunoAtual filtered by the bairro_trabalho column
 * @method TbalunoAtual findOneByCepTrabalho(string $cep_trabalho) Return the first TbalunoAtual filtered by the cep_trabalho column
 * @method TbalunoAtual findOneByFoneTrabalho(string $fone_trabalho) Return the first TbalunoAtual filtered by the fone_trabalho column
 * @method TbalunoAtual findOneByRamalTrabalho(string $ramal_trabalho) Return the first TbalunoAtual filtered by the ramal_trabalho column
 * @method TbalunoAtual findOneByCreatedAt(string $created_at) Return the first TbalunoAtual filtered by the created_at column
 * @method TbalunoAtual findOneByUpdatedAt(string $updated_at) Return the first TbalunoAtual filtered by the updated_at column
 * @method TbalunoAtual findOneByCreatedBy(string $created_by) Return the first TbalunoAtual filtered by the created_by column
 * @method TbalunoAtual findOneByUpdatedBy(string $updated_by) Return the first TbalunoAtual filtered by the updated_by column
 *
 * @method array findByNome(string $nome) Return TbalunoAtual objects filtered by the nome column
 * @method array findByMatricula(string $matricula) Return TbalunoAtual objects filtered by the matricula column
 * @method array findByDtNascimento(string $dt_nascimento) Return TbalunoAtual objects filtered by the dt_nascimento column
 * @method array findByNaturalidade(string $naturalidade) Return TbalunoAtual objects filtered by the naturalidade column
 * @method array findByUfNascimento(string $uf_nascimento) Return TbalunoAtual objects filtered by the uf_nascimento column
 * @method array findByNacionalidade(string $nacionalidade) Return TbalunoAtual objects filtered by the nacionalidade column
 * @method array findBySexo(string $sexo) Return TbalunoAtual objects filtered by the sexo column
 * @method array findByEstadoCivil(string $estado_civil) Return TbalunoAtual objects filtered by the estado_civil column
 * @method array findByPai(string $pai) Return TbalunoAtual objects filtered by the pai column
 * @method array findByMae(string $mae) Return TbalunoAtual objects filtered by the mae column
 * @method array findByCelular(string $celular) Return TbalunoAtual objects filtered by the celular column
 * @method array findByFoneResidencial(string $fone_residencial) Return TbalunoAtual objects filtered by the fone_residencial column
 * @method array findByEmail1(string $email1) Return TbalunoAtual objects filtered by the email1 column
 * @method array findByEmail2(string $email2) Return TbalunoAtual objects filtered by the email2 column
 * @method array findByEndResidencial(string $end_residencial) Return TbalunoAtual objects filtered by the end_residencial column
 * @method array findByBairroResidencial(string $bairro_residencial) Return TbalunoAtual objects filtered by the bairro_residencial column
 * @method array findByCepResidencial(string $cep_residencial) Return TbalunoAtual objects filtered by the cep_residencial column
 * @method array findByNumero(string $numero) Return TbalunoAtual objects filtered by the numero column
 * @method array findByComplemento(string $complemento) Return TbalunoAtual objects filtered by the complemento column
 * @method array findByGrau2(string $grau_2) Return TbalunoAtual objects filtered by the grau_2 column
 * @method array findByUfConc2(string $uf_conc_2) Return TbalunoAtual objects filtered by the uf_conc_2 column
 * @method array findByAnoConcl2grau(string $ano_concl_2grau) Return TbalunoAtual objects filtered by the ano_concl_2grau column
 * @method array findByLocalTrabalho(string $local_trabalho) Return TbalunoAtual objects filtered by the local_trabalho column
 * @method array findByEndTrabalho(string $end_trabalho) Return TbalunoAtual objects filtered by the end_trabalho column
 * @method array findByBairroTrabalho(string $bairro_trabalho) Return TbalunoAtual objects filtered by the bairro_trabalho column
 * @method array findByCepTrabalho(string $cep_trabalho) Return TbalunoAtual objects filtered by the cep_trabalho column
 * @method array findByFoneTrabalho(string $fone_trabalho) Return TbalunoAtual objects filtered by the fone_trabalho column
 * @method array findByRamalTrabalho(string $ramal_trabalho) Return TbalunoAtual objects filtered by the ramal_trabalho column
 * @method array findByCreatedAt(string $created_at) Return TbalunoAtual objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return TbalunoAtual objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return TbalunoAtual objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return TbalunoAtual objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbalunoAtualQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbalunoAtualQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'TbalunoAtual', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbalunoAtualQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbalunoAtualQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbalunoAtualQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbalunoAtualQuery) {
            return $criteria;
        }
        $query = new TbalunoAtualQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   TbalunoAtual|TbalunoAtual[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbalunoAtualPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbalunoAtualPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   TbalunoAtual A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT NOME, MATRICULA, DT_NASCIMENTO, NATURALIDADE, UF_NASCIMENTO, NACIONALIDADE, SEXO, ESTADO_CIVIL, PAI, MAE, CELULAR, FONE_RESIDENCIAL, EMAIL1, EMAIL2, END_RESIDENCIAL, BAIRRO_RESIDENCIAL, CEP_RESIDENCIAL, NUMERO, COMPLEMENTO, GRAU_2, UF_CONC_2, ANO_CONCL_2GRAU, LOCAL_TRABALHO, END_TRABALHO, BAIRRO_TRABALHO, CEP_TRABALHO, FONE_TRABALHO, RAMAL_TRABALHO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbaluno_atual WHERE MATRICULA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new TbalunoAtual();
            $obj->hydrate($row);
            TbalunoAtualPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return TbalunoAtual|TbalunoAtual[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|TbalunoAtual[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbalunoAtualPeer::MATRICULA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbalunoAtualPeer::MATRICULA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the nome column
     *
     * Example usage:
     * <code>
     * $query->filterByNome('fooValue');   // WHERE nome = 'fooValue'
     * $query->filterByNome('%fooValue%'); // WHERE nome LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nome The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByNome($nome = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nome)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nome)) {
                $nome = str_replace('*', '%', $nome);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::NOME, $nome, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbalunoAtualPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the dt_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByDtNascimento('2011-03-14'); // WHERE dt_nascimento = '2011-03-14'
     * $query->filterByDtNascimento('now'); // WHERE dt_nascimento = '2011-03-14'
     * $query->filterByDtNascimento(array('max' => 'yesterday')); // WHERE dt_nascimento > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtNascimento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByDtNascimento($dtNascimento = null, $comparison = null)
    {
        if (is_array($dtNascimento)) {
            $useMinMax = false;
            if (isset($dtNascimento['min'])) {
                $this->addUsingAlias(TbalunoAtualPeer::DT_NASCIMENTO, $dtNascimento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtNascimento['max'])) {
                $this->addUsingAlias(TbalunoAtualPeer::DT_NASCIMENTO, $dtNascimento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::DT_NASCIMENTO, $dtNascimento, $comparison);
    }

    /**
     * Filter the query on the naturalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNaturalidade('fooValue');   // WHERE naturalidade = 'fooValue'
     * $query->filterByNaturalidade('%fooValue%'); // WHERE naturalidade LIKE '%fooValue%'
     * </code>
     *
     * @param     string $naturalidade The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByNaturalidade($naturalidade = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($naturalidade)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $naturalidade)) {
                $naturalidade = str_replace('*', '%', $naturalidade);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::NATURALIDADE, $naturalidade, $comparison);
    }

    /**
     * Filter the query on the uf_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByUfNascimento('fooValue');   // WHERE uf_nascimento = 'fooValue'
     * $query->filterByUfNascimento('%fooValue%'); // WHERE uf_nascimento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ufNascimento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByUfNascimento($ufNascimento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ufNascimento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ufNascimento)) {
                $ufNascimento = str_replace('*', '%', $ufNascimento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::UF_NASCIMENTO, $ufNascimento, $comparison);
    }

    /**
     * Filter the query on the nacionalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNacionalidade('fooValue');   // WHERE nacionalidade = 'fooValue'
     * $query->filterByNacionalidade('%fooValue%'); // WHERE nacionalidade LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nacionalidade The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByNacionalidade($nacionalidade = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nacionalidade)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nacionalidade)) {
                $nacionalidade = str_replace('*', '%', $nacionalidade);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::NACIONALIDADE, $nacionalidade, $comparison);
    }

    /**
     * Filter the query on the sexo column
     *
     * Example usage:
     * <code>
     * $query->filterBySexo('fooValue');   // WHERE sexo = 'fooValue'
     * $query->filterBySexo('%fooValue%'); // WHERE sexo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sexo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterBySexo($sexo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sexo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sexo)) {
                $sexo = str_replace('*', '%', $sexo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::SEXO, $sexo, $comparison);
    }

    /**
     * Filter the query on the estado_civil column
     *
     * Example usage:
     * <code>
     * $query->filterByEstadoCivil('fooValue');   // WHERE estado_civil = 'fooValue'
     * $query->filterByEstadoCivil('%fooValue%'); // WHERE estado_civil LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estadoCivil The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByEstadoCivil($estadoCivil = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estadoCivil)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estadoCivil)) {
                $estadoCivil = str_replace('*', '%', $estadoCivil);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::ESTADO_CIVIL, $estadoCivil, $comparison);
    }

    /**
     * Filter the query on the pai column
     *
     * Example usage:
     * <code>
     * $query->filterByPai('fooValue');   // WHERE pai = 'fooValue'
     * $query->filterByPai('%fooValue%'); // WHERE pai LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pai The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByPai($pai = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pai)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pai)) {
                $pai = str_replace('*', '%', $pai);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::PAI, $pai, $comparison);
    }

    /**
     * Filter the query on the mae column
     *
     * Example usage:
     * <code>
     * $query->filterByMae('fooValue');   // WHERE mae = 'fooValue'
     * $query->filterByMae('%fooValue%'); // WHERE mae LIKE '%fooValue%'
     * </code>
     *
     * @param     string $mae The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByMae($mae = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($mae)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $mae)) {
                $mae = str_replace('*', '%', $mae);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::MAE, $mae, $comparison);
    }

    /**
     * Filter the query on the celular column
     *
     * Example usage:
     * <code>
     * $query->filterByCelular('fooValue');   // WHERE celular = 'fooValue'
     * $query->filterByCelular('%fooValue%'); // WHERE celular LIKE '%fooValue%'
     * </code>
     *
     * @param     string $celular The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByCelular($celular = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($celular)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $celular)) {
                $celular = str_replace('*', '%', $celular);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::CELULAR, $celular, $comparison);
    }

    /**
     * Filter the query on the fone_residencial column
     *
     * Example usage:
     * <code>
     * $query->filterByFoneResidencial('fooValue');   // WHERE fone_residencial = 'fooValue'
     * $query->filterByFoneResidencial('%fooValue%'); // WHERE fone_residencial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $foneResidencial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByFoneResidencial($foneResidencial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($foneResidencial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $foneResidencial)) {
                $foneResidencial = str_replace('*', '%', $foneResidencial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::FONE_RESIDENCIAL, $foneResidencial, $comparison);
    }

    /**
     * Filter the query on the email1 column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail1('fooValue');   // WHERE email1 = 'fooValue'
     * $query->filterByEmail1('%fooValue%'); // WHERE email1 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email1 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByEmail1($email1 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email1)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email1)) {
                $email1 = str_replace('*', '%', $email1);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::EMAIL1, $email1, $comparison);
    }

    /**
     * Filter the query on the email2 column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail2('fooValue');   // WHERE email2 = 'fooValue'
     * $query->filterByEmail2('%fooValue%'); // WHERE email2 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email2 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByEmail2($email2 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email2)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email2)) {
                $email2 = str_replace('*', '%', $email2);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::EMAIL2, $email2, $comparison);
    }

    /**
     * Filter the query on the end_residencial column
     *
     * Example usage:
     * <code>
     * $query->filterByEndResidencial('fooValue');   // WHERE end_residencial = 'fooValue'
     * $query->filterByEndResidencial('%fooValue%'); // WHERE end_residencial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $endResidencial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByEndResidencial($endResidencial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($endResidencial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $endResidencial)) {
                $endResidencial = str_replace('*', '%', $endResidencial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::END_RESIDENCIAL, $endResidencial, $comparison);
    }

    /**
     * Filter the query on the bairro_residencial column
     *
     * Example usage:
     * <code>
     * $query->filterByBairroResidencial('fooValue');   // WHERE bairro_residencial = 'fooValue'
     * $query->filterByBairroResidencial('%fooValue%'); // WHERE bairro_residencial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $bairroResidencial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByBairroResidencial($bairroResidencial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($bairroResidencial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $bairroResidencial)) {
                $bairroResidencial = str_replace('*', '%', $bairroResidencial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::BAIRRO_RESIDENCIAL, $bairroResidencial, $comparison);
    }

    /**
     * Filter the query on the cep_residencial column
     *
     * Example usage:
     * <code>
     * $query->filterByCepResidencial('fooValue');   // WHERE cep_residencial = 'fooValue'
     * $query->filterByCepResidencial('%fooValue%'); // WHERE cep_residencial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cepResidencial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByCepResidencial($cepResidencial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cepResidencial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cepResidencial)) {
                $cepResidencial = str_replace('*', '%', $cepResidencial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::CEP_RESIDENCIAL, $cepResidencial, $comparison);
    }

    /**
     * Filter the query on the numero column
     *
     * Example usage:
     * <code>
     * $query->filterByNumero('fooValue');   // WHERE numero = 'fooValue'
     * $query->filterByNumero('%fooValue%'); // WHERE numero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $numero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByNumero($numero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($numero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $numero)) {
                $numero = str_replace('*', '%', $numero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::NUMERO, $numero, $comparison);
    }

    /**
     * Filter the query on the complemento column
     *
     * Example usage:
     * <code>
     * $query->filterByComplemento('fooValue');   // WHERE complemento = 'fooValue'
     * $query->filterByComplemento('%fooValue%'); // WHERE complemento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $complemento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByComplemento($complemento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($complemento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $complemento)) {
                $complemento = str_replace('*', '%', $complemento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::COMPLEMENTO, $complemento, $comparison);
    }

    /**
     * Filter the query on the grau_2 column
     *
     * Example usage:
     * <code>
     * $query->filterByGrau2('fooValue');   // WHERE grau_2 = 'fooValue'
     * $query->filterByGrau2('%fooValue%'); // WHERE grau_2 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $grau2 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByGrau2($grau2 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($grau2)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $grau2)) {
                $grau2 = str_replace('*', '%', $grau2);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::GRAU_2, $grau2, $comparison);
    }

    /**
     * Filter the query on the uf_conc_2 column
     *
     * Example usage:
     * <code>
     * $query->filterByUfConc2('fooValue');   // WHERE uf_conc_2 = 'fooValue'
     * $query->filterByUfConc2('%fooValue%'); // WHERE uf_conc_2 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ufConc2 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByUfConc2($ufConc2 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ufConc2)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ufConc2)) {
                $ufConc2 = str_replace('*', '%', $ufConc2);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::UF_CONC_2, $ufConc2, $comparison);
    }

    /**
     * Filter the query on the ano_concl_2grau column
     *
     * Example usage:
     * <code>
     * $query->filterByAnoConcl2grau('fooValue');   // WHERE ano_concl_2grau = 'fooValue'
     * $query->filterByAnoConcl2grau('%fooValue%'); // WHERE ano_concl_2grau LIKE '%fooValue%'
     * </code>
     *
     * @param     string $anoConcl2grau The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByAnoConcl2grau($anoConcl2grau = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($anoConcl2grau)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $anoConcl2grau)) {
                $anoConcl2grau = str_replace('*', '%', $anoConcl2grau);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::ANO_CONCL_2GRAU, $anoConcl2grau, $comparison);
    }

    /**
     * Filter the query on the local_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByLocalTrabalho('fooValue');   // WHERE local_trabalho = 'fooValue'
     * $query->filterByLocalTrabalho('%fooValue%'); // WHERE local_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $localTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByLocalTrabalho($localTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($localTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $localTrabalho)) {
                $localTrabalho = str_replace('*', '%', $localTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::LOCAL_TRABALHO, $localTrabalho, $comparison);
    }

    /**
     * Filter the query on the end_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByEndTrabalho('fooValue');   // WHERE end_trabalho = 'fooValue'
     * $query->filterByEndTrabalho('%fooValue%'); // WHERE end_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $endTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByEndTrabalho($endTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($endTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $endTrabalho)) {
                $endTrabalho = str_replace('*', '%', $endTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::END_TRABALHO, $endTrabalho, $comparison);
    }

    /**
     * Filter the query on the bairro_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByBairroTrabalho('fooValue');   // WHERE bairro_trabalho = 'fooValue'
     * $query->filterByBairroTrabalho('%fooValue%'); // WHERE bairro_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $bairroTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByBairroTrabalho($bairroTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($bairroTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $bairroTrabalho)) {
                $bairroTrabalho = str_replace('*', '%', $bairroTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::BAIRRO_TRABALHO, $bairroTrabalho, $comparison);
    }

    /**
     * Filter the query on the cep_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByCepTrabalho('fooValue');   // WHERE cep_trabalho = 'fooValue'
     * $query->filterByCepTrabalho('%fooValue%'); // WHERE cep_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cepTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByCepTrabalho($cepTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cepTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cepTrabalho)) {
                $cepTrabalho = str_replace('*', '%', $cepTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::CEP_TRABALHO, $cepTrabalho, $comparison);
    }

    /**
     * Filter the query on the fone_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByFoneTrabalho('fooValue');   // WHERE fone_trabalho = 'fooValue'
     * $query->filterByFoneTrabalho('%fooValue%'); // WHERE fone_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $foneTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByFoneTrabalho($foneTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($foneTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $foneTrabalho)) {
                $foneTrabalho = str_replace('*', '%', $foneTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::FONE_TRABALHO, $foneTrabalho, $comparison);
    }

    /**
     * Filter the query on the ramal_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByRamalTrabalho('fooValue');   // WHERE ramal_trabalho = 'fooValue'
     * $query->filterByRamalTrabalho('%fooValue%'); // WHERE ramal_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ramalTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByRamalTrabalho($ramalTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ramalTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ramalTrabalho)) {
                $ramalTrabalho = str_replace('*', '%', $ramalTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::RAMAL_TRABALHO, $ramalTrabalho, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbalunoAtualPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbalunoAtualPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbalunoAtualPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbalunoAtualPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoAtualPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   TbalunoAtual $tbalunoAtual Object to remove from the list of results
     *
     * @return TbalunoAtualQuery The current query, for fluid interface
     */
    public function prune($tbalunoAtual = null)
    {
        if ($tbalunoAtual) {
            $this->addUsingAlias(TbalunoAtualPeer::MATRICULA, $tbalunoAtual->getMatricula(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
