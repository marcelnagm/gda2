<?php

/**
 * Base static class for performing query and update operations on the 'tboferta' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:53 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbofertaPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'tboferta';

	/** the related Propel class for this table */
	const OM_CLASS = 'Tboferta';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Tboferta';

	/** the related TableMap class for this table */
	const TM_CLASS = 'TbofertaTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 24;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID_OFERTA field */
	const ID_OFERTA = 'tboferta.ID_OFERTA';

	/** the column name for the ID_PERIODO field */
	const ID_PERIODO = 'tboferta.ID_PERIODO';

	/** the column name for the ID_TURNO field */
	const ID_TURNO = 'tboferta.ID_TURNO';

	/** the column name for the COD_CURSO field */
	const COD_CURSO = 'tboferta.COD_CURSO';

	/** the column name for the COD_CURSO_DESTINO field */
	const COD_CURSO_DESTINO = 'tboferta.COD_CURSO_DESTINO';

	/** the column name for the COD_DISCIPLINA field */
	const COD_DISCIPLINA = 'tboferta.COD_DISCIPLINA';

	/** the column name for the TURMA field */
	const TURMA = 'tboferta.TURMA';

	/** the column name for the ID_SALA field */
	const ID_SALA = 'tboferta.ID_SALA';

	/** the column name for the VAGAS field */
	const VAGAS = 'tboferta.VAGAS';

	/** the column name for the MATRICULADOS field */
	const MATRICULADOS = 'tboferta.MATRICULADOS';

	/** the column name for the EXCESSO field */
	const EXCESSO = 'tboferta.EXCESSO';

	/** the column name for the CANCELADOS field */
	const CANCELADOS = 'tboferta.CANCELADOS';

	/** the column name for the TRANCADOS field */
	const TRANCADOS = 'tboferta.TRANCADOS';

	/** the column name for the ID_MATRICULA_PROF field */
	const ID_MATRICULA_PROF = 'tboferta.ID_MATRICULA_PROF';

	/** the column name for the ID_MATRICULA_PROF2 field */
	const ID_MATRICULA_PROF2 = 'tboferta.ID_MATRICULA_PROF2';

	/** the column name for the ID_SETOR field */
	const ID_SETOR = 'tboferta.ID_SETOR';

	/** the column name for the DT_INICIO field */
	const DT_INICIO = 'tboferta.DT_INICIO';

	/** the column name for the DT_FIM field */
	const DT_FIM = 'tboferta.DT_FIM';

	/** the column name for the ID_SITUACAO field */
	const ID_SITUACAO = 'tboferta.ID_SITUACAO';

	/** the column name for the ID_POLO field */
	const ID_POLO = 'tboferta.ID_POLO';

	/** the column name for the CREATED_AT field */
	const CREATED_AT = 'tboferta.CREATED_AT';

	/** the column name for the UPDATED_AT field */
	const UPDATED_AT = 'tboferta.UPDATED_AT';

	/** the column name for the CREATED_BY field */
	const CREATED_BY = 'tboferta.CREATED_BY';

	/** the column name for the UPDATED_BY field */
	const UPDATED_BY = 'tboferta.UPDATED_BY';

	/**
	 * An identiy map to hold any loaded instances of Tboferta objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Tboferta[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('IdOferta', 'IdPeriodo', 'IdTurno', 'CodCurso', 'CodCursoDestino', 'CodDisciplina', 'Turma', 'IdSala', 'Vagas', 'Matriculados', 'Excesso', 'Cancelados', 'Trancados', 'IdMatriculaProf', 'IdMatriculaProf2', 'IdSetor', 'DtInicio', 'DtFim', 'IdSituacao', 'IdPolo', 'CreatedAt', 'UpdatedAt', 'CreatedBy', 'UpdatedBy', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('idOferta', 'idPeriodo', 'idTurno', 'codCurso', 'codCursoDestino', 'codDisciplina', 'turma', 'idSala', 'vagas', 'matriculados', 'excesso', 'cancelados', 'trancados', 'idMatriculaProf', 'idMatriculaProf2', 'idSetor', 'dtInicio', 'dtFim', 'idSituacao', 'idPolo', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', ),
		BasePeer::TYPE_COLNAME => array (self::ID_OFERTA, self::ID_PERIODO, self::ID_TURNO, self::COD_CURSO, self::COD_CURSO_DESTINO, self::COD_DISCIPLINA, self::TURMA, self::ID_SALA, self::VAGAS, self::MATRICULADOS, self::EXCESSO, self::CANCELADOS, self::TRANCADOS, self::ID_MATRICULA_PROF, self::ID_MATRICULA_PROF2, self::ID_SETOR, self::DT_INICIO, self::DT_FIM, self::ID_SITUACAO, self::ID_POLO, self::CREATED_AT, self::UPDATED_AT, self::CREATED_BY, self::UPDATED_BY, ),
		BasePeer::TYPE_FIELDNAME => array ('id_oferta', 'id_periodo', 'id_turno', 'cod_curso', 'cod_curso_destino', 'cod_disciplina', 'turma', 'id_sala', 'vagas', 'matriculados', 'excesso', 'cancelados', 'trancados', 'id_matricula_prof', 'id_matricula_prof2', 'id_setor', 'dt_inicio', 'dt_fim', 'id_situacao', 'id_polo', 'created_at', 'updated_at', 'created_by', 'updated_by', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('IdOferta' => 0, 'IdPeriodo' => 1, 'IdTurno' => 2, 'CodCurso' => 3, 'CodCursoDestino' => 4, 'CodDisciplina' => 5, 'Turma' => 6, 'IdSala' => 7, 'Vagas' => 8, 'Matriculados' => 9, 'Excesso' => 10, 'Cancelados' => 11, 'Trancados' => 12, 'IdMatriculaProf' => 13, 'IdMatriculaProf2' => 14, 'IdSetor' => 15, 'DtInicio' => 16, 'DtFim' => 17, 'IdSituacao' => 18, 'IdPolo' => 19, 'CreatedAt' => 20, 'UpdatedAt' => 21, 'CreatedBy' => 22, 'UpdatedBy' => 23, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('idOferta' => 0, 'idPeriodo' => 1, 'idTurno' => 2, 'codCurso' => 3, 'codCursoDestino' => 4, 'codDisciplina' => 5, 'turma' => 6, 'idSala' => 7, 'vagas' => 8, 'matriculados' => 9, 'excesso' => 10, 'cancelados' => 11, 'trancados' => 12, 'idMatriculaProf' => 13, 'idMatriculaProf2' => 14, 'idSetor' => 15, 'dtInicio' => 16, 'dtFim' => 17, 'idSituacao' => 18, 'idPolo' => 19, 'createdAt' => 20, 'updatedAt' => 21, 'createdBy' => 22, 'updatedBy' => 23, ),
		BasePeer::TYPE_COLNAME => array (self::ID_OFERTA => 0, self::ID_PERIODO => 1, self::ID_TURNO => 2, self::COD_CURSO => 3, self::COD_CURSO_DESTINO => 4, self::COD_DISCIPLINA => 5, self::TURMA => 6, self::ID_SALA => 7, self::VAGAS => 8, self::MATRICULADOS => 9, self::EXCESSO => 10, self::CANCELADOS => 11, self::TRANCADOS => 12, self::ID_MATRICULA_PROF => 13, self::ID_MATRICULA_PROF2 => 14, self::ID_SETOR => 15, self::DT_INICIO => 16, self::DT_FIM => 17, self::ID_SITUACAO => 18, self::ID_POLO => 19, self::CREATED_AT => 20, self::UPDATED_AT => 21, self::CREATED_BY => 22, self::UPDATED_BY => 23, ),
		BasePeer::TYPE_FIELDNAME => array ('id_oferta' => 0, 'id_periodo' => 1, 'id_turno' => 2, 'cod_curso' => 3, 'cod_curso_destino' => 4, 'cod_disciplina' => 5, 'turma' => 6, 'id_sala' => 7, 'vagas' => 8, 'matriculados' => 9, 'excesso' => 10, 'cancelados' => 11, 'trancados' => 12, 'id_matricula_prof' => 13, 'id_matricula_prof2' => 14, 'id_setor' => 15, 'dt_inicio' => 16, 'dt_fim' => 17, 'id_situacao' => 18, 'id_polo' => 19, 'created_at' => 20, 'updated_at' => 21, 'created_by' => 22, 'updated_by' => 23, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. TbofertaPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(TbofertaPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(TbofertaPeer::ID_OFERTA);
		$criteria->addSelectColumn(TbofertaPeer::ID_PERIODO);
		$criteria->addSelectColumn(TbofertaPeer::ID_TURNO);
		$criteria->addSelectColumn(TbofertaPeer::COD_CURSO);
		$criteria->addSelectColumn(TbofertaPeer::COD_CURSO_DESTINO);
		$criteria->addSelectColumn(TbofertaPeer::COD_DISCIPLINA);
		$criteria->addSelectColumn(TbofertaPeer::TURMA);
		$criteria->addSelectColumn(TbofertaPeer::ID_SALA);
		$criteria->addSelectColumn(TbofertaPeer::VAGAS);
		$criteria->addSelectColumn(TbofertaPeer::MATRICULADOS);
		$criteria->addSelectColumn(TbofertaPeer::EXCESSO);
		$criteria->addSelectColumn(TbofertaPeer::CANCELADOS);
		$criteria->addSelectColumn(TbofertaPeer::TRANCADOS);
		$criteria->addSelectColumn(TbofertaPeer::ID_MATRICULA_PROF);
		$criteria->addSelectColumn(TbofertaPeer::ID_MATRICULA_PROF2);
		$criteria->addSelectColumn(TbofertaPeer::ID_SETOR);
		$criteria->addSelectColumn(TbofertaPeer::DT_INICIO);
		$criteria->addSelectColumn(TbofertaPeer::DT_FIM);
		$criteria->addSelectColumn(TbofertaPeer::ID_SITUACAO);
		$criteria->addSelectColumn(TbofertaPeer::ID_POLO);
		$criteria->addSelectColumn(TbofertaPeer::CREATED_AT);
		$criteria->addSelectColumn(TbofertaPeer::UPDATED_AT);
		$criteria->addSelectColumn(TbofertaPeer::CREATED_BY);
		$criteria->addSelectColumn(TbofertaPeer::UPDATED_BY);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Tboferta
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = TbofertaPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return TbofertaPeer::populateObjects(TbofertaPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			TbofertaPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Tboferta $value A Tboferta object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Tboferta $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getIdOferta();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Tboferta object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Tboferta) {
				$key = (string) $value->getIdOferta();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Tboferta object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Tboferta Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to tboferta
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = TbofertaPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = TbofertaPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				TbofertaPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Tbperiodo table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbperiodo(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbturno table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbturno(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbcursoRelatedByCodCurso table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbcursoRelatedByCodCurso(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbcursoRelatedByCodCursoDestino table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbcursoRelatedByCodCursoDestino(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbdisciplina table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbdisciplina(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbsala table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbsala(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbprofessorRelatedByIdMatriculaProf table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbprofessorRelatedByIdMatriculaProf(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbprofessorRelatedByIdMatriculaProf2 table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbprofessorRelatedByIdMatriculaProf2(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbsetor table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbsetor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbofertasituacao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbofertasituacao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbpolos table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbpolos(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbperiodo objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbperiodo(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbperiodoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbturno objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbturno(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbturnoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbturnoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbturnoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbturnoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbturno)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbcurso objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbcursoRelatedByCodCurso(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbcursoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbcursoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbcursoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbcursoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbcurso)
				$obj2->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbcurso objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbcursoRelatedByCodCursoDestino(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbcursoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbcursoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbcursoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbcursoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbcurso)
				$obj2->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbdisciplina objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbdisciplina(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbdisciplinaPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbdisciplinaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbdisciplinaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbdisciplinaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbdisciplina)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbsala objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbsala(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbsalaPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbsalaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbsalaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbsalaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbsala)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbprofessor objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbprofessorRelatedByIdMatriculaProf(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbprofessorPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbprofessorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbprofessorPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbprofessorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbprofessor)
				$obj2->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbprofessor objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbprofessorRelatedByIdMatriculaProf2(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbprofessorPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbprofessorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbprofessorPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbprofessorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbprofessor)
				$obj2->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbsetor objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbsetor(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbsetorPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbsetorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbsetorPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbsetorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbsetor)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbofertasituacao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbofertasituacao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbofertasituacaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbofertasituacaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbofertasituacaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbofertasituacao)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with their Tbpolos objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbpolos(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);
		TbpolosPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbpolosPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbpolosPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbpolosPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tboferta) to $obj2 (Tbpolos)
				$obj2->addTboferta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Tbperiodo rows

			$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);
			} // if joined row not null

			// Add objects for joined Tbturno rows

			$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = TbturnoPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);
			} // if joined row not null

			// Add objects for joined Tbcurso rows

			$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = TbcursoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);
			} // if joined row not null

			// Add objects for joined Tbcurso rows

			$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = TbcursoPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);
			} // if joined row not null

			// Add objects for joined Tbdisciplina rows

			$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);
			} // if joined row not null

			// Add objects for joined Tbsala rows

			$key7 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = TbsalaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = TbsalaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbsalaPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbsala)
				$obj7->addTboferta($obj1);
			} // if joined row not null

			// Add objects for joined Tbprofessor rows

			$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf($obj1);
			} // if joined row not null

			// Add objects for joined Tbprofessor rows

			$key9 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = TbprofessorPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = TbprofessorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbprofessorPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbprofessor)
				$obj9->addTbofertaRelatedByIdMatriculaProf2($obj1);
			} // if joined row not null

			// Add objects for joined Tbsetor rows

			$key10 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = TbsetorPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$cls = TbsetorPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbsetorPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbsetor)
				$obj10->addTboferta($obj1);
			} // if joined row not null

			// Add objects for joined Tbofertasituacao rows

			$key11 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol11);
			if ($key11 !== null) {
				$obj11 = TbofertasituacaoPeer::getInstanceFromPool($key11);
				if (!$obj11) {

					$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbofertasituacaoPeer::addInstanceToPool($obj11, $key11);
				} // if obj11 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbofertasituacao)
				$obj11->addTboferta($obj1);
			} // if joined row not null

			// Add objects for joined Tbpolos rows

			$key12 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol12);
			if ($key12 !== null) {
				$obj12 = TbpolosPeer::getInstanceFromPool($key12);
				if (!$obj12) {

					$cls = TbpolosPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbpolosPeer::addInstanceToPool($obj12, $key12);
				} // if obj12 loaded

				// Add the $obj1 (Tboferta) to the collection in $obj12 (Tbpolos)
				$obj12->addTboferta($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbperiodo table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbperiodo(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbturno table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbturno(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbcursoRelatedByCodCurso table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbcursoRelatedByCodCurso(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbcursoRelatedByCodCursoDestino table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbcursoRelatedByCodCursoDestino(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbdisciplina table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbdisciplina(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbsala table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbsala(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbprofessorRelatedByIdMatriculaProf table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbprofessorRelatedByIdMatriculaProf(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbprofessorRelatedByIdMatriculaProf2 table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbprofessorRelatedByIdMatriculaProf2(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbsetor table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbsetor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbofertasituacao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbofertasituacao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbpolos table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbpolos(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbofertaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbofertaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbperiodo.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbperiodo(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbturno rows

				$key2 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbturnoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbturnoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbturno)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key3 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcursoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcursoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbcurso)
				$obj3->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key5 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbdisciplinaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbdisciplinaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbdisciplina)
				$obj5->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key6 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbsalaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbsalaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbsala)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key7 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbprofessorPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbprofessorPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbprofessor)
				$obj7->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key9 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbsetorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbsetorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbsetor)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key10 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbofertasituacaoPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbofertasituacaoPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbofertasituacao)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key11 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbpolosPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbpolosPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbpolos)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbturno.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbturno(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key3 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcursoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcursoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbcurso)
				$obj3->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key5 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbdisciplinaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbdisciplinaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbdisciplina)
				$obj5->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key6 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbsalaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbsalaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbsala)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key7 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbprofessorPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbprofessorPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbprofessor)
				$obj7->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key9 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbsetorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbsetorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbsetor)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key10 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbofertasituacaoPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbofertasituacaoPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbofertasituacao)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key11 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbpolosPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbpolosPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbpolos)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except TbcursoRelatedByCodCurso.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbcursoRelatedByCodCurso(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key4 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbdisciplinaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbdisciplinaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbdisciplina)
				$obj4->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key5 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbsalaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbsalaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbsala)
				$obj5->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key6 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbprofessorPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbprofessorPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbprofessor)
				$obj6->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key7 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbprofessorPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbprofessorPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbprofessor)
				$obj7->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key8 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbsetorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbsetorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbsetor)
				$obj8->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key9 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbofertasituacaoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbofertasituacaoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbofertasituacao)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbpolos)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except TbcursoRelatedByCodCursoDestino.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbcursoRelatedByCodCursoDestino(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key4 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbdisciplinaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbdisciplinaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbdisciplina)
				$obj4->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key5 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbsalaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbsalaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbsala)
				$obj5->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key6 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbprofessorPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbprofessorPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbprofessor)
				$obj6->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key7 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbprofessorPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbprofessorPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbprofessor)
				$obj7->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key8 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbsetorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbsetorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbsetor)
				$obj8->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key9 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbofertasituacaoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbofertasituacaoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbofertasituacao)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbpolos)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbdisciplina.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbdisciplina(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key6 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbsalaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbsalaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbsala)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key7 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbprofessorPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbprofessorPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbprofessor)
				$obj7->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key9 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbsetorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbsetorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbsetor)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key10 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbofertasituacaoPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbofertasituacaoPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbofertasituacao)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key11 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbpolosPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbpolosPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbpolos)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbsala.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbsala(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key7 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbprofessorPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbprofessorPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbprofessor)
				$obj7->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key9 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbsetorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbsetorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbsetor)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key10 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbofertasituacaoPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbofertasituacaoPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbofertasituacao)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key11 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbpolosPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbpolosPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbpolos)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except TbprofessorRelatedByIdMatriculaProf.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbprofessorRelatedByIdMatriculaProf(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key7 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbsalaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbsalaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbsala)
				$obj7->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key8 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbsetorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbsetorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbsetor)
				$obj8->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key9 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbofertasituacaoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbofertasituacaoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbofertasituacao)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbpolos)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except TbprofessorRelatedByIdMatriculaProf2.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbprofessorRelatedByIdMatriculaProf2(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key7 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbsalaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbsalaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbsala)
				$obj7->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key8 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbsetorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbsetorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbsetor)
				$obj8->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key9 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbofertasituacaoPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbofertasituacaoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbofertasituacao)
				$obj9->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbpolos)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbsetor.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbsetor(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key7 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbsalaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbsalaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbsala)
				$obj7->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key9 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbprofessorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbprofessorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbprofessor)
				$obj9->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key10 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbofertasituacaoPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbofertasituacaoPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbofertasituacao)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key11 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbpolosPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbpolosPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbpolos)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbofertasituacao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbofertasituacao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key7 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbsalaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbsalaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbsala)
				$obj7->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key9 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbprofessorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbprofessorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbprofessor)
				$obj9->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key10 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbsetorPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbsetorPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbsetor)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key11 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbpolosPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbpolosPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbpolos)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tboferta objects pre-filled with all related objects except Tbpolos.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tboferta objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbpolos(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbofertaPeer::addSelectColumns($criteria);
		$startcol2 = (TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbperiodoPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbturnoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbturnoPeer::NUM_COLUMNS - TbturnoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbdisciplinaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsalaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbsalaPeer::NUM_COLUMNS - TbsalaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbprofessorPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbprofessorPeer::NUM_COLUMNS - TbprofessorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbsetorPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbsetorPeer::NUM_COLUMNS - TbsetorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbofertasituacaoPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbofertasituacaoPeer::NUM_COLUMNS - TbofertasituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbofertaPeer::ID_PERIODO, TbperiodoPeer::ID_PERIODO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_TURNO, TbturnoPeer::ID_TURNO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_CURSO_DESTINO, TbcursoPeer::COD_CURSO, $join_behavior);

		$criteria->addJoin(TbofertaPeer::COD_DISCIPLINA, TbdisciplinaPeer::COD_DISCIPLINA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SALA, TbsalaPeer::ID_SALA, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_MATRICULA_PROF2, TbprofessorPeer::MATRICULA_PROF, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SETOR, TbsetorPeer::ID_SETOR, $join_behavior);

		$criteria->addJoin(TbofertaPeer::ID_SITUACAO, TbofertasituacaoPeer::ID_SITUACAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbofertaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbofertaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbofertaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbofertaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbofertaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbperiodo rows

				$key2 = TbperiodoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbperiodoPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbperiodoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbperiodoPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj2 (Tbperiodo)
				$obj2->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbturno rows

				$key3 = TbturnoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbturnoPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbturnoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbturnoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj3 (Tbturno)
				$obj3->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key4 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbcursoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbcursoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj4 (Tbcurso)
				$obj4->addTbofertaRelatedByCodCurso($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcurso rows

				$key5 = TbcursoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj5 (Tbcurso)
				$obj5->addTbofertaRelatedByCodCursoDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbdisciplina rows

				$key6 = TbdisciplinaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbdisciplinaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbdisciplinaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbdisciplinaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj6 (Tbdisciplina)
				$obj6->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsala rows

				$key7 = TbsalaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbsalaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbsalaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbsalaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj7 (Tbsala)
				$obj7->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key8 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbprofessorPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbprofessorPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj8 (Tbprofessor)
				$obj8->addTbofertaRelatedByIdMatriculaProf($obj1);

			} // if joined row is not null

				// Add objects for joined Tbprofessor rows

				$key9 = TbprofessorPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbprofessorPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbprofessorPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbprofessorPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj9 (Tbprofessor)
				$obj9->addTbofertaRelatedByIdMatriculaProf2($obj1);

			} // if joined row is not null

				// Add objects for joined Tbsetor rows

				$key10 = TbsetorPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbsetorPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbsetorPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbsetorPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj10 (Tbsetor)
				$obj10->addTboferta($obj1);

			} // if joined row is not null

				// Add objects for joined Tbofertasituacao rows

				$key11 = TbofertasituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbofertasituacaoPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbofertasituacaoPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbofertasituacaoPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tboferta) to the collection in $obj11 (Tbofertasituacao)
				$obj11->addTboferta($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseTbofertaPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseTbofertaPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new TbofertaTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? TbofertaPeer::CLASS_DEFAULT : TbofertaPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a Tboferta or Criteria object.
	 *
	 * @param      mixed $values Criteria or Tboferta object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbofertaPeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseTbofertaPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Tboferta object
		}

		if ($criteria->containsKey(TbofertaPeer::ID_OFERTA) && $criteria->keyContainsValue(TbofertaPeer::ID_OFERTA) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.TbofertaPeer::ID_OFERTA.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbofertaPeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseTbofertaPeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Tboferta or Criteria object.
	 *
	 * @param      mixed $values Criteria or Tboferta object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbofertaPeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseTbofertaPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(TbofertaPeer::ID_OFERTA);
			$selectCriteria->add(TbofertaPeer::ID_OFERTA, $criteria->remove(TbofertaPeer::ID_OFERTA), $comparison);

		} else { // $values is Tboferta object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbofertaPeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseTbofertaPeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the tboferta table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(TbofertaPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			TbofertaPeer::clearInstancePool();
			TbofertaPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Tboferta or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Tboferta object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			TbofertaPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Tboferta) {
			// invalidate the cache for this single object
			TbofertaPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(TbofertaPeer::ID_OFERTA, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				TbofertaPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			TbofertaPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Tboferta object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Tboferta $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Tboferta $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(TbofertaPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(TbofertaPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(TbofertaPeer::DATABASE_NAME, TbofertaPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Tboferta
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = TbofertaPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		$criteria->add(TbofertaPeer::ID_OFERTA, $pk);

		$v = TbofertaPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
			$criteria->add(TbofertaPeer::ID_OFERTA, $pks, Criteria::IN);
			$objs = TbofertaPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array(array('id_periodo', 'cod_disciplina', 'turma'));
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseTbofertaPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseTbofertaPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseTbofertaPeer::buildTableMap();

