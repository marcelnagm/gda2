<?php

/**
 * Base class that represents a row from the 'tbdisciplina' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:51 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbdisciplina extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbdisciplinaPeer
	 */
	protected static $peer;

	/**
	 * The value for the cod_disciplina field.
	 * @var        string
	 */
	protected $cod_disciplina;

	/**
	 * The value for the descricao field.
	 * @var        string
	 */
	protected $descricao;

	/**
	 * The value for the sucinto field.
	 * @var        string
	 */
	protected $sucinto;

	/**
	 * The value for the inicio field.
	 * @var        string
	 */
	protected $inicio;

	/**
	 * The value for the termino field.
	 * @var        string
	 */
	protected $termino;

	/**
	 * The value for the ch field.
	 * @var        int
	 */
	protected $ch;

	/**
	 * The value for the ch_teorica field.
	 * @var        int
	 */
	protected $ch_teorica;

	/**
	 * The value for the ch_pratica field.
	 * @var        int
	 */
	protected $ch_pratica;

	/**
	 * The value for the cred_pratico field.
	 * @var        string
	 */
	protected $cred_pratico;

	/**
	 * The value for the cred_teorico field.
	 * @var        string
	 */
	protected $cred_teorico;

	/**
	 * The value for the id_situacao field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $id_situacao;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbdisciplinasituacao
	 */
	protected $aTbdisciplinasituacao;

	/**
	 * @var        array Tbcurriculodisciplinas[] Collection to store aggregation of Tbcurriculodisciplinas objects.
	 */
	protected $collTbcurriculodisciplinass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbcurriculodisciplinass.
	 */
	private $lastTbcurriculodisciplinasCriteria = null;

	/**
	 * @var        array TbgradeEquivalente[] Collection to store aggregation of TbgradeEquivalente objects.
	 */
	protected $collTbgradeEquivalentes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbgradeEquivalentes.
	 */
	private $lastTbgradeEquivalenteCriteria = null;

	/**
	 * @var        array Tbdisciplinarequisitos[] Collection to store aggregation of Tbdisciplinarequisitos objects.
	 */
	protected $collTbdisciplinarequisitossRelatedByCodDisciplina;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinarequisitossRelatedByCodDisciplina.
	 */
	private $lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria = null;

	/**
	 * @var        array Tbdisciplinarequisitos[] Collection to store aggregation of Tbdisciplinarequisitos objects.
	 */
	protected $collTbdisciplinarequisitossRelatedByCodDiscRequisito;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinarequisitossRelatedByCodDiscRequisito.
	 */
	private $lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria = null;

	/**
	 * @var        array Tbdisciplinacorequisitos[] Collection to store aggregation of Tbdisciplinacorequisitos objects.
	 */
	protected $collTbdisciplinacorequisitossRelatedByCodDisciplina;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinacorequisitossRelatedByCodDisciplina.
	 */
	private $lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria = null;

	/**
	 * @var        array Tbdisciplinacorequisitos[] Collection to store aggregation of Tbdisciplinacorequisitos objects.
	 */
	protected $collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito.
	 */
	private $lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria = null;

	/**
	 * @var        array TbdisciplinaIgnorada[] Collection to store aggregation of TbdisciplinaIgnorada objects.
	 */
	protected $collTbdisciplinaIgnoradas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinaIgnoradas.
	 */
	private $lastTbdisciplinaIgnoradaCriteria = null;

	/**
	 * @var        array TbdisciplinaMask[] Collection to store aggregation of TbdisciplinaMask objects.
	 */
	protected $collTbdisciplinaMasksRelatedByCodDisciplina;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinaMasksRelatedByCodDisciplina.
	 */
	private $lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria = null;

	/**
	 * @var        array TbdisciplinaMask[] Collection to store aggregation of TbdisciplinaMask objects.
	 */
	protected $collTbdisciplinaMasksRelatedByCodDisciplinaMask;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinaMasksRelatedByCodDisciplinaMask.
	 */
	private $lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria = null;

	/**
	 * @var        array Tbhistorico[] Collection to store aggregation of Tbhistorico objects.
	 */
	protected $collTbhistoricos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbhistoricos.
	 */
	private $lastTbhistoricoCriteria = null;

	/**
	 * @var        array Tboferta[] Collection to store aggregation of Tboferta objects.
	 */
	protected $collTbofertas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertas.
	 */
	private $lastTbofertaCriteria = null;

	/**
	 * @var        array Tbturma[] Collection to store aggregation of Tbturma objects.
	 */
	protected $collTbturmas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbturmas.
	 */
	private $lastTbturmaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbdisciplinaPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->id_situacao = 1;
	}

	/**
	 * Initializes internal state of BaseTbdisciplina object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [cod_disciplina] column value.
	 * 
	 * @return     string
	 */
	public function getCodDisciplina()
	{
		return $this->cod_disciplina;
	}

	/**
	 * Get the [descricao] column value.
	 * 
	 * @return     string
	 */
	public function getDescricao()
	{
		return $this->descricao;
	}

	/**
	 * Get the [sucinto] column value.
	 * 
	 * @return     string
	 */
	public function getSucinto()
	{
		return $this->sucinto;
	}

	/**
	 * Get the [optionally formatted] temporal [inicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getInicio($format = 'Y-m-d')
	{
		if ($this->inicio === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->inicio);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->inicio, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [termino] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTermino($format = 'Y-m-d')
	{
		if ($this->termino === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->termino);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->termino, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [ch] column value.
	 * 
	 * @return     int
	 */
	public function getCh()
	{
		return $this->ch;
	}

	/**
	 * Get the [ch_teorica] column value.
	 * 
	 * @return     int
	 */
	public function getChTeorica()
	{
		return $this->ch_teorica;
	}

	/**
	 * Get the [ch_pratica] column value.
	 * 
	 * @return     int
	 */
	public function getChPratica()
	{
		return $this->ch_pratica;
	}

	/**
	 * Get the [cred_pratico] column value.
	 * 
	 * @return     string
	 */
	public function getCredPratico()
	{
		return $this->cred_pratico;
	}

	/**
	 * Get the [cred_teorico] column value.
	 * 
	 * @return     string
	 */
	public function getCredTeorico()
	{
		return $this->cred_teorico;
	}

	/**
	 * Get the [id_situacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdSituacao()
	{
		return $this->id_situacao;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [cod_disciplina] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setCodDisciplina($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cod_disciplina !== $v) {
			$this->cod_disciplina = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::COD_DISCIPLINA;
		}

		return $this;
	} // setCodDisciplina()

	/**
	 * Set the value of [descricao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setDescricao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descricao !== $v) {
			$this->descricao = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::DESCRICAO;
		}

		return $this;
	} // setDescricao()

	/**
	 * Set the value of [sucinto] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setSucinto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sucinto !== $v) {
			$this->sucinto = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::SUCINTO;
		}

		return $this;
	} // setSucinto()

	/**
	 * Sets the value of [inicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setInicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->inicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->inicio !== null && $tmpDt = new DateTime($this->inicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->inicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbdisciplinaPeer::INICIO;
			}
		} // if either are not null

		return $this;
	} // setInicio()

	/**
	 * Sets the value of [termino] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setTermino($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->termino !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->termino !== null && $tmpDt = new DateTime($this->termino)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->termino = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbdisciplinaPeer::TERMINO;
			}
		} // if either are not null

		return $this;
	} // setTermino()

	/**
	 * Set the value of [ch] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setCh($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ch !== $v) {
			$this->ch = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::CH;
		}

		return $this;
	} // setCh()

	/**
	 * Set the value of [ch_teorica] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setChTeorica($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ch_teorica !== $v) {
			$this->ch_teorica = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::CH_TEORICA;
		}

		return $this;
	} // setChTeorica()

	/**
	 * Set the value of [ch_pratica] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setChPratica($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ch_pratica !== $v) {
			$this->ch_pratica = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::CH_PRATICA;
		}

		return $this;
	} // setChPratica()

	/**
	 * Set the value of [cred_pratico] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setCredPratico($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cred_pratico !== $v) {
			$this->cred_pratico = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::CRED_PRATICO;
		}

		return $this;
	} // setCredPratico()

	/**
	 * Set the value of [cred_teorico] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setCredTeorico($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cred_teorico !== $v) {
			$this->cred_teorico = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::CRED_TEORICO;
		}

		return $this;
	} // setCredTeorico()

	/**
	 * Set the value of [id_situacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setIdSituacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_situacao !== $v || $this->isNew()) {
			$this->id_situacao = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::ID_SITUACAO;
		}

		if ($this->aTbdisciplinasituacao !== null && $this->aTbdisciplinasituacao->getIdSituacao() !== $v) {
			$this->aTbdisciplinasituacao = null;
		}

		return $this;
	} // setIdSituacao()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbdisciplinaPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbdisciplinaPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbdisciplina The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbdisciplinaPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->id_situacao !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cod_disciplina = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->descricao = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->sucinto = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->inicio = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->termino = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->ch = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->ch_teorica = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->ch_pratica = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->cred_pratico = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->cred_teorico = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->id_situacao = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->created_by = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->updated_by = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 15; // 15 = TbdisciplinaPeer::NUM_COLUMNS - TbdisciplinaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tbdisciplina object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbdisciplinasituacao !== null && $this->id_situacao !== $this->aTbdisciplinasituacao->getIdSituacao()) {
			$this->aTbdisciplinasituacao = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbdisciplinaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbdisciplinaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbdisciplinasituacao = null;
			$this->collTbcurriculodisciplinass = null;
			$this->lastTbcurriculodisciplinasCriteria = null;

			$this->collTbgradeEquivalentes = null;
			$this->lastTbgradeEquivalenteCriteria = null;

			$this->collTbdisciplinarequisitossRelatedByCodDisciplina = null;
			$this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria = null;

			$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = null;
			$this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria = null;

			$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = null;
			$this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria = null;

			$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = null;
			$this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria = null;

			$this->collTbdisciplinaIgnoradas = null;
			$this->lastTbdisciplinaIgnoradaCriteria = null;

			$this->collTbdisciplinaMasksRelatedByCodDisciplina = null;
			$this->lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria = null;

			$this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = null;
			$this->lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria = null;

			$this->collTbhistoricos = null;
			$this->lastTbhistoricoCriteria = null;

			$this->collTbofertas = null;
			$this->lastTbofertaCriteria = null;

			$this->collTbturmas = null;
			$this->lastTbturmaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbdisciplinaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbdisciplina:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbdisciplinaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbdisciplina:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbdisciplinaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbdisciplina:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbdisciplinaPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbdisciplinaPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbdisciplina:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbdisciplinaPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbdisciplinasituacao !== null) {
				if ($this->aTbdisciplinasituacao->isModified() || $this->aTbdisciplinasituacao->isNew()) {
					$affectedRows += $this->aTbdisciplinasituacao->save($con);
				}
				$this->setTbdisciplinasituacao($this->aTbdisciplinasituacao);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbdisciplinaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += TbdisciplinaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTbcurriculodisciplinass !== null) {
				foreach ($this->collTbcurriculodisciplinass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbgradeEquivalentes !== null) {
				foreach ($this->collTbgradeEquivalentes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina !== null) {
				foreach ($this->collTbdisciplinarequisitossRelatedByCodDisciplina as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito !== null) {
				foreach ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina !== null) {
				foreach ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito !== null) {
				foreach ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinaIgnoradas !== null) {
				foreach ($this->collTbdisciplinaIgnoradas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinaMasksRelatedByCodDisciplina !== null) {
				foreach ($this->collTbdisciplinaMasksRelatedByCodDisciplina as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask !== null) {
				foreach ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbhistoricos !== null) {
				foreach ($this->collTbhistoricos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertas !== null) {
				foreach ($this->collTbofertas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbturmas !== null) {
				foreach ($this->collTbturmas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbdisciplinasituacao !== null) {
				if (!$this->aTbdisciplinasituacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbdisciplinasituacao->getValidationFailures());
				}
			}


			if (($retval = TbdisciplinaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTbcurriculodisciplinass !== null) {
					foreach ($this->collTbcurriculodisciplinass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbgradeEquivalentes !== null) {
					foreach ($this->collTbgradeEquivalentes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina !== null) {
					foreach ($this->collTbdisciplinarequisitossRelatedByCodDisciplina as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito !== null) {
					foreach ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina !== null) {
					foreach ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito !== null) {
					foreach ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinaIgnoradas !== null) {
					foreach ($this->collTbdisciplinaIgnoradas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinaMasksRelatedByCodDisciplina !== null) {
					foreach ($this->collTbdisciplinaMasksRelatedByCodDisciplina as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask !== null) {
					foreach ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbhistoricos !== null) {
					foreach ($this->collTbhistoricos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertas !== null) {
					foreach ($this->collTbofertas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbturmas !== null) {
					foreach ($this->collTbturmas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbdisciplinaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCodDisciplina();
				break;
			case 1:
				return $this->getDescricao();
				break;
			case 2:
				return $this->getSucinto();
				break;
			case 3:
				return $this->getInicio();
				break;
			case 4:
				return $this->getTermino();
				break;
			case 5:
				return $this->getCh();
				break;
			case 6:
				return $this->getChTeorica();
				break;
			case 7:
				return $this->getChPratica();
				break;
			case 8:
				return $this->getCredPratico();
				break;
			case 9:
				return $this->getCredTeorico();
				break;
			case 10:
				return $this->getIdSituacao();
				break;
			case 11:
				return $this->getCreatedAt();
				break;
			case 12:
				return $this->getUpdatedAt();
				break;
			case 13:
				return $this->getCreatedBy();
				break;
			case 14:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbdisciplinaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCodDisciplina(),
			$keys[1] => $this->getDescricao(),
			$keys[2] => $this->getSucinto(),
			$keys[3] => $this->getInicio(),
			$keys[4] => $this->getTermino(),
			$keys[5] => $this->getCh(),
			$keys[6] => $this->getChTeorica(),
			$keys[7] => $this->getChPratica(),
			$keys[8] => $this->getCredPratico(),
			$keys[9] => $this->getCredTeorico(),
			$keys[10] => $this->getIdSituacao(),
			$keys[11] => $this->getCreatedAt(),
			$keys[12] => $this->getUpdatedAt(),
			$keys[13] => $this->getCreatedBy(),
			$keys[14] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbdisciplinaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCodDisciplina($value);
				break;
			case 1:
				$this->setDescricao($value);
				break;
			case 2:
				$this->setSucinto($value);
				break;
			case 3:
				$this->setInicio($value);
				break;
			case 4:
				$this->setTermino($value);
				break;
			case 5:
				$this->setCh($value);
				break;
			case 6:
				$this->setChTeorica($value);
				break;
			case 7:
				$this->setChPratica($value);
				break;
			case 8:
				$this->setCredPratico($value);
				break;
			case 9:
				$this->setCredTeorico($value);
				break;
			case 10:
				$this->setIdSituacao($value);
				break;
			case 11:
				$this->setCreatedAt($value);
				break;
			case 12:
				$this->setUpdatedAt($value);
				break;
			case 13:
				$this->setCreatedBy($value);
				break;
			case 14:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbdisciplinaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCodDisciplina($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDescricao($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSucinto($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setInicio($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTermino($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCh($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setChTeorica($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setChPratica($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCredPratico($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCredTeorico($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIdSituacao($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCreatedBy($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUpdatedBy($arr[$keys[14]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbdisciplinaPeer::COD_DISCIPLINA)) $criteria->add(TbdisciplinaPeer::COD_DISCIPLINA, $this->cod_disciplina);
		if ($this->isColumnModified(TbdisciplinaPeer::DESCRICAO)) $criteria->add(TbdisciplinaPeer::DESCRICAO, $this->descricao);
		if ($this->isColumnModified(TbdisciplinaPeer::SUCINTO)) $criteria->add(TbdisciplinaPeer::SUCINTO, $this->sucinto);
		if ($this->isColumnModified(TbdisciplinaPeer::INICIO)) $criteria->add(TbdisciplinaPeer::INICIO, $this->inicio);
		if ($this->isColumnModified(TbdisciplinaPeer::TERMINO)) $criteria->add(TbdisciplinaPeer::TERMINO, $this->termino);
		if ($this->isColumnModified(TbdisciplinaPeer::CH)) $criteria->add(TbdisciplinaPeer::CH, $this->ch);
		if ($this->isColumnModified(TbdisciplinaPeer::CH_TEORICA)) $criteria->add(TbdisciplinaPeer::CH_TEORICA, $this->ch_teorica);
		if ($this->isColumnModified(TbdisciplinaPeer::CH_PRATICA)) $criteria->add(TbdisciplinaPeer::CH_PRATICA, $this->ch_pratica);
		if ($this->isColumnModified(TbdisciplinaPeer::CRED_PRATICO)) $criteria->add(TbdisciplinaPeer::CRED_PRATICO, $this->cred_pratico);
		if ($this->isColumnModified(TbdisciplinaPeer::CRED_TEORICO)) $criteria->add(TbdisciplinaPeer::CRED_TEORICO, $this->cred_teorico);
		if ($this->isColumnModified(TbdisciplinaPeer::ID_SITUACAO)) $criteria->add(TbdisciplinaPeer::ID_SITUACAO, $this->id_situacao);
		if ($this->isColumnModified(TbdisciplinaPeer::CREATED_AT)) $criteria->add(TbdisciplinaPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbdisciplinaPeer::UPDATED_AT)) $criteria->add(TbdisciplinaPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbdisciplinaPeer::CREATED_BY)) $criteria->add(TbdisciplinaPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbdisciplinaPeer::UPDATED_BY)) $criteria->add(TbdisciplinaPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);

		$criteria->add(TbdisciplinaPeer::COD_DISCIPLINA, $this->cod_disciplina);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCodDisciplina();
	}

	/**
	 * Generic method to set the primary key (cod_disciplina column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCodDisciplina($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tbdisciplina (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCodDisciplina($this->cod_disciplina);

		$copyObj->setDescricao($this->descricao);

		$copyObj->setSucinto($this->sucinto);

		$copyObj->setInicio($this->inicio);

		$copyObj->setTermino($this->termino);

		$copyObj->setCh($this->ch);

		$copyObj->setChTeorica($this->ch_teorica);

		$copyObj->setChPratica($this->ch_pratica);

		$copyObj->setCredPratico($this->cred_pratico);

		$copyObj->setCredTeorico($this->cred_teorico);

		$copyObj->setIdSituacao($this->id_situacao);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTbcurriculodisciplinass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbcurriculodisciplinas($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbgradeEquivalentes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbgradeEquivalente($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinarequisitossRelatedByCodDisciplina() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinarequisitosRelatedByCodDisciplina($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinarequisitossRelatedByCodDiscRequisito() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinarequisitosRelatedByCodDiscRequisito($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinacorequisitossRelatedByCodDisciplina() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinacorequisitosRelatedByCodDisciplina($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinacorequisitossRelatedByCodDiscCoRequisito() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinacorequisitosRelatedByCodDiscCoRequisito($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinaIgnoradas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinaIgnorada($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinaMasksRelatedByCodDisciplina() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinaMaskRelatedByCodDisciplina($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinaMasksRelatedByCodDisciplinaMask() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinaMaskRelatedByCodDisciplinaMask($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbhistoricos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbhistorico($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTboferta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbturmas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbturma($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tbdisciplina Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbdisciplinaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbdisciplinaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbdisciplinasituacao object.
	 *
	 * @param      Tbdisciplinasituacao $v
	 * @return     Tbdisciplina The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbdisciplinasituacao(Tbdisciplinasituacao $v = null)
	{
		if ($v === null) {
			$this->setIdSituacao(1);
		} else {
			$this->setIdSituacao($v->getIdSituacao());
		}

		$this->aTbdisciplinasituacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbdisciplinasituacao object, it will not be re-added.
		if ($v !== null) {
			$v->addTbdisciplina($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbdisciplinasituacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbdisciplinasituacao The associated Tbdisciplinasituacao object.
	 * @throws     PropelException
	 */
	public function getTbdisciplinasituacao(PropelPDO $con = null)
	{
		if ($this->aTbdisciplinasituacao === null && ($this->id_situacao !== null)) {
			$this->aTbdisciplinasituacao = TbdisciplinasituacaoPeer::retrieveByPk($this->id_situacao);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbdisciplinasituacao->addTbdisciplinas($this);
			 */
		}
		return $this->aTbdisciplinasituacao;
	}

	/**
	 * Clears out the collTbcurriculodisciplinass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbcurriculodisciplinass()
	 */
	public function clearTbcurriculodisciplinass()
	{
		$this->collTbcurriculodisciplinass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbcurriculodisciplinass collection (array).
	 *
	 * By default this just sets the collTbcurriculodisciplinass collection to an empty array (like clearcollTbcurriculodisciplinass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbcurriculodisciplinass()
	{
		$this->collTbcurriculodisciplinass = array();
	}

	/**
	 * Gets an array of Tbcurriculodisciplinas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related Tbcurriculodisciplinass from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbcurriculodisciplinas[]
	 * @throws     PropelException
	 */
	public function getTbcurriculodisciplinass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
			   $this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbcurriculodisciplinasPeer::addSelectColumns($criteria);
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbcurriculodisciplinasPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
					$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;
		return $this->collTbcurriculodisciplinass;
	}

	/**
	 * Returns the number of related Tbcurriculodisciplinas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbcurriculodisciplinas objects.
	 * @throws     PropelException
	 */
	public function countTbcurriculodisciplinass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbcurriculodisciplinasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
					$count = TbcurriculodisciplinasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbcurriculodisciplinass);
				}
			} else {
				$count = count($this->collTbcurriculodisciplinass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbcurriculodisciplinas object to this object
	 * through the Tbcurriculodisciplinas foreign key attribute.
	 *
	 * @param      Tbcurriculodisciplinas $l Tbcurriculodisciplinas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbcurriculodisciplinas(Tbcurriculodisciplinas $l)
	{
		if ($this->collTbcurriculodisciplinass === null) {
			$this->initTbcurriculodisciplinass();
		}
		if (!in_array($l, $this->collTbcurriculodisciplinass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbcurriculodisciplinass, $l);
			$l->setTbdisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbcurriculodisciplinass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbcurriculodisciplinassJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;

		return $this->collTbcurriculodisciplinass;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbcurriculodisciplinass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbcurriculodisciplinassJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;

		return $this->collTbcurriculodisciplinass;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbcurriculodisciplinass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbcurriculodisciplinassJoinTbcarater($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbcarater($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcurriculodisciplinasPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbcarater($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;

		return $this->collTbcurriculodisciplinass;
	}

	/**
	 * Clears out the collTbgradeEquivalentes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbgradeEquivalentes()
	 */
	public function clearTbgradeEquivalentes()
	{
		$this->collTbgradeEquivalentes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbgradeEquivalentes collection (array).
	 *
	 * By default this just sets the collTbgradeEquivalentes collection to an empty array (like clearcollTbgradeEquivalentes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbgradeEquivalentes()
	{
		$this->collTbgradeEquivalentes = array();
	}

	/**
	 * Gets an array of TbgradeEquivalente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbgradeEquivalentes from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TbgradeEquivalente[]
	 * @throws     PropelException
	 */
	public function getTbgradeEquivalentes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbgradeEquivalentes === null) {
			if ($this->isNew()) {
			   $this->collTbgradeEquivalentes = array();
			} else {

				$criteria->add(TbgradeEquivalentePeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbgradeEquivalentePeer::addSelectColumns($criteria);
				$this->collTbgradeEquivalentes = TbgradeEquivalentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbgradeEquivalentePeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbgradeEquivalentePeer::addSelectColumns($criteria);
				if (!isset($this->lastTbgradeEquivalenteCriteria) || !$this->lastTbgradeEquivalenteCriteria->equals($criteria)) {
					$this->collTbgradeEquivalentes = TbgradeEquivalentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbgradeEquivalenteCriteria = $criteria;
		return $this->collTbgradeEquivalentes;
	}

	/**
	 * Returns the number of related TbgradeEquivalente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TbgradeEquivalente objects.
	 * @throws     PropelException
	 */
	public function countTbgradeEquivalentes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbgradeEquivalentes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbgradeEquivalentePeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbgradeEquivalentePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbgradeEquivalentePeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbgradeEquivalenteCriteria) || !$this->lastTbgradeEquivalenteCriteria->equals($criteria)) {
					$count = TbgradeEquivalentePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbgradeEquivalentes);
				}
			} else {
				$count = count($this->collTbgradeEquivalentes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TbgradeEquivalente object to this object
	 * through the TbgradeEquivalente foreign key attribute.
	 *
	 * @param      TbgradeEquivalente $l TbgradeEquivalente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbgradeEquivalente(TbgradeEquivalente $l)
	{
		if ($this->collTbgradeEquivalentes === null) {
			$this->initTbgradeEquivalentes();
		}
		if (!in_array($l, $this->collTbgradeEquivalentes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbgradeEquivalentes, $l);
			$l->setTbdisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related TbgradeEquivalentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbgradeEquivalentesJoinTbcurriculodisciplinas($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbgradeEquivalentes === null) {
			if ($this->isNew()) {
				$this->collTbgradeEquivalentes = array();
			} else {

				$criteria->add(TbgradeEquivalentePeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbgradeEquivalentes = TbgradeEquivalentePeer::doSelectJoinTbcurriculodisciplinas($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbgradeEquivalentePeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbgradeEquivalenteCriteria) || !$this->lastTbgradeEquivalenteCriteria->equals($criteria)) {
				$this->collTbgradeEquivalentes = TbgradeEquivalentePeer::doSelectJoinTbcurriculodisciplinas($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbgradeEquivalenteCriteria = $criteria;

		return $this->collTbgradeEquivalentes;
	}

	/**
	 * Clears out the collTbdisciplinarequisitossRelatedByCodDisciplina collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinarequisitossRelatedByCodDisciplina()
	 */
	public function clearTbdisciplinarequisitossRelatedByCodDisciplina()
	{
		$this->collTbdisciplinarequisitossRelatedByCodDisciplina = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinarequisitossRelatedByCodDisciplina collection (array).
	 *
	 * By default this just sets the collTbdisciplinarequisitossRelatedByCodDisciplina collection to an empty array (like clearcollTbdisciplinarequisitossRelatedByCodDisciplina());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinarequisitossRelatedByCodDisciplina()
	{
		$this->collTbdisciplinarequisitossRelatedByCodDisciplina = array();
	}

	/**
	 * Gets an array of Tbdisciplinarequisitos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinarequisitossRelatedByCodDisciplina from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbdisciplinarequisitos[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinarequisitossRelatedByCodDisciplina($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinarequisitossRelatedByCodDisciplina = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinarequisitosPeer::addSelectColumns($criteria);
				$this->collTbdisciplinarequisitossRelatedByCodDisciplina = TbdisciplinarequisitosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinarequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinarequisitosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria->equals($criteria)) {
					$this->collTbdisciplinarequisitossRelatedByCodDisciplina = TbdisciplinarequisitosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria = $criteria;
		return $this->collTbdisciplinarequisitossRelatedByCodDisciplina;
	}

	/**
	 * Returns the number of related Tbdisciplinarequisitos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbdisciplinarequisitos objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinarequisitossRelatedByCodDisciplina(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbdisciplinarequisitosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinarequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria->equals($criteria)) {
					$count = TbdisciplinarequisitosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinarequisitossRelatedByCodDisciplina);
				}
			} else {
				$count = count($this->collTbdisciplinarequisitossRelatedByCodDisciplina);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbdisciplinarequisitos object to this object
	 * through the Tbdisciplinarequisitos foreign key attribute.
	 *
	 * @param      Tbdisciplinarequisitos $l Tbdisciplinarequisitos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinarequisitosRelatedByCodDisciplina(Tbdisciplinarequisitos $l)
	{
		if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina === null) {
			$this->initTbdisciplinarequisitossRelatedByCodDisciplina();
		}
		if (!in_array($l, $this->collTbdisciplinarequisitossRelatedByCodDisciplina, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinarequisitossRelatedByCodDisciplina, $l);
			$l->setTbdisciplinaRelatedByCodDisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related TbdisciplinarequisitossRelatedByCodDisciplina from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbdisciplinarequisitossRelatedByCodDisciplinaJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinarequisitossRelatedByCodDisciplina = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbdisciplinarequisitossRelatedByCodDisciplina = TbdisciplinarequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinarequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria->equals($criteria)) {
				$this->collTbdisciplinarequisitossRelatedByCodDisciplina = TbdisciplinarequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinarequisitosRelatedByCodDisciplinaCriteria = $criteria;

		return $this->collTbdisciplinarequisitossRelatedByCodDisciplina;
	}

	/**
	 * Clears out the collTbdisciplinarequisitossRelatedByCodDiscRequisito collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinarequisitossRelatedByCodDiscRequisito()
	 */
	public function clearTbdisciplinarequisitossRelatedByCodDiscRequisito()
	{
		$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinarequisitossRelatedByCodDiscRequisito collection (array).
	 *
	 * By default this just sets the collTbdisciplinarequisitossRelatedByCodDiscRequisito collection to an empty array (like clearcollTbdisciplinarequisitossRelatedByCodDiscRequisito());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinarequisitossRelatedByCodDiscRequisito()
	{
		$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = array();
	}

	/**
	 * Gets an array of Tbdisciplinarequisitos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinarequisitossRelatedByCodDiscRequisito from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbdisciplinarequisitos[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinarequisitossRelatedByCodDiscRequisito($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::COD_DISC_REQUISITO, $this->cod_disciplina);

				TbdisciplinarequisitosPeer::addSelectColumns($criteria);
				$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = TbdisciplinarequisitosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinarequisitosPeer::COD_DISC_REQUISITO, $this->cod_disciplina);

				TbdisciplinarequisitosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria) || !$this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria->equals($criteria)) {
					$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = TbdisciplinarequisitosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria = $criteria;
		return $this->collTbdisciplinarequisitossRelatedByCodDiscRequisito;
	}

	/**
	 * Returns the number of related Tbdisciplinarequisitos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbdisciplinarequisitos objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinarequisitossRelatedByCodDiscRequisito(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::COD_DISC_REQUISITO, $this->cod_disciplina);

				$count = TbdisciplinarequisitosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinarequisitosPeer::COD_DISC_REQUISITO, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria) || !$this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria->equals($criteria)) {
					$count = TbdisciplinarequisitosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito);
				}
			} else {
				$count = count($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbdisciplinarequisitos object to this object
	 * through the Tbdisciplinarequisitos foreign key attribute.
	 *
	 * @param      Tbdisciplinarequisitos $l Tbdisciplinarequisitos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinarequisitosRelatedByCodDiscRequisito(Tbdisciplinarequisitos $l)
	{
		if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito === null) {
			$this->initTbdisciplinarequisitossRelatedByCodDiscRequisito();
		}
		if (!in_array($l, $this->collTbdisciplinarequisitossRelatedByCodDiscRequisito, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito, $l);
			$l->setTbdisciplinaRelatedByCodDiscRequisito($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related TbdisciplinarequisitossRelatedByCodDiscRequisito from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbdisciplinarequisitossRelatedByCodDiscRequisitoJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::COD_DISC_REQUISITO, $this->cod_disciplina);

				$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = TbdisciplinarequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinarequisitosPeer::COD_DISC_REQUISITO, $this->cod_disciplina);

			if (!isset($this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria) || !$this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria->equals($criteria)) {
				$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = TbdisciplinarequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinarequisitosRelatedByCodDiscRequisitoCriteria = $criteria;

		return $this->collTbdisciplinarequisitossRelatedByCodDiscRequisito;
	}

	/**
	 * Clears out the collTbdisciplinacorequisitossRelatedByCodDisciplina collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinacorequisitossRelatedByCodDisciplina()
	 */
	public function clearTbdisciplinacorequisitossRelatedByCodDisciplina()
	{
		$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinacorequisitossRelatedByCodDisciplina collection (array).
	 *
	 * By default this just sets the collTbdisciplinacorequisitossRelatedByCodDisciplina collection to an empty array (like clearcollTbdisciplinacorequisitossRelatedByCodDisciplina());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinacorequisitossRelatedByCodDisciplina()
	{
		$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = array();
	}

	/**
	 * Gets an array of Tbdisciplinacorequisitos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinacorequisitossRelatedByCodDisciplina from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbdisciplinacorequisitos[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinacorequisitossRelatedByCodDisciplina($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinacorequisitossRelatedByCodDisciplina = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinacorequisitosPeer::addSelectColumns($criteria);
				$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = TbdisciplinacorequisitosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinacorequisitosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria->equals($criteria)) {
					$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = TbdisciplinacorequisitosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria = $criteria;
		return $this->collTbdisciplinacorequisitossRelatedByCodDisciplina;
	}

	/**
	 * Returns the number of related Tbdisciplinacorequisitos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbdisciplinacorequisitos objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinacorequisitossRelatedByCodDisciplina(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbdisciplinacorequisitosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria->equals($criteria)) {
					$count = TbdisciplinacorequisitosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinacorequisitossRelatedByCodDisciplina);
				}
			} else {
				$count = count($this->collTbdisciplinacorequisitossRelatedByCodDisciplina);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbdisciplinacorequisitos object to this object
	 * through the Tbdisciplinacorequisitos foreign key attribute.
	 *
	 * @param      Tbdisciplinacorequisitos $l Tbdisciplinacorequisitos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinacorequisitosRelatedByCodDisciplina(Tbdisciplinacorequisitos $l)
	{
		if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina === null) {
			$this->initTbdisciplinacorequisitossRelatedByCodDisciplina();
		}
		if (!in_array($l, $this->collTbdisciplinacorequisitossRelatedByCodDisciplina, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinacorequisitossRelatedByCodDisciplina, $l);
			$l->setTbdisciplinaRelatedByCodDisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related TbdisciplinacorequisitossRelatedByCodDisciplina from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbdisciplinacorequisitossRelatedByCodDisciplinaJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = TbdisciplinacorequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinacorequisitosPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria->equals($criteria)) {
				$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = TbdisciplinacorequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinacorequisitosRelatedByCodDisciplinaCriteria = $criteria;

		return $this->collTbdisciplinacorequisitossRelatedByCodDisciplina;
	}

	/**
	 * Clears out the collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinacorequisitossRelatedByCodDiscCoRequisito()
	 */
	public function clearTbdisciplinacorequisitossRelatedByCodDiscCoRequisito()
	{
		$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito collection (array).
	 *
	 * By default this just sets the collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito collection to an empty array (like clearcollTbdisciplinacorequisitossRelatedByCodDiscCoRequisito());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinacorequisitossRelatedByCodDiscCoRequisito()
	{
		$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = array();
	}

	/**
	 * Gets an array of Tbdisciplinacorequisitos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinacorequisitossRelatedByCodDiscCoRequisito from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbdisciplinacorequisitos[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinacorequisitossRelatedByCodDiscCoRequisito($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISC_COREQUISITO, $this->cod_disciplina);

				TbdisciplinacorequisitosPeer::addSelectColumns($criteria);
				$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = TbdisciplinacorequisitosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISC_COREQUISITO, $this->cod_disciplina);

				TbdisciplinacorequisitosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria) || !$this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria->equals($criteria)) {
					$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = TbdisciplinacorequisitosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria = $criteria;
		return $this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito;
	}

	/**
	 * Returns the number of related Tbdisciplinacorequisitos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbdisciplinacorequisitos objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinacorequisitossRelatedByCodDiscCoRequisito(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISC_COREQUISITO, $this->cod_disciplina);

				$count = TbdisciplinacorequisitosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISC_COREQUISITO, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria) || !$this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria->equals($criteria)) {
					$count = TbdisciplinacorequisitosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito);
				}
			} else {
				$count = count($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbdisciplinacorequisitos object to this object
	 * through the Tbdisciplinacorequisitos foreign key attribute.
	 *
	 * @param      Tbdisciplinacorequisitos $l Tbdisciplinacorequisitos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinacorequisitosRelatedByCodDiscCoRequisito(Tbdisciplinacorequisitos $l)
	{
		if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito === null) {
			$this->initTbdisciplinacorequisitossRelatedByCodDiscCoRequisito();
		}
		if (!in_array($l, $this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito, $l);
			$l->setTbdisciplinaRelatedByCodDiscCoRequisito($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related TbdisciplinacorequisitossRelatedByCodDiscCoRequisito from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbdisciplinacorequisitossRelatedByCodDiscCoRequisitoJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::COD_DISC_COREQUISITO, $this->cod_disciplina);

				$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = TbdisciplinacorequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinacorequisitosPeer::COD_DISC_COREQUISITO, $this->cod_disciplina);

			if (!isset($this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria) || !$this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria->equals($criteria)) {
				$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = TbdisciplinacorequisitosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinacorequisitosRelatedByCodDiscCoRequisitoCriteria = $criteria;

		return $this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito;
	}

	/**
	 * Clears out the collTbdisciplinaIgnoradas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinaIgnoradas()
	 */
	public function clearTbdisciplinaIgnoradas()
	{
		$this->collTbdisciplinaIgnoradas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinaIgnoradas collection (array).
	 *
	 * By default this just sets the collTbdisciplinaIgnoradas collection to an empty array (like clearcollTbdisciplinaIgnoradas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinaIgnoradas()
	{
		$this->collTbdisciplinaIgnoradas = array();
	}

	/**
	 * Gets an array of TbdisciplinaIgnorada objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinaIgnoradas from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TbdisciplinaIgnorada[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinaIgnoradas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinaIgnoradas === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinaIgnoradas = array();
			} else {

				$criteria->add(TbdisciplinaIgnoradaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinaIgnoradaPeer::addSelectColumns($criteria);
				$this->collTbdisciplinaIgnoradas = TbdisciplinaIgnoradaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinaIgnoradaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinaIgnoradaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinaIgnoradaCriteria) || !$this->lastTbdisciplinaIgnoradaCriteria->equals($criteria)) {
					$this->collTbdisciplinaIgnoradas = TbdisciplinaIgnoradaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinaIgnoradaCriteria = $criteria;
		return $this->collTbdisciplinaIgnoradas;
	}

	/**
	 * Returns the number of related TbdisciplinaIgnorada objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TbdisciplinaIgnorada objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinaIgnoradas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinaIgnoradas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinaIgnoradaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbdisciplinaIgnoradaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinaIgnoradaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinaIgnoradaCriteria) || !$this->lastTbdisciplinaIgnoradaCriteria->equals($criteria)) {
					$count = TbdisciplinaIgnoradaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinaIgnoradas);
				}
			} else {
				$count = count($this->collTbdisciplinaIgnoradas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TbdisciplinaIgnorada object to this object
	 * through the TbdisciplinaIgnorada foreign key attribute.
	 *
	 * @param      TbdisciplinaIgnorada $l TbdisciplinaIgnorada
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinaIgnorada(TbdisciplinaIgnorada $l)
	{
		if ($this->collTbdisciplinaIgnoradas === null) {
			$this->initTbdisciplinaIgnoradas();
		}
		if (!in_array($l, $this->collTbdisciplinaIgnoradas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinaIgnoradas, $l);
			$l->setTbdisciplina($this);
		}
	}

	/**
	 * Clears out the collTbdisciplinaMasksRelatedByCodDisciplina collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinaMasksRelatedByCodDisciplina()
	 */
	public function clearTbdisciplinaMasksRelatedByCodDisciplina()
	{
		$this->collTbdisciplinaMasksRelatedByCodDisciplina = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinaMasksRelatedByCodDisciplina collection (array).
	 *
	 * By default this just sets the collTbdisciplinaMasksRelatedByCodDisciplina collection to an empty array (like clearcollTbdisciplinaMasksRelatedByCodDisciplina());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinaMasksRelatedByCodDisciplina()
	{
		$this->collTbdisciplinaMasksRelatedByCodDisciplina = array();
	}

	/**
	 * Gets an array of TbdisciplinaMask objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinaMasksRelatedByCodDisciplina from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TbdisciplinaMask[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinaMasksRelatedByCodDisciplina($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinaMasksRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinaMasksRelatedByCodDisciplina = array();
			} else {

				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinaMaskPeer::addSelectColumns($criteria);
				$this->collTbdisciplinaMasksRelatedByCodDisciplina = TbdisciplinaMaskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbdisciplinaMaskPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria->equals($criteria)) {
					$this->collTbdisciplinaMasksRelatedByCodDisciplina = TbdisciplinaMaskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria = $criteria;
		return $this->collTbdisciplinaMasksRelatedByCodDisciplina;
	}

	/**
	 * Returns the number of related TbdisciplinaMask objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TbdisciplinaMask objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinaMasksRelatedByCodDisciplina(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinaMasksRelatedByCodDisciplina === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbdisciplinaMaskPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria) || !$this->lastTbdisciplinaMaskRelatedByCodDisciplinaCriteria->equals($criteria)) {
					$count = TbdisciplinaMaskPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinaMasksRelatedByCodDisciplina);
				}
			} else {
				$count = count($this->collTbdisciplinaMasksRelatedByCodDisciplina);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TbdisciplinaMask object to this object
	 * through the TbdisciplinaMask foreign key attribute.
	 *
	 * @param      TbdisciplinaMask $l TbdisciplinaMask
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinaMaskRelatedByCodDisciplina(TbdisciplinaMask $l)
	{
		if ($this->collTbdisciplinaMasksRelatedByCodDisciplina === null) {
			$this->initTbdisciplinaMasksRelatedByCodDisciplina();
		}
		if (!in_array($l, $this->collTbdisciplinaMasksRelatedByCodDisciplina, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinaMasksRelatedByCodDisciplina, $l);
			$l->setTbdisciplinaRelatedByCodDisciplina($this);
		}
	}

	/**
	 * Clears out the collTbdisciplinaMasksRelatedByCodDisciplinaMask collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinaMasksRelatedByCodDisciplinaMask()
	 */
	public function clearTbdisciplinaMasksRelatedByCodDisciplinaMask()
	{
		$this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinaMasksRelatedByCodDisciplinaMask collection (array).
	 *
	 * By default this just sets the collTbdisciplinaMasksRelatedByCodDisciplinaMask collection to an empty array (like clearcollTbdisciplinaMasksRelatedByCodDisciplinaMask());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinaMasksRelatedByCodDisciplinaMask()
	{
		$this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = array();
	}

	/**
	 * Gets an array of TbdisciplinaMask objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related TbdisciplinaMasksRelatedByCodDisciplinaMask from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TbdisciplinaMask[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinaMasksRelatedByCodDisciplinaMask($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = array();
			} else {

				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA_MASK, $this->cod_disciplina);

				TbdisciplinaMaskPeer::addSelectColumns($criteria);
				$this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = TbdisciplinaMaskPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA_MASK, $this->cod_disciplina);

				TbdisciplinaMaskPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria) || !$this->lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria->equals($criteria)) {
					$this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = TbdisciplinaMaskPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria = $criteria;
		return $this->collTbdisciplinaMasksRelatedByCodDisciplinaMask;
	}

	/**
	 * Returns the number of related TbdisciplinaMask objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TbdisciplinaMask objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinaMasksRelatedByCodDisciplinaMask(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA_MASK, $this->cod_disciplina);

				$count = TbdisciplinaMaskPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinaMaskPeer::COD_DISCIPLINA_MASK, $this->cod_disciplina);

				if (!isset($this->lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria) || !$this->lastTbdisciplinaMaskRelatedByCodDisciplinaMaskCriteria->equals($criteria)) {
					$count = TbdisciplinaMaskPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask);
				}
			} else {
				$count = count($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TbdisciplinaMask object to this object
	 * through the TbdisciplinaMask foreign key attribute.
	 *
	 * @param      TbdisciplinaMask $l TbdisciplinaMask
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinaMaskRelatedByCodDisciplinaMask(TbdisciplinaMask $l)
	{
		if ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask === null) {
			$this->initTbdisciplinaMasksRelatedByCodDisciplinaMask();
		}
		if (!in_array($l, $this->collTbdisciplinaMasksRelatedByCodDisciplinaMask, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask, $l);
			$l->setTbdisciplinaRelatedByCodDisciplinaMask($this);
		}
	}

	/**
	 * Clears out the collTbhistoricos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbhistoricos()
	 */
	public function clearTbhistoricos()
	{
		$this->collTbhistoricos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbhistoricos collection (array).
	 *
	 * By default this just sets the collTbhistoricos collection to an empty array (like clearcollTbhistoricos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbhistoricos()
	{
		$this->collTbhistoricos = array();
	}

	/**
	 * Gets an array of Tbhistorico objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related Tbhistoricos from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbhistorico[]
	 * @throws     PropelException
	 */
	public function getTbhistoricos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
			   $this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbhistoricoPeer::addSelectColumns($criteria);
				$this->collTbhistoricos = TbhistoricoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbhistoricoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
					$this->collTbhistoricos = TbhistoricoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;
		return $this->collTbhistoricos;
	}

	/**
	 * Returns the number of related Tbhistorico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbhistorico objects.
	 * @throws     PropelException
	 */
	public function countTbhistoricos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbhistoricoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
					$count = TbhistoricoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbhistoricos);
				}
			} else {
				$count = count($this->collTbhistoricos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbhistorico object to this object
	 * through the Tbhistorico foreign key attribute.
	 *
	 * @param      Tbhistorico $l Tbhistorico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbhistorico(Tbhistorico $l)
	{
		if ($this->collTbhistoricos === null) {
			$this->initTbhistoricos();
		}
		if (!in_array($l, $this->collTbhistoricos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbhistoricos, $l);
			$l->setTbdisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbhistoricos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbhistoricosJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;

		return $this->collTbhistoricos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbhistoricos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbhistoricosJoinTbaluno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbaluno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbaluno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;

		return $this->collTbhistoricos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbhistoricos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbhistoricosJoinTbconceito($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbconceito($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbconceito($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;

		return $this->collTbhistoricos;
	}

	/**
	 * Clears out the collTbofertas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertas()
	 */
	public function clearTbofertas()
	{
		$this->collTbofertas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertas collection (array).
	 *
	 * By default this just sets the collTbofertas collection to an empty array (like clearcollTbofertas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertas()
	{
		$this->collTbofertas = array();
	}

	/**
	 * Gets an array of Tboferta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related Tbofertas from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tboferta[]
	 * @throws     PropelException
	 */
	public function getTbofertas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
			   $this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbofertaPeer::addSelectColumns($criteria);
				$this->collTbofertas = TbofertaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbofertaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
					$this->collTbofertas = TbofertaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertaCriteria = $criteria;
		return $this->collTbofertas;
	}

	/**
	 * Returns the number of related Tboferta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tboferta objects.
	 * @throws     PropelException
	 */
	public function countTbofertas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbofertaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
					$count = TbofertaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertas);
				}
			} else {
				$count = count($this->collTbofertas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tboferta object to this object
	 * through the Tboferta foreign key attribute.
	 *
	 * @param      Tboferta $l Tboferta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTboferta(Tboferta $l)
	{
		if ($this->collTbofertas === null) {
			$this->initTbofertas();
		}
		if (!in_array($l, $this->collTbofertas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertas, $l);
			$l->setTbdisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbcursoRelatedByCodCurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbcursoRelatedByCodCursoDestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbsala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbprofessorRelatedByIdMatriculaProf($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbprofessorRelatedByIdMatriculaProf2($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbofertasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbofertasJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}

	/**
	 * Clears out the collTbturmas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbturmas()
	 */
	public function clearTbturmas()
	{
		$this->collTbturmas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbturmas collection (array).
	 *
	 * By default this just sets the collTbturmas collection to an empty array (like clearcollTbturmas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbturmas()
	{
		$this->collTbturmas = array();
	}

	/**
	 * Gets an array of Tbturma objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina has previously been saved, it will retrieve
	 * related Tbturmas from storage. If this Tbdisciplina is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbturma[]
	 * @throws     PropelException
	 */
	public function getTbturmas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
			   $this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbturmaPeer::addSelectColumns($criteria);
				$this->collTbturmas = TbturmaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				TbturmaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
					$this->collTbturmas = TbturmaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbturmaCriteria = $criteria;
		return $this->collTbturmas;
	}

	/**
	 * Returns the number of related Tbturma objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbturma objects.
	 * @throws     PropelException
	 */
	public function countTbturmas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$count = TbturmaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
					$count = TbturmaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbturmas);
				}
			} else {
				$count = count($this->collTbturmas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbturma object to this object
	 * through the Tbturma foreign key attribute.
	 *
	 * @param      Tbturma $l Tbturma
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbturma(Tbturma $l)
	{
		if ($this->collTbturmas === null) {
			$this->initTbturmas();
		}
		if (!in_array($l, $this->collTbturmas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbturmas, $l);
			$l->setTbdisciplina($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbturmas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbturmasJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbturmas = TbturmaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
				$this->collTbturmas = TbturmaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaCriteria = $criteria;

		return $this->collTbturmas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbdisciplina is new, it will return
	 * an empty collection; or if this Tbdisciplina has previously
	 * been saved, it will retrieve related Tbturmas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbdisciplina.
	 */
	public function getTbturmasJoinTboferta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbdisciplinaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

				$this->collTbturmas = TbturmaPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaPeer::COD_DISCIPLINA, $this->cod_disciplina);

			if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
				$this->collTbturmas = TbturmaPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaCriteria = $criteria;

		return $this->collTbturmas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTbcurriculodisciplinass) {
				foreach ((array) $this->collTbcurriculodisciplinass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbgradeEquivalentes) {
				foreach ((array) $this->collTbgradeEquivalentes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinarequisitossRelatedByCodDisciplina) {
				foreach ((array) $this->collTbdisciplinarequisitossRelatedByCodDisciplina as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinarequisitossRelatedByCodDiscRequisito) {
				foreach ((array) $this->collTbdisciplinarequisitossRelatedByCodDiscRequisito as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinacorequisitossRelatedByCodDisciplina) {
				foreach ((array) $this->collTbdisciplinacorequisitossRelatedByCodDisciplina as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito) {
				foreach ((array) $this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinaIgnoradas) {
				foreach ((array) $this->collTbdisciplinaIgnoradas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinaMasksRelatedByCodDisciplina) {
				foreach ((array) $this->collTbdisciplinaMasksRelatedByCodDisciplina as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinaMasksRelatedByCodDisciplinaMask) {
				foreach ((array) $this->collTbdisciplinaMasksRelatedByCodDisciplinaMask as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbhistoricos) {
				foreach ((array) $this->collTbhistoricos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertas) {
				foreach ((array) $this->collTbofertas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbturmas) {
				foreach ((array) $this->collTbturmas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTbcurriculodisciplinass = null;
		$this->collTbgradeEquivalentes = null;
		$this->collTbdisciplinarequisitossRelatedByCodDisciplina = null;
		$this->collTbdisciplinarequisitossRelatedByCodDiscRequisito = null;
		$this->collTbdisciplinacorequisitossRelatedByCodDisciplina = null;
		$this->collTbdisciplinacorequisitossRelatedByCodDiscCoRequisito = null;
		$this->collTbdisciplinaIgnoradas = null;
		$this->collTbdisciplinaMasksRelatedByCodDisciplina = null;
		$this->collTbdisciplinaMasksRelatedByCodDisciplinaMask = null;
		$this->collTbhistoricos = null;
		$this->collTbofertas = null;
		$this->collTbturmas = null;
			$this->aTbdisciplinasituacao = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTbdisciplina:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTbdisciplina::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTbdisciplina
