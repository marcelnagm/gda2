<?php


/**
 * Base class that represents a query for the 'tbfila' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbfilaQuery orderByIdFila($order = Criteria::ASC) Order by the id_fila column
 * @method TbfilaQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbfilaQuery orderByIdOferta($order = Criteria::ASC) Order by the id_oferta column
 * @method TbfilaQuery orderByIdSituacao($order = Criteria::ASC) Order by the id_situacao column
 * @method TbfilaQuery orderByPontos($order = Criteria::ASC) Order by the pontos column
 * @method TbfilaQuery orderByReprovacoes($order = Criteria::ASC) Order by the reprovacoes column
 * @method TbfilaQuery orderByFormando($order = Criteria::ASC) Order by the formando column
 * @method TbfilaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbfilaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbfilaQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbfilaQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbfilaQuery groupByIdFila() Group by the id_fila column
 * @method TbfilaQuery groupByMatricula() Group by the matricula column
 * @method TbfilaQuery groupByIdOferta() Group by the id_oferta column
 * @method TbfilaQuery groupByIdSituacao() Group by the id_situacao column
 * @method TbfilaQuery groupByPontos() Group by the pontos column
 * @method TbfilaQuery groupByReprovacoes() Group by the reprovacoes column
 * @method TbfilaQuery groupByFormando() Group by the formando column
 * @method TbfilaQuery groupByCreatedAt() Group by the created_at column
 * @method TbfilaQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbfilaQuery groupByCreatedBy() Group by the created_by column
 * @method TbfilaQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbfilaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbfilaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbfilaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbfilaQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbfilaQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbfilaQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method TbfilaQuery leftJoinTboferta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tboferta relation
 * @method TbfilaQuery rightJoinTboferta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tboferta relation
 * @method TbfilaQuery innerJoinTboferta($relationAlias = null) Adds a INNER JOIN clause to the query using the Tboferta relation
 *
 * @method TbfilaQuery leftJoinTbfilasituacao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbfilasituacao relation
 * @method TbfilaQuery rightJoinTbfilasituacao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbfilasituacao relation
 * @method TbfilaQuery innerJoinTbfilasituacao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbfilasituacao relation
 *
 * @method Tbfila findOne(PropelPDO $con = null) Return the first Tbfila matching the query
 * @method Tbfila findOneOrCreate(PropelPDO $con = null) Return the first Tbfila matching the query, or a new Tbfila object populated from the query conditions when no match is found
 *
 * @method Tbfila findOneByIdFila(int $id_fila) Return the first Tbfila filtered by the id_fila column
 * @method Tbfila findOneByMatricula(string $matricula) Return the first Tbfila filtered by the matricula column
 * @method Tbfila findOneByIdOferta(int $id_oferta) Return the first Tbfila filtered by the id_oferta column
 * @method Tbfila findOneByIdSituacao(int $id_situacao) Return the first Tbfila filtered by the id_situacao column
 * @method Tbfila findOneByPontos(string $pontos) Return the first Tbfila filtered by the pontos column
 * @method Tbfila findOneByReprovacoes(int $reprovacoes) Return the first Tbfila filtered by the reprovacoes column
 * @method Tbfila findOneByFormando(int $formando) Return the first Tbfila filtered by the formando column
 * @method Tbfila findOneByCreatedAt(string $created_at) Return the first Tbfila filtered by the created_at column
 * @method Tbfila findOneByUpdatedAt(string $updated_at) Return the first Tbfila filtered by the updated_at column
 * @method Tbfila findOneByCreatedBy(string $created_by) Return the first Tbfila filtered by the created_by column
 * @method Tbfila findOneByUpdatedBy(string $updated_by) Return the first Tbfila filtered by the updated_by column
 *
 * @method array findByIdFila(int $id_fila) Return Tbfila objects filtered by the id_fila column
 * @method array findByMatricula(string $matricula) Return Tbfila objects filtered by the matricula column
 * @method array findByIdOferta(int $id_oferta) Return Tbfila objects filtered by the id_oferta column
 * @method array findByIdSituacao(int $id_situacao) Return Tbfila objects filtered by the id_situacao column
 * @method array findByPontos(string $pontos) Return Tbfila objects filtered by the pontos column
 * @method array findByReprovacoes(int $reprovacoes) Return Tbfila objects filtered by the reprovacoes column
 * @method array findByFormando(int $formando) Return Tbfila objects filtered by the formando column
 * @method array findByCreatedAt(string $created_at) Return Tbfila objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbfila objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbfila objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbfila objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbfilaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbfilaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbfila', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbfilaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbfilaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbfilaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbfilaQuery) {
            return $criteria;
        }
        $query = new TbfilaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbfila|Tbfila[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbfilaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbfilaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbfila A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_FILA, MATRICULA, ID_OFERTA, ID_SITUACAO, PONTOS, REPROVACOES, FORMANDO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbfila WHERE ID_FILA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbfila();
            $obj->hydrate($row);
            TbfilaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbfila|Tbfila[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbfila[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbfilaPeer::ID_FILA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbfilaPeer::ID_FILA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_fila column
     *
     * Example usage:
     * <code>
     * $query->filterByIdFila(1234); // WHERE id_fila = 1234
     * $query->filterByIdFila(array(12, 34)); // WHERE id_fila IN (12, 34)
     * $query->filterByIdFila(array('min' => 12)); // WHERE id_fila > 12
     * </code>
     *
     * @param     mixed $idFila The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByIdFila($idFila = null, $comparison = null)
    {
        if (is_array($idFila) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbfilaPeer::ID_FILA, $idFila, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @see       filterByTbaluno()
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbfilaPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbfilaPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the id_oferta column
     *
     * Example usage:
     * <code>
     * $query->filterByIdOferta(1234); // WHERE id_oferta = 1234
     * $query->filterByIdOferta(array(12, 34)); // WHERE id_oferta IN (12, 34)
     * $query->filterByIdOferta(array('min' => 12)); // WHERE id_oferta > 12
     * </code>
     *
     * @see       filterByTboferta()
     *
     * @param     mixed $idOferta The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByIdOferta($idOferta = null, $comparison = null)
    {
        if (is_array($idOferta)) {
            $useMinMax = false;
            if (isset($idOferta['min'])) {
                $this->addUsingAlias(TbfilaPeer::ID_OFERTA, $idOferta['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idOferta['max'])) {
                $this->addUsingAlias(TbfilaPeer::ID_OFERTA, $idOferta['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::ID_OFERTA, $idOferta, $comparison);
    }

    /**
     * Filter the query on the id_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSituacao(1234); // WHERE id_situacao = 1234
     * $query->filterByIdSituacao(array(12, 34)); // WHERE id_situacao IN (12, 34)
     * $query->filterByIdSituacao(array('min' => 12)); // WHERE id_situacao > 12
     * </code>
     *
     * @see       filterByTbfilasituacao()
     *
     * @param     mixed $idSituacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByIdSituacao($idSituacao = null, $comparison = null)
    {
        if (is_array($idSituacao)) {
            $useMinMax = false;
            if (isset($idSituacao['min'])) {
                $this->addUsingAlias(TbfilaPeer::ID_SITUACAO, $idSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSituacao['max'])) {
                $this->addUsingAlias(TbfilaPeer::ID_SITUACAO, $idSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::ID_SITUACAO, $idSituacao, $comparison);
    }

    /**
     * Filter the query on the pontos column
     *
     * Example usage:
     * <code>
     * $query->filterByPontos('fooValue');   // WHERE pontos = 'fooValue'
     * $query->filterByPontos('%fooValue%'); // WHERE pontos LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pontos The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByPontos($pontos = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pontos)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pontos)) {
                $pontos = str_replace('*', '%', $pontos);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::PONTOS, $pontos, $comparison);
    }

    /**
     * Filter the query on the reprovacoes column
     *
     * Example usage:
     * <code>
     * $query->filterByReprovacoes(1234); // WHERE reprovacoes = 1234
     * $query->filterByReprovacoes(array(12, 34)); // WHERE reprovacoes IN (12, 34)
     * $query->filterByReprovacoes(array('min' => 12)); // WHERE reprovacoes > 12
     * </code>
     *
     * @param     mixed $reprovacoes The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByReprovacoes($reprovacoes = null, $comparison = null)
    {
        if (is_array($reprovacoes)) {
            $useMinMax = false;
            if (isset($reprovacoes['min'])) {
                $this->addUsingAlias(TbfilaPeer::REPROVACOES, $reprovacoes['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($reprovacoes['max'])) {
                $this->addUsingAlias(TbfilaPeer::REPROVACOES, $reprovacoes['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::REPROVACOES, $reprovacoes, $comparison);
    }

    /**
     * Filter the query on the formando column
     *
     * Example usage:
     * <code>
     * $query->filterByFormando(1234); // WHERE formando = 1234
     * $query->filterByFormando(array(12, 34)); // WHERE formando IN (12, 34)
     * $query->filterByFormando(array('min' => 12)); // WHERE formando > 12
     * </code>
     *
     * @param     mixed $formando The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByFormando($formando = null, $comparison = null)
    {
        if (is_array($formando)) {
            $useMinMax = false;
            if (isset($formando['min'])) {
                $this->addUsingAlias(TbfilaPeer::FORMANDO, $formando['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($formando['max'])) {
                $this->addUsingAlias(TbfilaPeer::FORMANDO, $formando['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::FORMANDO, $formando, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbfilaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbfilaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbfilaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbfilaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbfilaPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbfilaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbfilaPeer::MATRICULA, $tbaluno->getMatricula(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbfilaPeer::MATRICULA, $tbaluno->toKeyValue('PrimaryKey', 'Matricula'), $comparison);
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tboferta object
     *
     * @param   Tboferta|PropelObjectCollection $tboferta The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbfilaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTboferta($tboferta, $comparison = null)
    {
        if ($tboferta instanceof Tboferta) {
            return $this
                ->addUsingAlias(TbfilaPeer::ID_OFERTA, $tboferta->getIdOferta(), $comparison);
        } elseif ($tboferta instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbfilaPeer::ID_OFERTA, $tboferta->toKeyValue('PrimaryKey', 'IdOferta'), $comparison);
        } else {
            throw new PropelException('filterByTboferta() only accepts arguments of type Tboferta or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tboferta relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function joinTboferta($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tboferta');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tboferta');
        }

        return $this;
    }

    /**
     * Use the Tboferta relation Tboferta object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertaQuery A secondary query class using the current class as primary query
     */
    public function useTbofertaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTboferta($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tboferta', 'TbofertaQuery');
    }

    /**
     * Filter the query by a related Tbfilasituacao object
     *
     * @param   Tbfilasituacao|PropelObjectCollection $tbfilasituacao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbfilaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbfilasituacao($tbfilasituacao, $comparison = null)
    {
        if ($tbfilasituacao instanceof Tbfilasituacao) {
            return $this
                ->addUsingAlias(TbfilaPeer::ID_SITUACAO, $tbfilasituacao->getIdSituacao(), $comparison);
        } elseif ($tbfilasituacao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbfilaPeer::ID_SITUACAO, $tbfilasituacao->toKeyValue('PrimaryKey', 'IdSituacao'), $comparison);
        } else {
            throw new PropelException('filterByTbfilasituacao() only accepts arguments of type Tbfilasituacao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbfilasituacao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function joinTbfilasituacao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbfilasituacao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbfilasituacao');
        }

        return $this;
    }

    /**
     * Use the Tbfilasituacao relation Tbfilasituacao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbfilasituacaoQuery A secondary query class using the current class as primary query
     */
    public function useTbfilasituacaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbfilasituacao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbfilasituacao', 'TbfilasituacaoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbfila $tbfila Object to remove from the list of results
     *
     * @return TbfilaQuery The current query, for fluid interface
     */
    public function prune($tbfila = null)
    {
        if ($tbfila) {
            $this->addUsingAlias(TbfilaPeer::ID_FILA, $tbfila->getIdFila(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
