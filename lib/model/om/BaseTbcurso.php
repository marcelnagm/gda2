<?php

/**
 * Base class that represents a row from the 'tbcurso' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:51 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbcurso extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbcursoPeer
	 */
	protected static $peer;

	/**
	 * The value for the cod_curso field.
	 * @var        int
	 */
	protected $cod_curso;

	/**
	 * The value for the descricao field.
	 * @var        string
	 */
	protected $descricao;

	/**
	 * The value for the sucinto field.
	 * @var        string
	 */
	protected $sucinto;

	/**
	 * The value for the centro field.
	 * @var        string
	 */
	protected $centro;

	/**
	 * The value for the id_nivel field.
	 * @var        int
	 */
	protected $id_nivel;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbcursonivel
	 */
	protected $aTbcursonivel;

	/**
	 * @var        array Tbcursoversao[] Collection to store aggregation of Tbcursoversao objects.
	 */
	protected $collTbcursoversaos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbcursoversaos.
	 */
	private $lastTbcursoversaoCriteria = null;

	/**
	 * @var        array Tboferta[] Collection to store aggregation of Tboferta objects.
	 */
	protected $collTbofertasRelatedByCodCurso;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertasRelatedByCodCurso.
	 */
	private $lastTbofertaRelatedByCodCursoCriteria = null;

	/**
	 * @var        array Tboferta[] Collection to store aggregation of Tboferta objects.
	 */
	protected $collTbofertasRelatedByCodCursoDestino;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertasRelatedByCodCursoDestino.
	 */
	private $lastTbofertaRelatedByCodCursoDestinoCriteria = null;

	/**
	 * @var        array Tbprofessor[] Collection to store aggregation of Tbprofessor objects.
	 */
	protected $collTbprofessors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbprofessors.
	 */
	private $lastTbprofessorCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbcursoPeer';

	/**
	 * Get the [cod_curso] column value.
	 * 
	 * @return     int
	 */
	public function getCodCurso()
	{
		return $this->cod_curso;
	}

	/**
	 * Get the [descricao] column value.
	 * 
	 * @return     string
	 */
	public function getDescricao()
	{
		return $this->descricao;
	}

	/**
	 * Get the [sucinto] column value.
	 * 
	 * @return     string
	 */
	public function getSucinto()
	{
		return $this->sucinto;
	}

	/**
	 * Get the [centro] column value.
	 * 
	 * @return     string
	 */
	public function getCentro()
	{
		return $this->centro;
	}

	/**
	 * Get the [id_nivel] column value.
	 * 
	 * @return     int
	 */
	public function getIdNivel()
	{
		return $this->id_nivel;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [cod_curso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setCodCurso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cod_curso !== $v) {
			$this->cod_curso = $v;
			$this->modifiedColumns[] = TbcursoPeer::COD_CURSO;
		}

		return $this;
	} // setCodCurso()

	/**
	 * Set the value of [descricao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setDescricao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descricao !== $v) {
			$this->descricao = $v;
			$this->modifiedColumns[] = TbcursoPeer::DESCRICAO;
		}

		return $this;
	} // setDescricao()

	/**
	 * Set the value of [sucinto] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setSucinto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sucinto !== $v) {
			$this->sucinto = $v;
			$this->modifiedColumns[] = TbcursoPeer::SUCINTO;
		}

		return $this;
	} // setSucinto()

	/**
	 * Set the value of [centro] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setCentro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->centro !== $v) {
			$this->centro = $v;
			$this->modifiedColumns[] = TbcursoPeer::CENTRO;
		}

		return $this;
	} // setCentro()

	/**
	 * Set the value of [id_nivel] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setIdNivel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_nivel !== $v) {
			$this->id_nivel = $v;
			$this->modifiedColumns[] = TbcursoPeer::ID_NIVEL;
		}

		if ($this->aTbcursonivel !== null && $this->aTbcursonivel->getIdNivel() !== $v) {
			$this->aTbcursonivel = null;
		}

		return $this;
	} // setIdNivel()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbcursoPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcurso The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbcursoPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cod_curso = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->descricao = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->sucinto = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->centro = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->id_nivel = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->updated_at = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->created_by = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->updated_by = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = TbcursoPeer::NUM_COLUMNS - TbcursoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tbcurso object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbcursonivel !== null && $this->id_nivel !== $this->aTbcursonivel->getIdNivel()) {
			$this->aTbcursonivel = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbcursoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbcursoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbcursonivel = null;
			$this->collTbcursoversaos = null;
			$this->lastTbcursoversaoCriteria = null;

			$this->collTbofertasRelatedByCodCurso = null;
			$this->lastTbofertaRelatedByCodCursoCriteria = null;

			$this->collTbofertasRelatedByCodCursoDestino = null;
			$this->lastTbofertaRelatedByCodCursoDestinoCriteria = null;

			$this->collTbprofessors = null;
			$this->lastTbprofessorCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbcursoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbcurso:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbcursoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbcurso:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbcursoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbcurso:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbcursoPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbcursoPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbcurso:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbcursoPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbcursonivel !== null) {
				if ($this->aTbcursonivel->isModified() || $this->aTbcursonivel->isNew()) {
					$affectedRows += $this->aTbcursonivel->save($con);
				}
				$this->setTbcursonivel($this->aTbcursonivel);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbcursoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += TbcursoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTbcursoversaos !== null) {
				foreach ($this->collTbcursoversaos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertasRelatedByCodCurso !== null) {
				foreach ($this->collTbofertasRelatedByCodCurso as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertasRelatedByCodCursoDestino !== null) {
				foreach ($this->collTbofertasRelatedByCodCursoDestino as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbprofessors !== null) {
				foreach ($this->collTbprofessors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbcursonivel !== null) {
				if (!$this->aTbcursonivel->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcursonivel->getValidationFailures());
				}
			}


			if (($retval = TbcursoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTbcursoversaos !== null) {
					foreach ($this->collTbcursoversaos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertasRelatedByCodCurso !== null) {
					foreach ($this->collTbofertasRelatedByCodCurso as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertasRelatedByCodCursoDestino !== null) {
					foreach ($this->collTbofertasRelatedByCodCursoDestino as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbprofessors !== null) {
					foreach ($this->collTbprofessors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbcursoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCodCurso();
				break;
			case 1:
				return $this->getDescricao();
				break;
			case 2:
				return $this->getSucinto();
				break;
			case 3:
				return $this->getCentro();
				break;
			case 4:
				return $this->getIdNivel();
				break;
			case 5:
				return $this->getCreatedAt();
				break;
			case 6:
				return $this->getUpdatedAt();
				break;
			case 7:
				return $this->getCreatedBy();
				break;
			case 8:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbcursoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCodCurso(),
			$keys[1] => $this->getDescricao(),
			$keys[2] => $this->getSucinto(),
			$keys[3] => $this->getCentro(),
			$keys[4] => $this->getIdNivel(),
			$keys[5] => $this->getCreatedAt(),
			$keys[6] => $this->getUpdatedAt(),
			$keys[7] => $this->getCreatedBy(),
			$keys[8] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbcursoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCodCurso($value);
				break;
			case 1:
				$this->setDescricao($value);
				break;
			case 2:
				$this->setSucinto($value);
				break;
			case 3:
				$this->setCentro($value);
				break;
			case 4:
				$this->setIdNivel($value);
				break;
			case 5:
				$this->setCreatedAt($value);
				break;
			case 6:
				$this->setUpdatedAt($value);
				break;
			case 7:
				$this->setCreatedBy($value);
				break;
			case 8:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbcursoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCodCurso($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDescricao($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSucinto($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCentro($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIdNivel($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUpdatedAt($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCreatedBy($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUpdatedBy($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbcursoPeer::COD_CURSO)) $criteria->add(TbcursoPeer::COD_CURSO, $this->cod_curso);
		if ($this->isColumnModified(TbcursoPeer::DESCRICAO)) $criteria->add(TbcursoPeer::DESCRICAO, $this->descricao);
		if ($this->isColumnModified(TbcursoPeer::SUCINTO)) $criteria->add(TbcursoPeer::SUCINTO, $this->sucinto);
		if ($this->isColumnModified(TbcursoPeer::CENTRO)) $criteria->add(TbcursoPeer::CENTRO, $this->centro);
		if ($this->isColumnModified(TbcursoPeer::ID_NIVEL)) $criteria->add(TbcursoPeer::ID_NIVEL, $this->id_nivel);
		if ($this->isColumnModified(TbcursoPeer::CREATED_AT)) $criteria->add(TbcursoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbcursoPeer::UPDATED_AT)) $criteria->add(TbcursoPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbcursoPeer::CREATED_BY)) $criteria->add(TbcursoPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbcursoPeer::UPDATED_BY)) $criteria->add(TbcursoPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);

		$criteria->add(TbcursoPeer::COD_CURSO, $this->cod_curso);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCodCurso();
	}

	/**
	 * Generic method to set the primary key (cod_curso column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCodCurso($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tbcurso (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCodCurso($this->cod_curso);

		$copyObj->setDescricao($this->descricao);

		$copyObj->setSucinto($this->sucinto);

		$copyObj->setCentro($this->centro);

		$copyObj->setIdNivel($this->id_nivel);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTbcursoversaos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbcursoversao($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertasRelatedByCodCurso() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertaRelatedByCodCurso($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertasRelatedByCodCursoDestino() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertaRelatedByCodCursoDestino($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbprofessors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbprofessor($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tbcurso Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbcursoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbcursoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbcursonivel object.
	 *
	 * @param      Tbcursonivel $v
	 * @return     Tbcurso The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcursonivel(Tbcursonivel $v = null)
	{
		if ($v === null) {
			$this->setIdNivel(NULL);
		} else {
			$this->setIdNivel($v->getIdNivel());
		}

		$this->aTbcursonivel = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcursonivel object, it will not be re-added.
		if ($v !== null) {
			$v->addTbcurso($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcursonivel object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcursonivel The associated Tbcursonivel object.
	 * @throws     PropelException
	 */
	public function getTbcursonivel(PropelPDO $con = null)
	{
		if ($this->aTbcursonivel === null && ($this->id_nivel !== null)) {
			$this->aTbcursonivel = TbcursonivelPeer::retrieveByPk($this->id_nivel);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcursonivel->addTbcursos($this);
			 */
		}
		return $this->aTbcursonivel;
	}

	/**
	 * Clears out the collTbcursoversaos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbcursoversaos()
	 */
	public function clearTbcursoversaos()
	{
		$this->collTbcursoversaos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbcursoversaos collection (array).
	 *
	 * By default this just sets the collTbcursoversaos collection to an empty array (like clearcollTbcursoversaos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbcursoversaos()
	{
		$this->collTbcursoversaos = array();
	}

	/**
	 * Gets an array of Tbcursoversao objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcurso has previously been saved, it will retrieve
	 * related Tbcursoversaos from storage. If this Tbcurso is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbcursoversao[]
	 * @throws     PropelException
	 */
	public function getTbcursoversaos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcursoversaos === null) {
			if ($this->isNew()) {
			   $this->collTbcursoversaos = array();
			} else {

				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				TbcursoversaoPeer::addSelectColumns($criteria);
				$this->collTbcursoversaos = TbcursoversaoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				TbcursoversaoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbcursoversaoCriteria) || !$this->lastTbcursoversaoCriteria->equals($criteria)) {
					$this->collTbcursoversaos = TbcursoversaoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbcursoversaoCriteria = $criteria;
		return $this->collTbcursoversaos;
	}

	/**
	 * Returns the number of related Tbcursoversao objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbcursoversao objects.
	 * @throws     PropelException
	 */
	public function countTbcursoversaos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbcursoversaos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				$count = TbcursoversaoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				if (!isset($this->lastTbcursoversaoCriteria) || !$this->lastTbcursoversaoCriteria->equals($criteria)) {
					$count = TbcursoversaoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbcursoversaos);
				}
			} else {
				$count = count($this->collTbcursoversaos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbcursoversao object to this object
	 * through the Tbcursoversao foreign key attribute.
	 *
	 * @param      Tbcursoversao $l Tbcursoversao
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbcursoversao(Tbcursoversao $l)
	{
		if ($this->collTbcursoversaos === null) {
			$this->initTbcursoversaos();
		}
		if (!in_array($l, $this->collTbcursoversaos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbcursoversaos, $l);
			$l->setTbcurso($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbcursoversaos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbcursoversaosJoinTbformacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcursoversaos === null) {
			if ($this->isNew()) {
				$this->collTbcursoversaos = array();
			} else {

				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbformacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbcursoversaoCriteria) || !$this->lastTbcursoversaoCriteria->equals($criteria)) {
				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbformacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcursoversaoCriteria = $criteria;

		return $this->collTbcursoversaos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbcursoversaos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbcursoversaosJoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcursoversaos === null) {
			if ($this->isNew()) {
				$this->collTbcursoversaos = array();
			} else {

				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbcursoversaoCriteria) || !$this->lastTbcursoversaoCriteria->equals($criteria)) {
				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcursoversaoCriteria = $criteria;

		return $this->collTbcursoversaos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbcursoversaos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbcursoversaosJoinTbcampus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcursoversaos === null) {
			if ($this->isNew()) {
				$this->collTbcursoversaos = array();
			} else {

				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbcampus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbcursoversaoCriteria) || !$this->lastTbcursoversaoCriteria->equals($criteria)) {
				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbcampus($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcursoversaoCriteria = $criteria;

		return $this->collTbcursoversaos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbcursoversaos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbcursoversaosJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcursoversaos === null) {
			if ($this->isNew()) {
				$this->collTbcursoversaos = array();
			} else {

				$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbcursoversaoCriteria) || !$this->lastTbcursoversaoCriteria->equals($criteria)) {
				$this->collTbcursoversaos = TbcursoversaoPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcursoversaoCriteria = $criteria;

		return $this->collTbcursoversaos;
	}

	/**
	 * Clears out the collTbofertasRelatedByCodCurso collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertasRelatedByCodCurso()
	 */
	public function clearTbofertasRelatedByCodCurso()
	{
		$this->collTbofertasRelatedByCodCurso = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertasRelatedByCodCurso collection (array).
	 *
	 * By default this just sets the collTbofertasRelatedByCodCurso collection to an empty array (like clearcollTbofertasRelatedByCodCurso());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertasRelatedByCodCurso()
	{
		$this->collTbofertasRelatedByCodCurso = array();
	}

	/**
	 * Gets an array of Tboferta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcurso has previously been saved, it will retrieve
	 * related TbofertasRelatedByCodCurso from storage. If this Tbcurso is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tboferta[]
	 * @throws     PropelException
	 */
	public function getTbofertasRelatedByCodCurso($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
			   $this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				TbofertaPeer::addSelectColumns($criteria);
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				TbofertaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
					$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;
		return $this->collTbofertasRelatedByCodCurso;
	}

	/**
	 * Returns the number of related Tboferta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tboferta objects.
	 * @throws     PropelException
	 */
	public function countTbofertasRelatedByCodCurso(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$count = TbofertaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
					$count = TbofertaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertasRelatedByCodCurso);
				}
			} else {
				$count = count($this->collTbofertasRelatedByCodCurso);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tboferta object to this object
	 * through the Tboferta foreign key attribute.
	 *
	 * @param      Tboferta $l Tboferta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertaRelatedByCodCurso(Tboferta $l)
	{
		if ($this->collTbofertasRelatedByCodCurso === null) {
			$this->initTbofertasRelatedByCodCurso();
		}
		if (!in_array($l, $this->collTbofertasRelatedByCodCurso, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertasRelatedByCodCurso, $l);
			$l->setTbcursoRelatedByCodCurso($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbsala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbprofessorRelatedByIdMatriculaProf($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbprofessorRelatedByIdMatriculaProf2($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbofertasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCurso from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCurso === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCurso = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoCriteria) || !$this->lastTbofertaRelatedByCodCursoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCurso = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCurso;
	}

	/**
	 * Clears out the collTbofertasRelatedByCodCursoDestino collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertasRelatedByCodCursoDestino()
	 */
	public function clearTbofertasRelatedByCodCursoDestino()
	{
		$this->collTbofertasRelatedByCodCursoDestino = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertasRelatedByCodCursoDestino collection (array).
	 *
	 * By default this just sets the collTbofertasRelatedByCodCursoDestino collection to an empty array (like clearcollTbofertasRelatedByCodCursoDestino());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertasRelatedByCodCursoDestino()
	{
		$this->collTbofertasRelatedByCodCursoDestino = array();
	}

	/**
	 * Gets an array of Tboferta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcurso has previously been saved, it will retrieve
	 * related TbofertasRelatedByCodCursoDestino from storage. If this Tbcurso is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tboferta[]
	 * @throws     PropelException
	 */
	public function getTbofertasRelatedByCodCursoDestino($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
			   $this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				TbofertaPeer::addSelectColumns($criteria);
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				TbofertaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
					$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;
		return $this->collTbofertasRelatedByCodCursoDestino;
	}

	/**
	 * Returns the number of related Tboferta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tboferta objects.
	 * @throws     PropelException
	 */
	public function countTbofertasRelatedByCodCursoDestino(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$count = TbofertaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
					$count = TbofertaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertasRelatedByCodCursoDestino);
				}
			} else {
				$count = count($this->collTbofertasRelatedByCodCursoDestino);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tboferta object to this object
	 * through the Tboferta foreign key attribute.
	 *
	 * @param      Tboferta $l Tboferta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertaRelatedByCodCursoDestino(Tboferta $l)
	{
		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			$this->initTbofertasRelatedByCodCursoDestino();
		}
		if (!in_array($l, $this->collTbofertasRelatedByCodCursoDestino, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertasRelatedByCodCursoDestino, $l);
			$l->setTbcursoRelatedByCodCursoDestino($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbsala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbprofessorRelatedByIdMatriculaProf($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbprofessorRelatedByIdMatriculaProf2($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbofertasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related TbofertasRelatedByCodCursoDestino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbofertasRelatedByCodCursoDestinoJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertasRelatedByCodCursoDestino === null) {
			if ($this->isNew()) {
				$this->collTbofertasRelatedByCodCursoDestino = array();
			} else {

				$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso);

			if (!isset($this->lastTbofertaRelatedByCodCursoDestinoCriteria) || !$this->lastTbofertaRelatedByCodCursoDestinoCriteria->equals($criteria)) {
				$this->collTbofertasRelatedByCodCursoDestino = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaRelatedByCodCursoDestinoCriteria = $criteria;

		return $this->collTbofertasRelatedByCodCursoDestino;
	}

	/**
	 * Clears out the collTbprofessors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbprofessors()
	 */
	public function clearTbprofessors()
	{
		$this->collTbprofessors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbprofessors collection (array).
	 *
	 * By default this just sets the collTbprofessors collection to an empty array (like clearcollTbprofessors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbprofessors()
	{
		$this->collTbprofessors = array();
	}

	/**
	 * Gets an array of Tbprofessor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcurso has previously been saved, it will retrieve
	 * related Tbprofessors from storage. If this Tbcurso is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbprofessor[]
	 * @throws     PropelException
	 */
	public function getTbprofessors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
			   $this->collTbprofessors = array();
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				TbprofessorPeer::addSelectColumns($criteria);
				$this->collTbprofessors = TbprofessorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				TbprofessorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
					$this->collTbprofessors = TbprofessorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbprofessorCriteria = $criteria;
		return $this->collTbprofessors;
	}

	/**
	 * Returns the number of related Tbprofessor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbprofessor objects.
	 * @throws     PropelException
	 */
	public function countTbprofessors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				$count = TbprofessorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
					$count = TbprofessorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbprofessors);
				}
			} else {
				$count = count($this->collTbprofessors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbprofessor object to this object
	 * through the Tbprofessor foreign key attribute.
	 *
	 * @param      Tbprofessor $l Tbprofessor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbprofessor(Tbprofessor $l)
	{
		if ($this->collTbprofessors === null) {
			$this->initTbprofessors();
		}
		if (!in_array($l, $this->collTbprofessors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbprofessors, $l);
			$l->setTbcurso($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbprofessors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbprofessorsJoinTbnecesespecial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
				$this->collTbprofessors = array();
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorCriteria = $criteria;

		return $this->collTbprofessors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbprofessors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbprofessorsJoinTbproftipovinculo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
				$this->collTbprofessors = array();
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbproftipovinculo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbproftipovinculo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorCriteria = $criteria;

		return $this->collTbprofessors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbprofessors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbprofessorsJoinTbformacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
				$this->collTbprofessors = array();
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbformacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbformacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorCriteria = $criteria;

		return $this->collTbprofessors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbprofessors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbprofessorsJoinTbprofessorsituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
				$this->collTbprofessors = array();
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbprofessorsituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbprofessorsituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorCriteria = $criteria;

		return $this->collTbprofessors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcurso is new, it will return
	 * an empty collection; or if this Tbcurso has previously
	 * been saved, it will retrieve related Tbprofessors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcurso.
	 */
	public function getTbprofessorsJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessors === null) {
			if ($this->isNew()) {
				$this->collTbprofessors = array();
			} else {

				$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorPeer::COD_CURSO, $this->cod_curso);

			if (!isset($this->lastTbprofessorCriteria) || !$this->lastTbprofessorCriteria->equals($criteria)) {
				$this->collTbprofessors = TbprofessorPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorCriteria = $criteria;

		return $this->collTbprofessors;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTbcursoversaos) {
				foreach ((array) $this->collTbcursoversaos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertasRelatedByCodCurso) {
				foreach ((array) $this->collTbofertasRelatedByCodCurso as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertasRelatedByCodCursoDestino) {
				foreach ((array) $this->collTbofertasRelatedByCodCursoDestino as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbprofessors) {
				foreach ((array) $this->collTbprofessors as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTbcursoversaos = null;
		$this->collTbofertasRelatedByCodCurso = null;
		$this->collTbofertasRelatedByCodCursoDestino = null;
		$this->collTbprofessors = null;
			$this->aTbcursonivel = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTbcurso:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTbcurso::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTbcurso
