<?php


/**
 * Base class that represents a query for the 'tbaluno_import' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:37 2013
 *
 * @method TbalunoImportQuery orderByIdPessoa($order = Criteria::ASC) Order by the id_pessoa column
 * @method TbalunoImportQuery orderByNome($order = Criteria::ASC) Order by the nome column
 * @method TbalunoImportQuery orderByCelular($order = Criteria::ASC) Order by the celular column
 * @method TbalunoImportQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method TbalunoImportQuery orderByFoneResidencial($order = Criteria::ASC) Order by the fone_residencial column
 * @method TbalunoImportQuery orderByFoto($order = Criteria::ASC) Order by the foto column
 * @method TbalunoImportQuery orderByIdNecesEspecial($order = Criteria::ASC) Order by the id_neces_especial column
 * @method TbalunoImportQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbalunoImportQuery orderByDtNascimento($order = Criteria::ASC) Order by the dt_nascimento column
 * @method TbalunoImportQuery orderByNaturalidade($order = Criteria::ASC) Order by the naturalidade column
 * @method TbalunoImportQuery orderByUfNascimento($order = Criteria::ASC) Order by the uf_nascimento column
 * @method TbalunoImportQuery orderByNacionalidade($order = Criteria::ASC) Order by the nacionalidade column
 * @method TbalunoImportQuery orderBySexo($order = Criteria::ASC) Order by the sexo column
 * @method TbalunoImportQuery orderByEstadoCivil($order = Criteria::ASC) Order by the estado_civil column
 * @method TbalunoImportQuery orderByTitulo($order = Criteria::ASC) Order by the titulo column
 * @method TbalunoImportQuery orderByTituloZona($order = Criteria::ASC) Order by the titulo_zona column
 * @method TbalunoImportQuery orderByTituloSecao($order = Criteria::ASC) Order by the titulo_secao column
 * @method TbalunoImportQuery orderByRg($order = Criteria::ASC) Order by the rg column
 * @method TbalunoImportQuery orderByRgDtExped($order = Criteria::ASC) Order by the rg_dt_exped column
 * @method TbalunoImportQuery orderByRgOrgExped($order = Criteria::ASC) Order by the rg_org_exped column
 * @method TbalunoImportQuery orderByCpf($order = Criteria::ASC) Order by the cpf column
 * @method TbalunoImportQuery orderByReservista($order = Criteria::ASC) Order by the reservista column
 * @method TbalunoImportQuery orderByPai($order = Criteria::ASC) Order by the pai column
 * @method TbalunoImportQuery orderByMae($order = Criteria::ASC) Order by the mae column
 * @method TbalunoImportQuery orderByCep($order = Criteria::ASC) Order by the cep column
 * @method TbalunoImportQuery orderByNumero($order = Criteria::ASC) Order by the numero column
 * @method TbalunoImportQuery orderByComplemento($order = Criteria::ASC) Order by the complemento column
 * @method TbalunoImportQuery orderByIdVersaoCurso($order = Criteria::ASC) Order by the id_versao_curso column
 * @method TbalunoImportQuery orderByIdTipoIngresso($order = Criteria::ASC) Order by the id_tipo_ingresso column
 * @method TbalunoImportQuery orderByDtIngresso($order = Criteria::ASC) Order by the dt_ingresso column
 * @method TbalunoImportQuery orderByIdSituacao($order = Criteria::ASC) Order by the id_situacao column
 * @method TbalunoImportQuery orderByDtSituacao($order = Criteria::ASC) Order by the dt_situacao column
 * @method TbalunoImportQuery orderByIdDestino($order = Criteria::ASC) Order by the id_destino column
 * @method TbalunoImportQuery orderById2grau($order = Criteria::ASC) Order by the id_2grau column
 * @method TbalunoImportQuery orderByAnoConcl2grau($order = Criteria::ASC) Order by the ano_concl_2grau column
 * @method TbalunoImportQuery orderById3grau($order = Criteria::ASC) Order by the id_3grau column
 * @method TbalunoImportQuery orderByAnoConcl3grau($order = Criteria::ASC) Order by the ano_concl_3grau column
 * @method TbalunoImportQuery orderByIdTrabalho($order = Criteria::ASC) Order by the id_trabalho column
 * @method TbalunoImportQuery orderByCepTrabalho($order = Criteria::ASC) Order by the cep_trabalho column
 * @method TbalunoImportQuery orderByFoneTrabalho($order = Criteria::ASC) Order by the fone_trabalho column
 * @method TbalunoImportQuery orderByRamalTrabalho($order = Criteria::ASC) Order by the ramal_trabalho column
 * @method TbalunoImportQuery orderByMediaGeral($order = Criteria::ASC) Order by the media_geral column
 * @method TbalunoImportQuery orderByChEletivaCursada($order = Criteria::ASC) Order by the ch_eletiva_cursada column
 * @method TbalunoImportQuery orderByChEletivaSolicitada($order = Criteria::ASC) Order by the ch_eletiva_solicitada column
 * @method TbalunoImportQuery orderByChObrigCursada($order = Criteria::ASC) Order by the ch_obrig_cursada column
 * @method TbalunoImportQuery orderByChObrigSolicitada($order = Criteria::ASC) Order by the ch_obrig_solicitada column
 * @method TbalunoImportQuery orderByChTotal($order = Criteria::ASC) Order by the ch_total column
 * @method TbalunoImportQuery orderByIdAntigo($order = Criteria::ASC) Order by the id_antigo column
 * @method TbalunoImportQuery orderByInst2grau($order = Criteria::ASC) Order by the inst2grau column
 * @method TbalunoImportQuery orderByInst3grau($order = Criteria::ASC) Order by the inst3grau column
 * @method TbalunoImportQuery orderByInsttrabalho($order = Criteria::ASC) Order by the insttrabalho column
 * @method TbalunoImportQuery orderByIdNaturalidade($order = Criteria::ASC) Order by the id_naturalidade column
 * @method TbalunoImportQuery orderByIdNacionalidade($order = Criteria::ASC) Order by the id_nacionalidade column
 * @method TbalunoImportQuery orderById($order = Criteria::ASC) Order by the id column
 *
 * @method TbalunoImportQuery groupByIdPessoa() Group by the id_pessoa column
 * @method TbalunoImportQuery groupByNome() Group by the nome column
 * @method TbalunoImportQuery groupByCelular() Group by the celular column
 * @method TbalunoImportQuery groupByEmail() Group by the email column
 * @method TbalunoImportQuery groupByFoneResidencial() Group by the fone_residencial column
 * @method TbalunoImportQuery groupByFoto() Group by the foto column
 * @method TbalunoImportQuery groupByIdNecesEspecial() Group by the id_neces_especial column
 * @method TbalunoImportQuery groupByMatricula() Group by the matricula column
 * @method TbalunoImportQuery groupByDtNascimento() Group by the dt_nascimento column
 * @method TbalunoImportQuery groupByNaturalidade() Group by the naturalidade column
 * @method TbalunoImportQuery groupByUfNascimento() Group by the uf_nascimento column
 * @method TbalunoImportQuery groupByNacionalidade() Group by the nacionalidade column
 * @method TbalunoImportQuery groupBySexo() Group by the sexo column
 * @method TbalunoImportQuery groupByEstadoCivil() Group by the estado_civil column
 * @method TbalunoImportQuery groupByTitulo() Group by the titulo column
 * @method TbalunoImportQuery groupByTituloZona() Group by the titulo_zona column
 * @method TbalunoImportQuery groupByTituloSecao() Group by the titulo_secao column
 * @method TbalunoImportQuery groupByRg() Group by the rg column
 * @method TbalunoImportQuery groupByRgDtExped() Group by the rg_dt_exped column
 * @method TbalunoImportQuery groupByRgOrgExped() Group by the rg_org_exped column
 * @method TbalunoImportQuery groupByCpf() Group by the cpf column
 * @method TbalunoImportQuery groupByReservista() Group by the reservista column
 * @method TbalunoImportQuery groupByPai() Group by the pai column
 * @method TbalunoImportQuery groupByMae() Group by the mae column
 * @method TbalunoImportQuery groupByCep() Group by the cep column
 * @method TbalunoImportQuery groupByNumero() Group by the numero column
 * @method TbalunoImportQuery groupByComplemento() Group by the complemento column
 * @method TbalunoImportQuery groupByIdVersaoCurso() Group by the id_versao_curso column
 * @method TbalunoImportQuery groupByIdTipoIngresso() Group by the id_tipo_ingresso column
 * @method TbalunoImportQuery groupByDtIngresso() Group by the dt_ingresso column
 * @method TbalunoImportQuery groupByIdSituacao() Group by the id_situacao column
 * @method TbalunoImportQuery groupByDtSituacao() Group by the dt_situacao column
 * @method TbalunoImportQuery groupByIdDestino() Group by the id_destino column
 * @method TbalunoImportQuery groupById2grau() Group by the id_2grau column
 * @method TbalunoImportQuery groupByAnoConcl2grau() Group by the ano_concl_2grau column
 * @method TbalunoImportQuery groupById3grau() Group by the id_3grau column
 * @method TbalunoImportQuery groupByAnoConcl3grau() Group by the ano_concl_3grau column
 * @method TbalunoImportQuery groupByIdTrabalho() Group by the id_trabalho column
 * @method TbalunoImportQuery groupByCepTrabalho() Group by the cep_trabalho column
 * @method TbalunoImportQuery groupByFoneTrabalho() Group by the fone_trabalho column
 * @method TbalunoImportQuery groupByRamalTrabalho() Group by the ramal_trabalho column
 * @method TbalunoImportQuery groupByMediaGeral() Group by the media_geral column
 * @method TbalunoImportQuery groupByChEletivaCursada() Group by the ch_eletiva_cursada column
 * @method TbalunoImportQuery groupByChEletivaSolicitada() Group by the ch_eletiva_solicitada column
 * @method TbalunoImportQuery groupByChObrigCursada() Group by the ch_obrig_cursada column
 * @method TbalunoImportQuery groupByChObrigSolicitada() Group by the ch_obrig_solicitada column
 * @method TbalunoImportQuery groupByChTotal() Group by the ch_total column
 * @method TbalunoImportQuery groupByIdAntigo() Group by the id_antigo column
 * @method TbalunoImportQuery groupByInst2grau() Group by the inst2grau column
 * @method TbalunoImportQuery groupByInst3grau() Group by the inst3grau column
 * @method TbalunoImportQuery groupByInsttrabalho() Group by the insttrabalho column
 * @method TbalunoImportQuery groupByIdNaturalidade() Group by the id_naturalidade column
 * @method TbalunoImportQuery groupByIdNacionalidade() Group by the id_nacionalidade column
 * @method TbalunoImportQuery groupById() Group by the id column
 *
 * @method TbalunoImportQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbalunoImportQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbalunoImportQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbalunoImport findOne(PropelPDO $con = null) Return the first TbalunoImport matching the query
 * @method TbalunoImport findOneOrCreate(PropelPDO $con = null) Return the first TbalunoImport matching the query, or a new TbalunoImport object populated from the query conditions when no match is found
 *
 * @method TbalunoImport findOneByIdPessoa(int $id_pessoa) Return the first TbalunoImport filtered by the id_pessoa column
 * @method TbalunoImport findOneByNome(string $nome) Return the first TbalunoImport filtered by the nome column
 * @method TbalunoImport findOneByCelular(string $celular) Return the first TbalunoImport filtered by the celular column
 * @method TbalunoImport findOneByEmail(string $email) Return the first TbalunoImport filtered by the email column
 * @method TbalunoImport findOneByFoneResidencial(string $fone_residencial) Return the first TbalunoImport filtered by the fone_residencial column
 * @method TbalunoImport findOneByFoto(resource $foto) Return the first TbalunoImport filtered by the foto column
 * @method TbalunoImport findOneByIdNecesEspecial(string $id_neces_especial) Return the first TbalunoImport filtered by the id_neces_especial column
 * @method TbalunoImport findOneByMatricula(string $matricula) Return the first TbalunoImport filtered by the matricula column
 * @method TbalunoImport findOneByDtNascimento(string $dt_nascimento) Return the first TbalunoImport filtered by the dt_nascimento column
 * @method TbalunoImport findOneByNaturalidade(string $naturalidade) Return the first TbalunoImport filtered by the naturalidade column
 * @method TbalunoImport findOneByUfNascimento(string $uf_nascimento) Return the first TbalunoImport filtered by the uf_nascimento column
 * @method TbalunoImport findOneByNacionalidade(string $nacionalidade) Return the first TbalunoImport filtered by the nacionalidade column
 * @method TbalunoImport findOneBySexo(string $sexo) Return the first TbalunoImport filtered by the sexo column
 * @method TbalunoImport findOneByEstadoCivil(string $estado_civil) Return the first TbalunoImport filtered by the estado_civil column
 * @method TbalunoImport findOneByTitulo(string $titulo) Return the first TbalunoImport filtered by the titulo column
 * @method TbalunoImport findOneByTituloZona(int $titulo_zona) Return the first TbalunoImport filtered by the titulo_zona column
 * @method TbalunoImport findOneByTituloSecao(int $titulo_secao) Return the first TbalunoImport filtered by the titulo_secao column
 * @method TbalunoImport findOneByRg(string $rg) Return the first TbalunoImport filtered by the rg column
 * @method TbalunoImport findOneByRgDtExped(string $rg_dt_exped) Return the first TbalunoImport filtered by the rg_dt_exped column
 * @method TbalunoImport findOneByRgOrgExped(string $rg_org_exped) Return the first TbalunoImport filtered by the rg_org_exped column
 * @method TbalunoImport findOneByCpf(string $cpf) Return the first TbalunoImport filtered by the cpf column
 * @method TbalunoImport findOneByReservista(string $reservista) Return the first TbalunoImport filtered by the reservista column
 * @method TbalunoImport findOneByPai(string $pai) Return the first TbalunoImport filtered by the pai column
 * @method TbalunoImport findOneByMae(string $mae) Return the first TbalunoImport filtered by the mae column
 * @method TbalunoImport findOneByCep(string $cep) Return the first TbalunoImport filtered by the cep column
 * @method TbalunoImport findOneByNumero(string $numero) Return the first TbalunoImport filtered by the numero column
 * @method TbalunoImport findOneByComplemento(string $complemento) Return the first TbalunoImport filtered by the complemento column
 * @method TbalunoImport findOneByIdVersaoCurso(int $id_versao_curso) Return the first TbalunoImport filtered by the id_versao_curso column
 * @method TbalunoImport findOneByIdTipoIngresso(int $id_tipo_ingresso) Return the first TbalunoImport filtered by the id_tipo_ingresso column
 * @method TbalunoImport findOneByDtIngresso(string $dt_ingresso) Return the first TbalunoImport filtered by the dt_ingresso column
 * @method TbalunoImport findOneByIdSituacao(int $id_situacao) Return the first TbalunoImport filtered by the id_situacao column
 * @method TbalunoImport findOneByDtSituacao(string $dt_situacao) Return the first TbalunoImport filtered by the dt_situacao column
 * @method TbalunoImport findOneByIdDestino(int $id_destino) Return the first TbalunoImport filtered by the id_destino column
 * @method TbalunoImport findOneById2grau(int $id_2grau) Return the first TbalunoImport filtered by the id_2grau column
 * @method TbalunoImport findOneByAnoConcl2grau(int $ano_concl_2grau) Return the first TbalunoImport filtered by the ano_concl_2grau column
 * @method TbalunoImport findOneById3grau(int $id_3grau) Return the first TbalunoImport filtered by the id_3grau column
 * @method TbalunoImport findOneByAnoConcl3grau(int $ano_concl_3grau) Return the first TbalunoImport filtered by the ano_concl_3grau column
 * @method TbalunoImport findOneByIdTrabalho(int $id_trabalho) Return the first TbalunoImport filtered by the id_trabalho column
 * @method TbalunoImport findOneByCepTrabalho(string $cep_trabalho) Return the first TbalunoImport filtered by the cep_trabalho column
 * @method TbalunoImport findOneByFoneTrabalho(string $fone_trabalho) Return the first TbalunoImport filtered by the fone_trabalho column
 * @method TbalunoImport findOneByRamalTrabalho(string $ramal_trabalho) Return the first TbalunoImport filtered by the ramal_trabalho column
 * @method TbalunoImport findOneByMediaGeral(string $media_geral) Return the first TbalunoImport filtered by the media_geral column
 * @method TbalunoImport findOneByChEletivaCursada(int $ch_eletiva_cursada) Return the first TbalunoImport filtered by the ch_eletiva_cursada column
 * @method TbalunoImport findOneByChEletivaSolicitada(int $ch_eletiva_solicitada) Return the first TbalunoImport filtered by the ch_eletiva_solicitada column
 * @method TbalunoImport findOneByChObrigCursada(int $ch_obrig_cursada) Return the first TbalunoImport filtered by the ch_obrig_cursada column
 * @method TbalunoImport findOneByChObrigSolicitada(int $ch_obrig_solicitada) Return the first TbalunoImport filtered by the ch_obrig_solicitada column
 * @method TbalunoImport findOneByChTotal(string $ch_total) Return the first TbalunoImport filtered by the ch_total column
 * @method TbalunoImport findOneByIdAntigo(int $id_antigo) Return the first TbalunoImport filtered by the id_antigo column
 * @method TbalunoImport findOneByInst2grau(string $inst2grau) Return the first TbalunoImport filtered by the inst2grau column
 * @method TbalunoImport findOneByInst3grau(string $inst3grau) Return the first TbalunoImport filtered by the inst3grau column
 * @method TbalunoImport findOneByInsttrabalho(string $insttrabalho) Return the first TbalunoImport filtered by the insttrabalho column
 * @method TbalunoImport findOneByIdNaturalidade(int $id_naturalidade) Return the first TbalunoImport filtered by the id_naturalidade column
 * @method TbalunoImport findOneByIdNacionalidade(int $id_nacionalidade) Return the first TbalunoImport filtered by the id_nacionalidade column
 * @method TbalunoImport findOneById(int $id) Return the first TbalunoImport filtered by the id column
 *
 * @method array findByIdPessoa(int $id_pessoa) Return TbalunoImport objects filtered by the id_pessoa column
 * @method array findByNome(string $nome) Return TbalunoImport objects filtered by the nome column
 * @method array findByCelular(string $celular) Return TbalunoImport objects filtered by the celular column
 * @method array findByEmail(string $email) Return TbalunoImport objects filtered by the email column
 * @method array findByFoneResidencial(string $fone_residencial) Return TbalunoImport objects filtered by the fone_residencial column
 * @method array findByFoto(resource $foto) Return TbalunoImport objects filtered by the foto column
 * @method array findByIdNecesEspecial(string $id_neces_especial) Return TbalunoImport objects filtered by the id_neces_especial column
 * @method array findByMatricula(string $matricula) Return TbalunoImport objects filtered by the matricula column
 * @method array findByDtNascimento(string $dt_nascimento) Return TbalunoImport objects filtered by the dt_nascimento column
 * @method array findByNaturalidade(string $naturalidade) Return TbalunoImport objects filtered by the naturalidade column
 * @method array findByUfNascimento(string $uf_nascimento) Return TbalunoImport objects filtered by the uf_nascimento column
 * @method array findByNacionalidade(string $nacionalidade) Return TbalunoImport objects filtered by the nacionalidade column
 * @method array findBySexo(string $sexo) Return TbalunoImport objects filtered by the sexo column
 * @method array findByEstadoCivil(string $estado_civil) Return TbalunoImport objects filtered by the estado_civil column
 * @method array findByTitulo(string $titulo) Return TbalunoImport objects filtered by the titulo column
 * @method array findByTituloZona(int $titulo_zona) Return TbalunoImport objects filtered by the titulo_zona column
 * @method array findByTituloSecao(int $titulo_secao) Return TbalunoImport objects filtered by the titulo_secao column
 * @method array findByRg(string $rg) Return TbalunoImport objects filtered by the rg column
 * @method array findByRgDtExped(string $rg_dt_exped) Return TbalunoImport objects filtered by the rg_dt_exped column
 * @method array findByRgOrgExped(string $rg_org_exped) Return TbalunoImport objects filtered by the rg_org_exped column
 * @method array findByCpf(string $cpf) Return TbalunoImport objects filtered by the cpf column
 * @method array findByReservista(string $reservista) Return TbalunoImport objects filtered by the reservista column
 * @method array findByPai(string $pai) Return TbalunoImport objects filtered by the pai column
 * @method array findByMae(string $mae) Return TbalunoImport objects filtered by the mae column
 * @method array findByCep(string $cep) Return TbalunoImport objects filtered by the cep column
 * @method array findByNumero(string $numero) Return TbalunoImport objects filtered by the numero column
 * @method array findByComplemento(string $complemento) Return TbalunoImport objects filtered by the complemento column
 * @method array findByIdVersaoCurso(int $id_versao_curso) Return TbalunoImport objects filtered by the id_versao_curso column
 * @method array findByIdTipoIngresso(int $id_tipo_ingresso) Return TbalunoImport objects filtered by the id_tipo_ingresso column
 * @method array findByDtIngresso(string $dt_ingresso) Return TbalunoImport objects filtered by the dt_ingresso column
 * @method array findByIdSituacao(int $id_situacao) Return TbalunoImport objects filtered by the id_situacao column
 * @method array findByDtSituacao(string $dt_situacao) Return TbalunoImport objects filtered by the dt_situacao column
 * @method array findByIdDestino(int $id_destino) Return TbalunoImport objects filtered by the id_destino column
 * @method array findById2grau(int $id_2grau) Return TbalunoImport objects filtered by the id_2grau column
 * @method array findByAnoConcl2grau(int $ano_concl_2grau) Return TbalunoImport objects filtered by the ano_concl_2grau column
 * @method array findById3grau(int $id_3grau) Return TbalunoImport objects filtered by the id_3grau column
 * @method array findByAnoConcl3grau(int $ano_concl_3grau) Return TbalunoImport objects filtered by the ano_concl_3grau column
 * @method array findByIdTrabalho(int $id_trabalho) Return TbalunoImport objects filtered by the id_trabalho column
 * @method array findByCepTrabalho(string $cep_trabalho) Return TbalunoImport objects filtered by the cep_trabalho column
 * @method array findByFoneTrabalho(string $fone_trabalho) Return TbalunoImport objects filtered by the fone_trabalho column
 * @method array findByRamalTrabalho(string $ramal_trabalho) Return TbalunoImport objects filtered by the ramal_trabalho column
 * @method array findByMediaGeral(string $media_geral) Return TbalunoImport objects filtered by the media_geral column
 * @method array findByChEletivaCursada(int $ch_eletiva_cursada) Return TbalunoImport objects filtered by the ch_eletiva_cursada column
 * @method array findByChEletivaSolicitada(int $ch_eletiva_solicitada) Return TbalunoImport objects filtered by the ch_eletiva_solicitada column
 * @method array findByChObrigCursada(int $ch_obrig_cursada) Return TbalunoImport objects filtered by the ch_obrig_cursada column
 * @method array findByChObrigSolicitada(int $ch_obrig_solicitada) Return TbalunoImport objects filtered by the ch_obrig_solicitada column
 * @method array findByChTotal(string $ch_total) Return TbalunoImport objects filtered by the ch_total column
 * @method array findByIdAntigo(int $id_antigo) Return TbalunoImport objects filtered by the id_antigo column
 * @method array findByInst2grau(string $inst2grau) Return TbalunoImport objects filtered by the inst2grau column
 * @method array findByInst3grau(string $inst3grau) Return TbalunoImport objects filtered by the inst3grau column
 * @method array findByInsttrabalho(string $insttrabalho) Return TbalunoImport objects filtered by the insttrabalho column
 * @method array findByIdNaturalidade(int $id_naturalidade) Return TbalunoImport objects filtered by the id_naturalidade column
 * @method array findByIdNacionalidade(int $id_nacionalidade) Return TbalunoImport objects filtered by the id_nacionalidade column
 * @method array findById(int $id) Return TbalunoImport objects filtered by the id column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbalunoImportQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbalunoImportQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'TbalunoImport', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbalunoImportQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbalunoImportQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbalunoImportQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbalunoImportQuery) {
            return $criteria;
        }
        $query = new TbalunoImportQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   TbalunoImport|TbalunoImport[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbalunoImportPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbalunoImportPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   TbalunoImport A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_PESSOA, NOME, CELULAR, EMAIL, FONE_RESIDENCIAL, FOTO, ID_NECES_ESPECIAL, MATRICULA, DT_NASCIMENTO, NATURALIDADE, UF_NASCIMENTO, NACIONALIDADE, SEXO, ESTADO_CIVIL, TITULO, TITULO_ZONA, TITULO_SECAO, RG, RG_DT_EXPED, RG_ORG_EXPED, CPF, RESERVISTA, PAI, MAE, CEP, NUMERO, COMPLEMENTO, ID_VERSAO_CURSO, ID_TIPO_INGRESSO, DT_INGRESSO, ID_SITUACAO, DT_SITUACAO, ID_DESTINO, ID_2GRAU, ANO_CONCL_2GRAU, ID_3GRAU, ANO_CONCL_3GRAU, ID_TRABALHO, CEP_TRABALHO, FONE_TRABALHO, RAMAL_TRABALHO, MEDIA_GERAL, CH_ELETIVA_CURSADA, CH_ELETIVA_SOLICITADA, CH_OBRIG_CURSADA, CH_OBRIG_SOLICITADA, CH_TOTAL, ID_ANTIGO, INST2GRAU, INST3GRAU, INSTTRABALHO, ID_NATURALIDADE, ID_NACIONALIDADE, ID FROM tbaluno_import WHERE ID = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new TbalunoImport();
            $obj->hydrate($row);
            TbalunoImportPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return TbalunoImport|TbalunoImport[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|TbalunoImport[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbalunoImportPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbalunoImportPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_pessoa column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPessoa(1234); // WHERE id_pessoa = 1234
     * $query->filterByIdPessoa(array(12, 34)); // WHERE id_pessoa IN (12, 34)
     * $query->filterByIdPessoa(array('min' => 12)); // WHERE id_pessoa > 12
     * </code>
     *
     * @param     mixed $idPessoa The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdPessoa($idPessoa = null, $comparison = null)
    {
        if (is_array($idPessoa)) {
            $useMinMax = false;
            if (isset($idPessoa['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_PESSOA, $idPessoa['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPessoa['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_PESSOA, $idPessoa['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_PESSOA, $idPessoa, $comparison);
    }

    /**
     * Filter the query on the nome column
     *
     * Example usage:
     * <code>
     * $query->filterByNome('fooValue');   // WHERE nome = 'fooValue'
     * $query->filterByNome('%fooValue%'); // WHERE nome LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nome The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByNome($nome = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nome)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nome)) {
                $nome = str_replace('*', '%', $nome);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::NOME, $nome, $comparison);
    }

    /**
     * Filter the query on the celular column
     *
     * Example usage:
     * <code>
     * $query->filterByCelular('fooValue');   // WHERE celular = 'fooValue'
     * $query->filterByCelular('%fooValue%'); // WHERE celular LIKE '%fooValue%'
     * </code>
     *
     * @param     string $celular The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByCelular($celular = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($celular)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $celular)) {
                $celular = str_replace('*', '%', $celular);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CELULAR, $celular, $comparison);
    }

    /**
     * Filter the query on the email column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
     * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByEmail($email = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email)) {
                $email = str_replace('*', '%', $email);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::EMAIL, $email, $comparison);
    }

    /**
     * Filter the query on the fone_residencial column
     *
     * Example usage:
     * <code>
     * $query->filterByFoneResidencial('fooValue');   // WHERE fone_residencial = 'fooValue'
     * $query->filterByFoneResidencial('%fooValue%'); // WHERE fone_residencial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $foneResidencial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByFoneResidencial($foneResidencial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($foneResidencial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $foneResidencial)) {
                $foneResidencial = str_replace('*', '%', $foneResidencial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::FONE_RESIDENCIAL, $foneResidencial, $comparison);
    }

    /**
     * Filter the query on the foto column
     *
     * @param     mixed $foto The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByFoto($foto = null, $comparison = null)
    {

        return $this->addUsingAlias(TbalunoImportPeer::FOTO, $foto, $comparison);
    }

    /**
     * Filter the query on the id_neces_especial column
     *
     * Example usage:
     * <code>
     * $query->filterByIdNecesEspecial('fooValue');   // WHERE id_neces_especial = 'fooValue'
     * $query->filterByIdNecesEspecial('%fooValue%'); // WHERE id_neces_especial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $idNecesEspecial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdNecesEspecial($idNecesEspecial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($idNecesEspecial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $idNecesEspecial)) {
                $idNecesEspecial = str_replace('*', '%', $idNecesEspecial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_NECES_ESPECIAL, $idNecesEspecial, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the dt_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByDtNascimento('2011-03-14'); // WHERE dt_nascimento = '2011-03-14'
     * $query->filterByDtNascimento('now'); // WHERE dt_nascimento = '2011-03-14'
     * $query->filterByDtNascimento(array('max' => 'yesterday')); // WHERE dt_nascimento > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtNascimento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByDtNascimento($dtNascimento = null, $comparison = null)
    {
        if (is_array($dtNascimento)) {
            $useMinMax = false;
            if (isset($dtNascimento['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::DT_NASCIMENTO, $dtNascimento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtNascimento['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::DT_NASCIMENTO, $dtNascimento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::DT_NASCIMENTO, $dtNascimento, $comparison);
    }

    /**
     * Filter the query on the naturalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNaturalidade('fooValue');   // WHERE naturalidade = 'fooValue'
     * $query->filterByNaturalidade('%fooValue%'); // WHERE naturalidade LIKE '%fooValue%'
     * </code>
     *
     * @param     string $naturalidade The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByNaturalidade($naturalidade = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($naturalidade)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $naturalidade)) {
                $naturalidade = str_replace('*', '%', $naturalidade);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::NATURALIDADE, $naturalidade, $comparison);
    }

    /**
     * Filter the query on the uf_nascimento column
     *
     * Example usage:
     * <code>
     * $query->filterByUfNascimento('fooValue');   // WHERE uf_nascimento = 'fooValue'
     * $query->filterByUfNascimento('%fooValue%'); // WHERE uf_nascimento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ufNascimento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByUfNascimento($ufNascimento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ufNascimento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ufNascimento)) {
                $ufNascimento = str_replace('*', '%', $ufNascimento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::UF_NASCIMENTO, $ufNascimento, $comparison);
    }

    /**
     * Filter the query on the nacionalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByNacionalidade('fooValue');   // WHERE nacionalidade = 'fooValue'
     * $query->filterByNacionalidade('%fooValue%'); // WHERE nacionalidade LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nacionalidade The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByNacionalidade($nacionalidade = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nacionalidade)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nacionalidade)) {
                $nacionalidade = str_replace('*', '%', $nacionalidade);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::NACIONALIDADE, $nacionalidade, $comparison);
    }

    /**
     * Filter the query on the sexo column
     *
     * Example usage:
     * <code>
     * $query->filterBySexo('fooValue');   // WHERE sexo = 'fooValue'
     * $query->filterBySexo('%fooValue%'); // WHERE sexo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sexo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterBySexo($sexo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sexo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sexo)) {
                $sexo = str_replace('*', '%', $sexo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::SEXO, $sexo, $comparison);
    }

    /**
     * Filter the query on the estado_civil column
     *
     * Example usage:
     * <code>
     * $query->filterByEstadoCivil('fooValue');   // WHERE estado_civil = 'fooValue'
     * $query->filterByEstadoCivil('%fooValue%'); // WHERE estado_civil LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estadoCivil The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByEstadoCivil($estadoCivil = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estadoCivil)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estadoCivil)) {
                $estadoCivil = str_replace('*', '%', $estadoCivil);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ESTADO_CIVIL, $estadoCivil, $comparison);
    }

    /**
     * Filter the query on the titulo column
     *
     * Example usage:
     * <code>
     * $query->filterByTitulo('fooValue');   // WHERE titulo = 'fooValue'
     * $query->filterByTitulo('%fooValue%'); // WHERE titulo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $titulo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByTitulo($titulo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($titulo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $titulo)) {
                $titulo = str_replace('*', '%', $titulo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::TITULO, $titulo, $comparison);
    }

    /**
     * Filter the query on the titulo_zona column
     *
     * Example usage:
     * <code>
     * $query->filterByTituloZona(1234); // WHERE titulo_zona = 1234
     * $query->filterByTituloZona(array(12, 34)); // WHERE titulo_zona IN (12, 34)
     * $query->filterByTituloZona(array('min' => 12)); // WHERE titulo_zona > 12
     * </code>
     *
     * @param     mixed $tituloZona The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByTituloZona($tituloZona = null, $comparison = null)
    {
        if (is_array($tituloZona)) {
            $useMinMax = false;
            if (isset($tituloZona['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::TITULO_ZONA, $tituloZona['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tituloZona['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::TITULO_ZONA, $tituloZona['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::TITULO_ZONA, $tituloZona, $comparison);
    }

    /**
     * Filter the query on the titulo_secao column
     *
     * Example usage:
     * <code>
     * $query->filterByTituloSecao(1234); // WHERE titulo_secao = 1234
     * $query->filterByTituloSecao(array(12, 34)); // WHERE titulo_secao IN (12, 34)
     * $query->filterByTituloSecao(array('min' => 12)); // WHERE titulo_secao > 12
     * </code>
     *
     * @param     mixed $tituloSecao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByTituloSecao($tituloSecao = null, $comparison = null)
    {
        if (is_array($tituloSecao)) {
            $useMinMax = false;
            if (isset($tituloSecao['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::TITULO_SECAO, $tituloSecao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tituloSecao['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::TITULO_SECAO, $tituloSecao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::TITULO_SECAO, $tituloSecao, $comparison);
    }

    /**
     * Filter the query on the rg column
     *
     * Example usage:
     * <code>
     * $query->filterByRg('fooValue');   // WHERE rg = 'fooValue'
     * $query->filterByRg('%fooValue%'); // WHERE rg LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rg The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByRg($rg = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rg)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rg)) {
                $rg = str_replace('*', '%', $rg);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::RG, $rg, $comparison);
    }

    /**
     * Filter the query on the rg_dt_exped column
     *
     * Example usage:
     * <code>
     * $query->filterByRgDtExped('2011-03-14'); // WHERE rg_dt_exped = '2011-03-14'
     * $query->filterByRgDtExped('now'); // WHERE rg_dt_exped = '2011-03-14'
     * $query->filterByRgDtExped(array('max' => 'yesterday')); // WHERE rg_dt_exped > '2011-03-13'
     * </code>
     *
     * @param     mixed $rgDtExped The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByRgDtExped($rgDtExped = null, $comparison = null)
    {
        if (is_array($rgDtExped)) {
            $useMinMax = false;
            if (isset($rgDtExped['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::RG_DT_EXPED, $rgDtExped['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($rgDtExped['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::RG_DT_EXPED, $rgDtExped['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::RG_DT_EXPED, $rgDtExped, $comparison);
    }

    /**
     * Filter the query on the rg_org_exped column
     *
     * Example usage:
     * <code>
     * $query->filterByRgOrgExped('fooValue');   // WHERE rg_org_exped = 'fooValue'
     * $query->filterByRgOrgExped('%fooValue%'); // WHERE rg_org_exped LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rgOrgExped The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByRgOrgExped($rgOrgExped = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rgOrgExped)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rgOrgExped)) {
                $rgOrgExped = str_replace('*', '%', $rgOrgExped);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::RG_ORG_EXPED, $rgOrgExped, $comparison);
    }

    /**
     * Filter the query on the cpf column
     *
     * Example usage:
     * <code>
     * $query->filterByCpf('fooValue');   // WHERE cpf = 'fooValue'
     * $query->filterByCpf('%fooValue%'); // WHERE cpf LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cpf The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByCpf($cpf = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cpf)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cpf)) {
                $cpf = str_replace('*', '%', $cpf);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CPF, $cpf, $comparison);
    }

    /**
     * Filter the query on the reservista column
     *
     * Example usage:
     * <code>
     * $query->filterByReservista('fooValue');   // WHERE reservista = 'fooValue'
     * $query->filterByReservista('%fooValue%'); // WHERE reservista LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reservista The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByReservista($reservista = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reservista)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reservista)) {
                $reservista = str_replace('*', '%', $reservista);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::RESERVISTA, $reservista, $comparison);
    }

    /**
     * Filter the query on the pai column
     *
     * Example usage:
     * <code>
     * $query->filterByPai('fooValue');   // WHERE pai = 'fooValue'
     * $query->filterByPai('%fooValue%'); // WHERE pai LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pai The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByPai($pai = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pai)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pai)) {
                $pai = str_replace('*', '%', $pai);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::PAI, $pai, $comparison);
    }

    /**
     * Filter the query on the mae column
     *
     * Example usage:
     * <code>
     * $query->filterByMae('fooValue');   // WHERE mae = 'fooValue'
     * $query->filterByMae('%fooValue%'); // WHERE mae LIKE '%fooValue%'
     * </code>
     *
     * @param     string $mae The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByMae($mae = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($mae)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $mae)) {
                $mae = str_replace('*', '%', $mae);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::MAE, $mae, $comparison);
    }

    /**
     * Filter the query on the cep column
     *
     * Example usage:
     * <code>
     * $query->filterByCep('fooValue');   // WHERE cep = 'fooValue'
     * $query->filterByCep('%fooValue%'); // WHERE cep LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cep The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByCep($cep = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cep)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cep)) {
                $cep = str_replace('*', '%', $cep);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CEP, $cep, $comparison);
    }

    /**
     * Filter the query on the numero column
     *
     * Example usage:
     * <code>
     * $query->filterByNumero('fooValue');   // WHERE numero = 'fooValue'
     * $query->filterByNumero('%fooValue%'); // WHERE numero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $numero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByNumero($numero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($numero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $numero)) {
                $numero = str_replace('*', '%', $numero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::NUMERO, $numero, $comparison);
    }

    /**
     * Filter the query on the complemento column
     *
     * Example usage:
     * <code>
     * $query->filterByComplemento('fooValue');   // WHERE complemento = 'fooValue'
     * $query->filterByComplemento('%fooValue%'); // WHERE complemento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $complemento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByComplemento($complemento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($complemento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $complemento)) {
                $complemento = str_replace('*', '%', $complemento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::COMPLEMENTO, $complemento, $comparison);
    }

    /**
     * Filter the query on the id_versao_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByIdVersaoCurso(1234); // WHERE id_versao_curso = 1234
     * $query->filterByIdVersaoCurso(array(12, 34)); // WHERE id_versao_curso IN (12, 34)
     * $query->filterByIdVersaoCurso(array('min' => 12)); // WHERE id_versao_curso > 12
     * </code>
     *
     * @param     mixed $idVersaoCurso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdVersaoCurso($idVersaoCurso = null, $comparison = null)
    {
        if (is_array($idVersaoCurso)) {
            $useMinMax = false;
            if (isset($idVersaoCurso['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_VERSAO_CURSO, $idVersaoCurso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idVersaoCurso['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_VERSAO_CURSO, $idVersaoCurso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_VERSAO_CURSO, $idVersaoCurso, $comparison);
    }

    /**
     * Filter the query on the id_tipo_ingresso column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTipoIngresso(1234); // WHERE id_tipo_ingresso = 1234
     * $query->filterByIdTipoIngresso(array(12, 34)); // WHERE id_tipo_ingresso IN (12, 34)
     * $query->filterByIdTipoIngresso(array('min' => 12)); // WHERE id_tipo_ingresso > 12
     * </code>
     *
     * @param     mixed $idTipoIngresso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdTipoIngresso($idTipoIngresso = null, $comparison = null)
    {
        if (is_array($idTipoIngresso)) {
            $useMinMax = false;
            if (isset($idTipoIngresso['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_TIPO_INGRESSO, $idTipoIngresso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTipoIngresso['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_TIPO_INGRESSO, $idTipoIngresso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_TIPO_INGRESSO, $idTipoIngresso, $comparison);
    }

    /**
     * Filter the query on the dt_ingresso column
     *
     * Example usage:
     * <code>
     * $query->filterByDtIngresso('2011-03-14'); // WHERE dt_ingresso = '2011-03-14'
     * $query->filterByDtIngresso('now'); // WHERE dt_ingresso = '2011-03-14'
     * $query->filterByDtIngresso(array('max' => 'yesterday')); // WHERE dt_ingresso > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtIngresso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByDtIngresso($dtIngresso = null, $comparison = null)
    {
        if (is_array($dtIngresso)) {
            $useMinMax = false;
            if (isset($dtIngresso['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::DT_INGRESSO, $dtIngresso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtIngresso['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::DT_INGRESSO, $dtIngresso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::DT_INGRESSO, $dtIngresso, $comparison);
    }

    /**
     * Filter the query on the id_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSituacao(1234); // WHERE id_situacao = 1234
     * $query->filterByIdSituacao(array(12, 34)); // WHERE id_situacao IN (12, 34)
     * $query->filterByIdSituacao(array('min' => 12)); // WHERE id_situacao > 12
     * </code>
     *
     * @param     mixed $idSituacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdSituacao($idSituacao = null, $comparison = null)
    {
        if (is_array($idSituacao)) {
            $useMinMax = false;
            if (isset($idSituacao['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_SITUACAO, $idSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSituacao['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_SITUACAO, $idSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_SITUACAO, $idSituacao, $comparison);
    }

    /**
     * Filter the query on the dt_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByDtSituacao('2011-03-14'); // WHERE dt_situacao = '2011-03-14'
     * $query->filterByDtSituacao('now'); // WHERE dt_situacao = '2011-03-14'
     * $query->filterByDtSituacao(array('max' => 'yesterday')); // WHERE dt_situacao > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtSituacao The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByDtSituacao($dtSituacao = null, $comparison = null)
    {
        if (is_array($dtSituacao)) {
            $useMinMax = false;
            if (isset($dtSituacao['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::DT_SITUACAO, $dtSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtSituacao['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::DT_SITUACAO, $dtSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::DT_SITUACAO, $dtSituacao, $comparison);
    }

    /**
     * Filter the query on the id_destino column
     *
     * Example usage:
     * <code>
     * $query->filterByIdDestino(1234); // WHERE id_destino = 1234
     * $query->filterByIdDestino(array(12, 34)); // WHERE id_destino IN (12, 34)
     * $query->filterByIdDestino(array('min' => 12)); // WHERE id_destino > 12
     * </code>
     *
     * @param     mixed $idDestino The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdDestino($idDestino = null, $comparison = null)
    {
        if (is_array($idDestino)) {
            $useMinMax = false;
            if (isset($idDestino['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_DESTINO, $idDestino['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idDestino['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_DESTINO, $idDestino['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_DESTINO, $idDestino, $comparison);
    }

    /**
     * Filter the query on the id_2grau column
     *
     * Example usage:
     * <code>
     * $query->filterById2grau(1234); // WHERE id_2grau = 1234
     * $query->filterById2grau(array(12, 34)); // WHERE id_2grau IN (12, 34)
     * $query->filterById2grau(array('min' => 12)); // WHERE id_2grau > 12
     * </code>
     *
     * @param     mixed $id2grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterById2grau($id2grau = null, $comparison = null)
    {
        if (is_array($id2grau)) {
            $useMinMax = false;
            if (isset($id2grau['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_2GRAU, $id2grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id2grau['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_2GRAU, $id2grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_2GRAU, $id2grau, $comparison);
    }

    /**
     * Filter the query on the ano_concl_2grau column
     *
     * Example usage:
     * <code>
     * $query->filterByAnoConcl2grau(1234); // WHERE ano_concl_2grau = 1234
     * $query->filterByAnoConcl2grau(array(12, 34)); // WHERE ano_concl_2grau IN (12, 34)
     * $query->filterByAnoConcl2grau(array('min' => 12)); // WHERE ano_concl_2grau > 12
     * </code>
     *
     * @param     mixed $anoConcl2grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByAnoConcl2grau($anoConcl2grau = null, $comparison = null)
    {
        if (is_array($anoConcl2grau)) {
            $useMinMax = false;
            if (isset($anoConcl2grau['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ANO_CONCL_2GRAU, $anoConcl2grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anoConcl2grau['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ANO_CONCL_2GRAU, $anoConcl2grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ANO_CONCL_2GRAU, $anoConcl2grau, $comparison);
    }

    /**
     * Filter the query on the id_3grau column
     *
     * Example usage:
     * <code>
     * $query->filterById3grau(1234); // WHERE id_3grau = 1234
     * $query->filterById3grau(array(12, 34)); // WHERE id_3grau IN (12, 34)
     * $query->filterById3grau(array('min' => 12)); // WHERE id_3grau > 12
     * </code>
     *
     * @param     mixed $id3grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterById3grau($id3grau = null, $comparison = null)
    {
        if (is_array($id3grau)) {
            $useMinMax = false;
            if (isset($id3grau['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_3GRAU, $id3grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id3grau['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_3GRAU, $id3grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_3GRAU, $id3grau, $comparison);
    }

    /**
     * Filter the query on the ano_concl_3grau column
     *
     * Example usage:
     * <code>
     * $query->filterByAnoConcl3grau(1234); // WHERE ano_concl_3grau = 1234
     * $query->filterByAnoConcl3grau(array(12, 34)); // WHERE ano_concl_3grau IN (12, 34)
     * $query->filterByAnoConcl3grau(array('min' => 12)); // WHERE ano_concl_3grau > 12
     * </code>
     *
     * @param     mixed $anoConcl3grau The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByAnoConcl3grau($anoConcl3grau = null, $comparison = null)
    {
        if (is_array($anoConcl3grau)) {
            $useMinMax = false;
            if (isset($anoConcl3grau['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ANO_CONCL_3GRAU, $anoConcl3grau['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anoConcl3grau['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ANO_CONCL_3GRAU, $anoConcl3grau['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ANO_CONCL_3GRAU, $anoConcl3grau, $comparison);
    }

    /**
     * Filter the query on the id_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTrabalho(1234); // WHERE id_trabalho = 1234
     * $query->filterByIdTrabalho(array(12, 34)); // WHERE id_trabalho IN (12, 34)
     * $query->filterByIdTrabalho(array('min' => 12)); // WHERE id_trabalho > 12
     * </code>
     *
     * @param     mixed $idTrabalho The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdTrabalho($idTrabalho = null, $comparison = null)
    {
        if (is_array($idTrabalho)) {
            $useMinMax = false;
            if (isset($idTrabalho['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_TRABALHO, $idTrabalho['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTrabalho['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_TRABALHO, $idTrabalho['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_TRABALHO, $idTrabalho, $comparison);
    }

    /**
     * Filter the query on the cep_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByCepTrabalho('fooValue');   // WHERE cep_trabalho = 'fooValue'
     * $query->filterByCepTrabalho('%fooValue%'); // WHERE cep_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cepTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByCepTrabalho($cepTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cepTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cepTrabalho)) {
                $cepTrabalho = str_replace('*', '%', $cepTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CEP_TRABALHO, $cepTrabalho, $comparison);
    }

    /**
     * Filter the query on the fone_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByFoneTrabalho('fooValue');   // WHERE fone_trabalho = 'fooValue'
     * $query->filterByFoneTrabalho('%fooValue%'); // WHERE fone_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $foneTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByFoneTrabalho($foneTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($foneTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $foneTrabalho)) {
                $foneTrabalho = str_replace('*', '%', $foneTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::FONE_TRABALHO, $foneTrabalho, $comparison);
    }

    /**
     * Filter the query on the ramal_trabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByRamalTrabalho('fooValue');   // WHERE ramal_trabalho = 'fooValue'
     * $query->filterByRamalTrabalho('%fooValue%'); // WHERE ramal_trabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $ramalTrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByRamalTrabalho($ramalTrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($ramalTrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $ramalTrabalho)) {
                $ramalTrabalho = str_replace('*', '%', $ramalTrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::RAMAL_TRABALHO, $ramalTrabalho, $comparison);
    }

    /**
     * Filter the query on the media_geral column
     *
     * Example usage:
     * <code>
     * $query->filterByMediaGeral(1234); // WHERE media_geral = 1234
     * $query->filterByMediaGeral(array(12, 34)); // WHERE media_geral IN (12, 34)
     * $query->filterByMediaGeral(array('min' => 12)); // WHERE media_geral > 12
     * </code>
     *
     * @param     mixed $mediaGeral The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByMediaGeral($mediaGeral = null, $comparison = null)
    {
        if (is_array($mediaGeral)) {
            $useMinMax = false;
            if (isset($mediaGeral['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::MEDIA_GERAL, $mediaGeral['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mediaGeral['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::MEDIA_GERAL, $mediaGeral['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::MEDIA_GERAL, $mediaGeral, $comparison);
    }

    /**
     * Filter the query on the ch_eletiva_cursada column
     *
     * Example usage:
     * <code>
     * $query->filterByChEletivaCursada(1234); // WHERE ch_eletiva_cursada = 1234
     * $query->filterByChEletivaCursada(array(12, 34)); // WHERE ch_eletiva_cursada IN (12, 34)
     * $query->filterByChEletivaCursada(array('min' => 12)); // WHERE ch_eletiva_cursada > 12
     * </code>
     *
     * @param     mixed $chEletivaCursada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByChEletivaCursada($chEletivaCursada = null, $comparison = null)
    {
        if (is_array($chEletivaCursada)) {
            $useMinMax = false;
            if (isset($chEletivaCursada['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_ELETIVA_CURSADA, $chEletivaCursada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chEletivaCursada['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_ELETIVA_CURSADA, $chEletivaCursada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CH_ELETIVA_CURSADA, $chEletivaCursada, $comparison);
    }

    /**
     * Filter the query on the ch_eletiva_solicitada column
     *
     * Example usage:
     * <code>
     * $query->filterByChEletivaSolicitada(1234); // WHERE ch_eletiva_solicitada = 1234
     * $query->filterByChEletivaSolicitada(array(12, 34)); // WHERE ch_eletiva_solicitada IN (12, 34)
     * $query->filterByChEletivaSolicitada(array('min' => 12)); // WHERE ch_eletiva_solicitada > 12
     * </code>
     *
     * @param     mixed $chEletivaSolicitada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByChEletivaSolicitada($chEletivaSolicitada = null, $comparison = null)
    {
        if (is_array($chEletivaSolicitada)) {
            $useMinMax = false;
            if (isset($chEletivaSolicitada['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_ELETIVA_SOLICITADA, $chEletivaSolicitada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chEletivaSolicitada['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_ELETIVA_SOLICITADA, $chEletivaSolicitada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CH_ELETIVA_SOLICITADA, $chEletivaSolicitada, $comparison);
    }

    /**
     * Filter the query on the ch_obrig_cursada column
     *
     * Example usage:
     * <code>
     * $query->filterByChObrigCursada(1234); // WHERE ch_obrig_cursada = 1234
     * $query->filterByChObrigCursada(array(12, 34)); // WHERE ch_obrig_cursada IN (12, 34)
     * $query->filterByChObrigCursada(array('min' => 12)); // WHERE ch_obrig_cursada > 12
     * </code>
     *
     * @param     mixed $chObrigCursada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByChObrigCursada($chObrigCursada = null, $comparison = null)
    {
        if (is_array($chObrigCursada)) {
            $useMinMax = false;
            if (isset($chObrigCursada['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_OBRIG_CURSADA, $chObrigCursada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chObrigCursada['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_OBRIG_CURSADA, $chObrigCursada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CH_OBRIG_CURSADA, $chObrigCursada, $comparison);
    }

    /**
     * Filter the query on the ch_obrig_solicitada column
     *
     * Example usage:
     * <code>
     * $query->filterByChObrigSolicitada(1234); // WHERE ch_obrig_solicitada = 1234
     * $query->filterByChObrigSolicitada(array(12, 34)); // WHERE ch_obrig_solicitada IN (12, 34)
     * $query->filterByChObrigSolicitada(array('min' => 12)); // WHERE ch_obrig_solicitada > 12
     * </code>
     *
     * @param     mixed $chObrigSolicitada The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByChObrigSolicitada($chObrigSolicitada = null, $comparison = null)
    {
        if (is_array($chObrigSolicitada)) {
            $useMinMax = false;
            if (isset($chObrigSolicitada['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_OBRIG_SOLICITADA, $chObrigSolicitada['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($chObrigSolicitada['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::CH_OBRIG_SOLICITADA, $chObrigSolicitada['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CH_OBRIG_SOLICITADA, $chObrigSolicitada, $comparison);
    }

    /**
     * Filter the query on the ch_total column
     *
     * Example usage:
     * <code>
     * $query->filterByChTotal('fooValue');   // WHERE ch_total = 'fooValue'
     * $query->filterByChTotal('%fooValue%'); // WHERE ch_total LIKE '%fooValue%'
     * </code>
     *
     * @param     string $chTotal The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByChTotal($chTotal = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($chTotal)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $chTotal)) {
                $chTotal = str_replace('*', '%', $chTotal);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::CH_TOTAL, $chTotal, $comparison);
    }

    /**
     * Filter the query on the id_antigo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdAntigo(1234); // WHERE id_antigo = 1234
     * $query->filterByIdAntigo(array(12, 34)); // WHERE id_antigo IN (12, 34)
     * $query->filterByIdAntigo(array('min' => 12)); // WHERE id_antigo > 12
     * </code>
     *
     * @param     mixed $idAntigo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdAntigo($idAntigo = null, $comparison = null)
    {
        if (is_array($idAntigo)) {
            $useMinMax = false;
            if (isset($idAntigo['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_ANTIGO, $idAntigo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idAntigo['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_ANTIGO, $idAntigo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_ANTIGO, $idAntigo, $comparison);
    }

    /**
     * Filter the query on the inst2grau column
     *
     * Example usage:
     * <code>
     * $query->filterByInst2grau('fooValue');   // WHERE inst2grau = 'fooValue'
     * $query->filterByInst2grau('%fooValue%'); // WHERE inst2grau LIKE '%fooValue%'
     * </code>
     *
     * @param     string $inst2grau The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByInst2grau($inst2grau = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($inst2grau)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $inst2grau)) {
                $inst2grau = str_replace('*', '%', $inst2grau);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::INST2GRAU, $inst2grau, $comparison);
    }

    /**
     * Filter the query on the inst3grau column
     *
     * Example usage:
     * <code>
     * $query->filterByInst3grau('fooValue');   // WHERE inst3grau = 'fooValue'
     * $query->filterByInst3grau('%fooValue%'); // WHERE inst3grau LIKE '%fooValue%'
     * </code>
     *
     * @param     string $inst3grau The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByInst3grau($inst3grau = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($inst3grau)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $inst3grau)) {
                $inst3grau = str_replace('*', '%', $inst3grau);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::INST3GRAU, $inst3grau, $comparison);
    }

    /**
     * Filter the query on the insttrabalho column
     *
     * Example usage:
     * <code>
     * $query->filterByInsttrabalho('fooValue');   // WHERE insttrabalho = 'fooValue'
     * $query->filterByInsttrabalho('%fooValue%'); // WHERE insttrabalho LIKE '%fooValue%'
     * </code>
     *
     * @param     string $insttrabalho The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByInsttrabalho($insttrabalho = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($insttrabalho)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $insttrabalho)) {
                $insttrabalho = str_replace('*', '%', $insttrabalho);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::INSTTRABALHO, $insttrabalho, $comparison);
    }

    /**
     * Filter the query on the id_naturalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByIdNaturalidade(1234); // WHERE id_naturalidade = 1234
     * $query->filterByIdNaturalidade(array(12, 34)); // WHERE id_naturalidade IN (12, 34)
     * $query->filterByIdNaturalidade(array('min' => 12)); // WHERE id_naturalidade > 12
     * </code>
     *
     * @param     mixed $idNaturalidade The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdNaturalidade($idNaturalidade = null, $comparison = null)
    {
        if (is_array($idNaturalidade)) {
            $useMinMax = false;
            if (isset($idNaturalidade['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_NATURALIDADE, $idNaturalidade['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idNaturalidade['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_NATURALIDADE, $idNaturalidade['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_NATURALIDADE, $idNaturalidade, $comparison);
    }

    /**
     * Filter the query on the id_nacionalidade column
     *
     * Example usage:
     * <code>
     * $query->filterByIdNacionalidade(1234); // WHERE id_nacionalidade = 1234
     * $query->filterByIdNacionalidade(array(12, 34)); // WHERE id_nacionalidade IN (12, 34)
     * $query->filterByIdNacionalidade(array('min' => 12)); // WHERE id_nacionalidade > 12
     * </code>
     *
     * @param     mixed $idNacionalidade The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterByIdNacionalidade($idNacionalidade = null, $comparison = null)
    {
        if (is_array($idNacionalidade)) {
            $useMinMax = false;
            if (isset($idNacionalidade['min'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_NACIONALIDADE, $idNacionalidade['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idNacionalidade['max'])) {
                $this->addUsingAlias(TbalunoImportPeer::ID_NACIONALIDADE, $idNacionalidade['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID_NACIONALIDADE, $idNacionalidade, $comparison);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbalunoImportPeer::ID, $id, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   TbalunoImport $tbalunoImport Object to remove from the list of results
     *
     * @return TbalunoImportQuery The current query, for fluid interface
     */
    public function prune($tbalunoImport = null)
    {
        if ($tbalunoImport) {
            $this->addUsingAlias(TbalunoImportPeer::ID, $tbalunoImport->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
