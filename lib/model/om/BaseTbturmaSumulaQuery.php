<?php


/**
 * Base class that represents a query for the 'tbturma_sumula' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:40 2013
 *
 * @method TbturmaSumulaQuery orderByIdSumula($order = Criteria::ASC) Order by the id_sumula column
 * @method TbturmaSumulaQuery orderByIdTurma($order = Criteria::ASC) Order by the id_turma column
 * @method TbturmaSumulaQuery orderByData($order = Criteria::ASC) Order by the data column
 * @method TbturmaSumulaQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 * @method TbturmaSumulaQuery orderByMatriculaProf($order = Criteria::ASC) Order by the matricula_prof column
 *
 * @method TbturmaSumulaQuery groupByIdSumula() Group by the id_sumula column
 * @method TbturmaSumulaQuery groupByIdTurma() Group by the id_turma column
 * @method TbturmaSumulaQuery groupByData() Group by the data column
 * @method TbturmaSumulaQuery groupByDescricao() Group by the descricao column
 * @method TbturmaSumulaQuery groupByMatriculaProf() Group by the matricula_prof column
 *
 * @method TbturmaSumulaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbturmaSumulaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbturmaSumulaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbturmaSumulaQuery leftJoinTbturma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturma relation
 * @method TbturmaSumulaQuery rightJoinTbturma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturma relation
 * @method TbturmaSumulaQuery innerJoinTbturma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturma relation
 *
 * @method TbturmaSumula findOne(PropelPDO $con = null) Return the first TbturmaSumula matching the query
 * @method TbturmaSumula findOneOrCreate(PropelPDO $con = null) Return the first TbturmaSumula matching the query, or a new TbturmaSumula object populated from the query conditions when no match is found
 *
 * @method TbturmaSumula findOneByIdSumula(int $id_sumula) Return the first TbturmaSumula filtered by the id_sumula column
 * @method TbturmaSumula findOneByIdTurma(int $id_turma) Return the first TbturmaSumula filtered by the id_turma column
 * @method TbturmaSumula findOneByData(string $data) Return the first TbturmaSumula filtered by the data column
 * @method TbturmaSumula findOneByDescricao(string $descricao) Return the first TbturmaSumula filtered by the descricao column
 * @method TbturmaSumula findOneByMatriculaProf(int $matricula_prof) Return the first TbturmaSumula filtered by the matricula_prof column
 *
 * @method array findByIdSumula(int $id_sumula) Return TbturmaSumula objects filtered by the id_sumula column
 * @method array findByIdTurma(int $id_turma) Return TbturmaSumula objects filtered by the id_turma column
 * @method array findByData(string $data) Return TbturmaSumula objects filtered by the data column
 * @method array findByDescricao(string $descricao) Return TbturmaSumula objects filtered by the descricao column
 * @method array findByMatriculaProf(int $matricula_prof) Return TbturmaSumula objects filtered by the matricula_prof column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbturmaSumulaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbturmaSumulaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'TbturmaSumula', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbturmaSumulaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbturmaSumulaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbturmaSumulaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbturmaSumulaQuery) {
            return $criteria;
        }
        $query = new TbturmaSumulaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   TbturmaSumula|TbturmaSumula[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbturmaSumulaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbturmaSumulaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   TbturmaSumula A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_SUMULA, ID_TURMA, DATA, DESCRICAO, MATRICULA_PROF FROM tbturma_sumula WHERE ID_SUMULA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new TbturmaSumula();
            $obj->hydrate($row);
            TbturmaSumulaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return TbturmaSumula|TbturmaSumula[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|TbturmaSumula[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbturmaSumulaPeer::ID_SUMULA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbturmaSumulaPeer::ID_SUMULA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_sumula column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSumula(1234); // WHERE id_sumula = 1234
     * $query->filterByIdSumula(array(12, 34)); // WHERE id_sumula IN (12, 34)
     * $query->filterByIdSumula(array('min' => 12)); // WHERE id_sumula > 12
     * </code>
     *
     * @param     mixed $idSumula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByIdSumula($idSumula = null, $comparison = null)
    {
        if (is_array($idSumula) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbturmaSumulaPeer::ID_SUMULA, $idSumula, $comparison);
    }

    /**
     * Filter the query on the id_turma column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTurma(1234); // WHERE id_turma = 1234
     * $query->filterByIdTurma(array(12, 34)); // WHERE id_turma IN (12, 34)
     * $query->filterByIdTurma(array('min' => 12)); // WHERE id_turma > 12
     * </code>
     *
     * @see       filterByTbturma()
     *
     * @param     mixed $idTurma The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByIdTurma($idTurma = null, $comparison = null)
    {
        if (is_array($idTurma)) {
            $useMinMax = false;
            if (isset($idTurma['min'])) {
                $this->addUsingAlias(TbturmaSumulaPeer::ID_TURMA, $idTurma['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTurma['max'])) {
                $this->addUsingAlias(TbturmaSumulaPeer::ID_TURMA, $idTurma['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaSumulaPeer::ID_TURMA, $idTurma, $comparison);
    }

    /**
     * Filter the query on the data column
     *
     * Example usage:
     * <code>
     * $query->filterByData('2011-03-14'); // WHERE data = '2011-03-14'
     * $query->filterByData('now'); // WHERE data = '2011-03-14'
     * $query->filterByData(array('max' => 'yesterday')); // WHERE data > '2011-03-13'
     * </code>
     *
     * @param     mixed $data The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByData($data = null, $comparison = null)
    {
        if (is_array($data)) {
            $useMinMax = false;
            if (isset($data['min'])) {
                $this->addUsingAlias(TbturmaSumulaPeer::DATA, $data['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($data['max'])) {
                $this->addUsingAlias(TbturmaSumulaPeer::DATA, $data['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaSumulaPeer::DATA, $data, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaSumulaPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query on the matricula_prof column
     *
     * Example usage:
     * <code>
     * $query->filterByMatriculaProf(1234); // WHERE matricula_prof = 1234
     * $query->filterByMatriculaProf(array(12, 34)); // WHERE matricula_prof IN (12, 34)
     * $query->filterByMatriculaProf(array('min' => 12)); // WHERE matricula_prof > 12
     * </code>
     *
     * @param     mixed $matriculaProf The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function filterByMatriculaProf($matriculaProf = null, $comparison = null)
    {
        if (is_array($matriculaProf)) {
            $useMinMax = false;
            if (isset($matriculaProf['min'])) {
                $this->addUsingAlias(TbturmaSumulaPeer::MATRICULA_PROF, $matriculaProf['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matriculaProf['max'])) {
                $this->addUsingAlias(TbturmaSumulaPeer::MATRICULA_PROF, $matriculaProf['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaSumulaPeer::MATRICULA_PROF, $matriculaProf, $comparison);
    }

    /**
     * Filter the query by a related Tbturma object
     *
     * @param   Tbturma|PropelObjectCollection $tbturma The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaSumulaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturma($tbturma, $comparison = null)
    {
        if ($tbturma instanceof Tbturma) {
            return $this
                ->addUsingAlias(TbturmaSumulaPeer::ID_TURMA, $tbturma->getIdTurma(), $comparison);
        } elseif ($tbturma instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaSumulaPeer::ID_TURMA, $tbturma->toKeyValue('PrimaryKey', 'IdTurma'), $comparison);
        } else {
            throw new PropelException('filterByTbturma() only accepts arguments of type Tbturma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function joinTbturma($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturma');
        }

        return $this;
    }

    /**
     * Use the Tbturma relation Tbturma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturma', 'TbturmaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   TbturmaSumula $tbturmaSumula Object to remove from the list of results
     *
     * @return TbturmaSumulaQuery The current query, for fluid interface
     */
    public function prune($tbturmaSumula = null)
    {
        if ($tbturmaSumula) {
            $this->addUsingAlias(TbturmaSumulaPeer::ID_SUMULA, $tbturmaSumula->getIdSumula(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
