<?php


/**
 * Base class that represents a query for the 'tbhistorico' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbhistoricoQuery orderByIdHistorico($order = Criteria::ASC) Order by the id_historico column
 * @method TbhistoricoQuery orderByIdPeriodo($order = Criteria::ASC) Order by the id_periodo column
 * @method TbhistoricoQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbhistoricoQuery orderByCodDisciplina($order = Criteria::ASC) Order by the cod_disciplina column
 * @method TbhistoricoQuery orderByMedia($order = Criteria::ASC) Order by the media column
 * @method TbhistoricoQuery orderByFaltas($order = Criteria::ASC) Order by the faltas column
 * @method TbhistoricoQuery orderByIdConceito($order = Criteria::ASC) Order by the id_conceito column
 * @method TbhistoricoQuery orderByDuplicado($order = Criteria::ASC) Order by the duplicado column
 * @method TbhistoricoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbhistoricoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbhistoricoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbhistoricoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbhistoricoQuery groupByIdHistorico() Group by the id_historico column
 * @method TbhistoricoQuery groupByIdPeriodo() Group by the id_periodo column
 * @method TbhistoricoQuery groupByMatricula() Group by the matricula column
 * @method TbhistoricoQuery groupByCodDisciplina() Group by the cod_disciplina column
 * @method TbhistoricoQuery groupByMedia() Group by the media column
 * @method TbhistoricoQuery groupByFaltas() Group by the faltas column
 * @method TbhistoricoQuery groupByIdConceito() Group by the id_conceito column
 * @method TbhistoricoQuery groupByDuplicado() Group by the duplicado column
 * @method TbhistoricoQuery groupByCreatedAt() Group by the created_at column
 * @method TbhistoricoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbhistoricoQuery groupByCreatedBy() Group by the created_by column
 * @method TbhistoricoQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbhistoricoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbhistoricoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbhistoricoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbhistoricoQuery leftJoinTbperiodo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbperiodo relation
 * @method TbhistoricoQuery rightJoinTbperiodo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbperiodo relation
 * @method TbhistoricoQuery innerJoinTbperiodo($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbperiodo relation
 *
 * @method TbhistoricoQuery leftJoinTbaluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbaluno relation
 * @method TbhistoricoQuery rightJoinTbaluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbaluno relation
 * @method TbhistoricoQuery innerJoinTbaluno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbaluno relation
 *
 * @method TbhistoricoQuery leftJoinTbdisciplina($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbdisciplina relation
 * @method TbhistoricoQuery rightJoinTbdisciplina($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbdisciplina relation
 * @method TbhistoricoQuery innerJoinTbdisciplina($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbdisciplina relation
 *
 * @method TbhistoricoQuery leftJoinTbconceito($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbconceito relation
 * @method TbhistoricoQuery rightJoinTbconceito($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbconceito relation
 * @method TbhistoricoQuery innerJoinTbconceito($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbconceito relation
 *
 * @method Tbhistorico findOne(PropelPDO $con = null) Return the first Tbhistorico matching the query
 * @method Tbhistorico findOneOrCreate(PropelPDO $con = null) Return the first Tbhistorico matching the query, or a new Tbhistorico object populated from the query conditions when no match is found
 *
 * @method Tbhistorico findOneByIdHistorico(int $id_historico) Return the first Tbhistorico filtered by the id_historico column
 * @method Tbhistorico findOneByIdPeriodo(int $id_periodo) Return the first Tbhistorico filtered by the id_periodo column
 * @method Tbhistorico findOneByMatricula(string $matricula) Return the first Tbhistorico filtered by the matricula column
 * @method Tbhistorico findOneByCodDisciplina(string $cod_disciplina) Return the first Tbhistorico filtered by the cod_disciplina column
 * @method Tbhistorico findOneByMedia(string $media) Return the first Tbhistorico filtered by the media column
 * @method Tbhistorico findOneByFaltas(int $faltas) Return the first Tbhistorico filtered by the faltas column
 * @method Tbhistorico findOneByIdConceito(int $id_conceito) Return the first Tbhistorico filtered by the id_conceito column
 * @method Tbhistorico findOneByDuplicado(boolean $duplicado) Return the first Tbhistorico filtered by the duplicado column
 * @method Tbhistorico findOneByCreatedAt(string $created_at) Return the first Tbhistorico filtered by the created_at column
 * @method Tbhistorico findOneByUpdatedAt(string $updated_at) Return the first Tbhistorico filtered by the updated_at column
 * @method Tbhistorico findOneByCreatedBy(string $created_by) Return the first Tbhistorico filtered by the created_by column
 * @method Tbhistorico findOneByUpdatedBy(string $updated_by) Return the first Tbhistorico filtered by the updated_by column
 *
 * @method array findByIdHistorico(int $id_historico) Return Tbhistorico objects filtered by the id_historico column
 * @method array findByIdPeriodo(int $id_periodo) Return Tbhistorico objects filtered by the id_periodo column
 * @method array findByMatricula(string $matricula) Return Tbhistorico objects filtered by the matricula column
 * @method array findByCodDisciplina(string $cod_disciplina) Return Tbhistorico objects filtered by the cod_disciplina column
 * @method array findByMedia(string $media) Return Tbhistorico objects filtered by the media column
 * @method array findByFaltas(int $faltas) Return Tbhistorico objects filtered by the faltas column
 * @method array findByIdConceito(int $id_conceito) Return Tbhistorico objects filtered by the id_conceito column
 * @method array findByDuplicado(boolean $duplicado) Return Tbhistorico objects filtered by the duplicado column
 * @method array findByCreatedAt(string $created_at) Return Tbhistorico objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbhistorico objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbhistorico objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbhistorico objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbhistoricoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbhistoricoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbhistorico', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbhistoricoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbhistoricoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbhistoricoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbhistoricoQuery) {
            return $criteria;
        }
        $query = new TbhistoricoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbhistorico|Tbhistorico[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbhistoricoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbhistoricoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbhistorico A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_HISTORICO, ID_PERIODO, MATRICULA, COD_DISCIPLINA, MEDIA, FALTAS, ID_CONCEITO, DUPLICADO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbhistorico WHERE ID_HISTORICO = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbhistorico();
            $obj->hydrate($row);
            TbhistoricoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbhistorico|Tbhistorico[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbhistorico[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbhistoricoPeer::ID_HISTORICO, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbhistoricoPeer::ID_HISTORICO, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_historico column
     *
     * Example usage:
     * <code>
     * $query->filterByIdHistorico(1234); // WHERE id_historico = 1234
     * $query->filterByIdHistorico(array(12, 34)); // WHERE id_historico IN (12, 34)
     * $query->filterByIdHistorico(array('min' => 12)); // WHERE id_historico > 12
     * </code>
     *
     * @param     mixed $idHistorico The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByIdHistorico($idHistorico = null, $comparison = null)
    {
        if (is_array($idHistorico) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbhistoricoPeer::ID_HISTORICO, $idHistorico, $comparison);
    }

    /**
     * Filter the query on the id_periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPeriodo(1234); // WHERE id_periodo = 1234
     * $query->filterByIdPeriodo(array(12, 34)); // WHERE id_periodo IN (12, 34)
     * $query->filterByIdPeriodo(array('min' => 12)); // WHERE id_periodo > 12
     * </code>
     *
     * @see       filterByTbperiodo()
     *
     * @param     mixed $idPeriodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByIdPeriodo($idPeriodo = null, $comparison = null)
    {
        if (is_array($idPeriodo)) {
            $useMinMax = false;
            if (isset($idPeriodo['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::ID_PERIODO, $idPeriodo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPeriodo['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::ID_PERIODO, $idPeriodo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::ID_PERIODO, $idPeriodo, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @see       filterByTbaluno()
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the cod_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterByCodDisciplina('fooValue');   // WHERE cod_disciplina = 'fooValue'
     * $query->filterByCodDisciplina('%fooValue%'); // WHERE cod_disciplina LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codDisciplina The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByCodDisciplina($codDisciplina = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codDisciplina)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codDisciplina)) {
                $codDisciplina = str_replace('*', '%', $codDisciplina);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::COD_DISCIPLINA, $codDisciplina, $comparison);
    }

    /**
     * Filter the query on the media column
     *
     * Example usage:
     * <code>
     * $query->filterByMedia(1234); // WHERE media = 1234
     * $query->filterByMedia(array(12, 34)); // WHERE media IN (12, 34)
     * $query->filterByMedia(array('min' => 12)); // WHERE media > 12
     * </code>
     *
     * @param     mixed $media The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByMedia($media = null, $comparison = null)
    {
        if (is_array($media)) {
            $useMinMax = false;
            if (isset($media['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::MEDIA, $media['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($media['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::MEDIA, $media['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::MEDIA, $media, $comparison);
    }

    /**
     * Filter the query on the faltas column
     *
     * Example usage:
     * <code>
     * $query->filterByFaltas(1234); // WHERE faltas = 1234
     * $query->filterByFaltas(array(12, 34)); // WHERE faltas IN (12, 34)
     * $query->filterByFaltas(array('min' => 12)); // WHERE faltas > 12
     * </code>
     *
     * @param     mixed $faltas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByFaltas($faltas = null, $comparison = null)
    {
        if (is_array($faltas)) {
            $useMinMax = false;
            if (isset($faltas['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::FALTAS, $faltas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($faltas['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::FALTAS, $faltas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::FALTAS, $faltas, $comparison);
    }

    /**
     * Filter the query on the id_conceito column
     *
     * Example usage:
     * <code>
     * $query->filterByIdConceito(1234); // WHERE id_conceito = 1234
     * $query->filterByIdConceito(array(12, 34)); // WHERE id_conceito IN (12, 34)
     * $query->filterByIdConceito(array('min' => 12)); // WHERE id_conceito > 12
     * </code>
     *
     * @see       filterByTbconceito()
     *
     * @param     mixed $idConceito The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByIdConceito($idConceito = null, $comparison = null)
    {
        if (is_array($idConceito)) {
            $useMinMax = false;
            if (isset($idConceito['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::ID_CONCEITO, $idConceito['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idConceito['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::ID_CONCEITO, $idConceito['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::ID_CONCEITO, $idConceito, $comparison);
    }

    /**
     * Filter the query on the duplicado column
     *
     * Example usage:
     * <code>
     * $query->filterByDuplicado(true); // WHERE duplicado = true
     * $query->filterByDuplicado('yes'); // WHERE duplicado = true
     * </code>
     *
     * @param     boolean|string $duplicado The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByDuplicado($duplicado = null, $comparison = null)
    {
        if (is_string($duplicado)) {
            $duplicado = in_array(strtolower($duplicado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(TbhistoricoPeer::DUPLICADO, $duplicado, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbhistoricoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbhistoricoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbhistoricoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbperiodo object
     *
     * @param   Tbperiodo|PropelObjectCollection $tbperiodo The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbhistoricoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbperiodo($tbperiodo, $comparison = null)
    {
        if ($tbperiodo instanceof Tbperiodo) {
            return $this
                ->addUsingAlias(TbhistoricoPeer::ID_PERIODO, $tbperiodo->getIdPeriodo(), $comparison);
        } elseif ($tbperiodo instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbhistoricoPeer::ID_PERIODO, $tbperiodo->toKeyValue('PrimaryKey', 'IdPeriodo'), $comparison);
        } else {
            throw new PropelException('filterByTbperiodo() only accepts arguments of type Tbperiodo or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbperiodo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function joinTbperiodo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbperiodo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbperiodo');
        }

        return $this;
    }

    /**
     * Use the Tbperiodo relation Tbperiodo object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbperiodoQuery A secondary query class using the current class as primary query
     */
    public function useTbperiodoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbperiodo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbperiodo', 'TbperiodoQuery');
    }

    /**
     * Filter the query by a related Tbaluno object
     *
     * @param   Tbaluno|PropelObjectCollection $tbaluno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbhistoricoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbaluno($tbaluno, $comparison = null)
    {
        if ($tbaluno instanceof Tbaluno) {
            return $this
                ->addUsingAlias(TbhistoricoPeer::MATRICULA, $tbaluno->getMatricula(), $comparison);
        } elseif ($tbaluno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbhistoricoPeer::MATRICULA, $tbaluno->toKeyValue('PrimaryKey', 'Matricula'), $comparison);
        } else {
            throw new PropelException('filterByTbaluno() only accepts arguments of type Tbaluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbaluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function joinTbaluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbaluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbaluno');
        }

        return $this;
    }

    /**
     * Use the Tbaluno relation Tbaluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunoQuery A secondary query class using the current class as primary query
     */
    public function useTbalunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbaluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbaluno', 'TbalunoQuery');
    }

    /**
     * Filter the query by a related Tbdisciplina object
     *
     * @param   Tbdisciplina|PropelObjectCollection $tbdisciplina The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbhistoricoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplina($tbdisciplina, $comparison = null)
    {
        if ($tbdisciplina instanceof Tbdisciplina) {
            return $this
                ->addUsingAlias(TbhistoricoPeer::COD_DISCIPLINA, $tbdisciplina->getCodDisciplina(), $comparison);
        } elseif ($tbdisciplina instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbhistoricoPeer::COD_DISCIPLINA, $tbdisciplina->toKeyValue('PrimaryKey', 'CodDisciplina'), $comparison);
        } else {
            throw new PropelException('filterByTbdisciplina() only accepts arguments of type Tbdisciplina or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbdisciplina relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function joinTbdisciplina($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbdisciplina');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbdisciplina');
        }

        return $this;
    }

    /**
     * Use the Tbdisciplina relation Tbdisciplina object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinaQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplina($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbdisciplina', 'TbdisciplinaQuery');
    }

    /**
     * Filter the query by a related Tbconceito object
     *
     * @param   Tbconceito|PropelObjectCollection $tbconceito The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbhistoricoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbconceito($tbconceito, $comparison = null)
    {
        if ($tbconceito instanceof Tbconceito) {
            return $this
                ->addUsingAlias(TbhistoricoPeer::ID_CONCEITO, $tbconceito->getIdConceito(), $comparison);
        } elseif ($tbconceito instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbhistoricoPeer::ID_CONCEITO, $tbconceito->toKeyValue('PrimaryKey', 'IdConceito'), $comparison);
        } else {
            throw new PropelException('filterByTbconceito() only accepts arguments of type Tbconceito or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbconceito relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function joinTbconceito($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbconceito');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbconceito');
        }

        return $this;
    }

    /**
     * Use the Tbconceito relation Tbconceito object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbconceitoQuery A secondary query class using the current class as primary query
     */
    public function useTbconceitoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbconceito($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbconceito', 'TbconceitoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbhistorico $tbhistorico Object to remove from the list of results
     *
     * @return TbhistoricoQuery The current query, for fluid interface
     */
    public function prune($tbhistorico = null)
    {
        if ($tbhistorico) {
            $this->addUsingAlias(TbhistoricoPeer::ID_HISTORICO, $tbhistorico->getIdHistorico(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
