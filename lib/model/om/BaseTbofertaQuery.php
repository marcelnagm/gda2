<?php


/**
 * Base class that represents a query for the 'tboferta' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbofertaQuery orderByIdOferta($order = Criteria::ASC) Order by the id_oferta column
 * @method TbofertaQuery orderByIdPeriodo($order = Criteria::ASC) Order by the id_periodo column
 * @method TbofertaQuery orderByIdTurno($order = Criteria::ASC) Order by the id_turno column
 * @method TbofertaQuery orderByCodCurso($order = Criteria::ASC) Order by the cod_curso column
 * @method TbofertaQuery orderByCodCursoDestino($order = Criteria::ASC) Order by the cod_curso_destino column
 * @method TbofertaQuery orderByCodDisciplina($order = Criteria::ASC) Order by the cod_disciplina column
 * @method TbofertaQuery orderByTurma($order = Criteria::ASC) Order by the turma column
 * @method TbofertaQuery orderByIdSala($order = Criteria::ASC) Order by the id_sala column
 * @method TbofertaQuery orderByVagas($order = Criteria::ASC) Order by the vagas column
 * @method TbofertaQuery orderByMatriculados($order = Criteria::ASC) Order by the matriculados column
 * @method TbofertaQuery orderByExcesso($order = Criteria::ASC) Order by the excesso column
 * @method TbofertaQuery orderByCancelados($order = Criteria::ASC) Order by the cancelados column
 * @method TbofertaQuery orderByTrancados($order = Criteria::ASC) Order by the trancados column
 * @method TbofertaQuery orderByIdMatriculaProf($order = Criteria::ASC) Order by the id_matricula_prof column
 * @method TbofertaQuery orderByIdMatriculaProf2($order = Criteria::ASC) Order by the id_matricula_prof2 column
 * @method TbofertaQuery orderByIdSetor($order = Criteria::ASC) Order by the id_setor column
 * @method TbofertaQuery orderByDtInicio($order = Criteria::ASC) Order by the dt_inicio column
 * @method TbofertaQuery orderByDtFim($order = Criteria::ASC) Order by the dt_fim column
 * @method TbofertaQuery orderByIdSituacao($order = Criteria::ASC) Order by the id_situacao column
 * @method TbofertaQuery orderByIdPolo($order = Criteria::ASC) Order by the id_polo column
 * @method TbofertaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbofertaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbofertaQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbofertaQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbofertaQuery groupByIdOferta() Group by the id_oferta column
 * @method TbofertaQuery groupByIdPeriodo() Group by the id_periodo column
 * @method TbofertaQuery groupByIdTurno() Group by the id_turno column
 * @method TbofertaQuery groupByCodCurso() Group by the cod_curso column
 * @method TbofertaQuery groupByCodCursoDestino() Group by the cod_curso_destino column
 * @method TbofertaQuery groupByCodDisciplina() Group by the cod_disciplina column
 * @method TbofertaQuery groupByTurma() Group by the turma column
 * @method TbofertaQuery groupByIdSala() Group by the id_sala column
 * @method TbofertaQuery groupByVagas() Group by the vagas column
 * @method TbofertaQuery groupByMatriculados() Group by the matriculados column
 * @method TbofertaQuery groupByExcesso() Group by the excesso column
 * @method TbofertaQuery groupByCancelados() Group by the cancelados column
 * @method TbofertaQuery groupByTrancados() Group by the trancados column
 * @method TbofertaQuery groupByIdMatriculaProf() Group by the id_matricula_prof column
 * @method TbofertaQuery groupByIdMatriculaProf2() Group by the id_matricula_prof2 column
 * @method TbofertaQuery groupByIdSetor() Group by the id_setor column
 * @method TbofertaQuery groupByDtInicio() Group by the dt_inicio column
 * @method TbofertaQuery groupByDtFim() Group by the dt_fim column
 * @method TbofertaQuery groupByIdSituacao() Group by the id_situacao column
 * @method TbofertaQuery groupByIdPolo() Group by the id_polo column
 * @method TbofertaQuery groupByCreatedAt() Group by the created_at column
 * @method TbofertaQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbofertaQuery groupByCreatedBy() Group by the created_by column
 * @method TbofertaQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbofertaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbofertaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbofertaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbofertaQuery leftJoinTbperiodo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbperiodo relation
 * @method TbofertaQuery rightJoinTbperiodo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbperiodo relation
 * @method TbofertaQuery innerJoinTbperiodo($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbperiodo relation
 *
 * @method TbofertaQuery leftJoinTbturno($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturno relation
 * @method TbofertaQuery rightJoinTbturno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturno relation
 * @method TbofertaQuery innerJoinTbturno($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturno relation
 *
 * @method TbofertaQuery leftJoinTbcursoRelatedByCodCurso($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbcursoRelatedByCodCurso relation
 * @method TbofertaQuery rightJoinTbcursoRelatedByCodCurso($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbcursoRelatedByCodCurso relation
 * @method TbofertaQuery innerJoinTbcursoRelatedByCodCurso($relationAlias = null) Adds a INNER JOIN clause to the query using the TbcursoRelatedByCodCurso relation
 *
 * @method TbofertaQuery leftJoinTbcursoRelatedByCodCursoDestino($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbcursoRelatedByCodCursoDestino relation
 * @method TbofertaQuery rightJoinTbcursoRelatedByCodCursoDestino($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbcursoRelatedByCodCursoDestino relation
 * @method TbofertaQuery innerJoinTbcursoRelatedByCodCursoDestino($relationAlias = null) Adds a INNER JOIN clause to the query using the TbcursoRelatedByCodCursoDestino relation
 *
 * @method TbofertaQuery leftJoinTbdisciplina($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbdisciplina relation
 * @method TbofertaQuery rightJoinTbdisciplina($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbdisciplina relation
 * @method TbofertaQuery innerJoinTbdisciplina($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbdisciplina relation
 *
 * @method TbofertaQuery leftJoinTbsala($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbsala relation
 * @method TbofertaQuery rightJoinTbsala($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbsala relation
 * @method TbofertaQuery innerJoinTbsala($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbsala relation
 *
 * @method TbofertaQuery leftJoinTbprofessorRelatedByIdMatriculaProf($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf relation
 * @method TbofertaQuery rightJoinTbprofessorRelatedByIdMatriculaProf($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf relation
 * @method TbofertaQuery innerJoinTbprofessorRelatedByIdMatriculaProf($relationAlias = null) Adds a INNER JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf relation
 *
 * @method TbofertaQuery leftJoinTbprofessorRelatedByIdMatriculaProf2($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf2 relation
 * @method TbofertaQuery rightJoinTbprofessorRelatedByIdMatriculaProf2($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf2 relation
 * @method TbofertaQuery innerJoinTbprofessorRelatedByIdMatriculaProf2($relationAlias = null) Adds a INNER JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf2 relation
 *
 * @method TbofertaQuery leftJoinTbsetor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbsetor relation
 * @method TbofertaQuery rightJoinTbsetor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbsetor relation
 * @method TbofertaQuery innerJoinTbsetor($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbsetor relation
 *
 * @method TbofertaQuery leftJoinTbofertasituacao($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbofertasituacao relation
 * @method TbofertaQuery rightJoinTbofertasituacao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbofertasituacao relation
 * @method TbofertaQuery innerJoinTbofertasituacao($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbofertasituacao relation
 *
 * @method TbofertaQuery leftJoinTbpolos($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbpolos relation
 * @method TbofertaQuery rightJoinTbpolos($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbpolos relation
 * @method TbofertaQuery innerJoinTbpolos($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbpolos relation
 *
 * @method TbofertaQuery leftJoinTbfilacalouros($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbfilacalouros relation
 * @method TbofertaQuery rightJoinTbfilacalouros($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbfilacalouros relation
 * @method TbofertaQuery innerJoinTbfilacalouros($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbfilacalouros relation
 *
 * @method TbofertaQuery leftJoinTbfila($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbfila relation
 * @method TbofertaQuery rightJoinTbfila($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbfila relation
 * @method TbofertaQuery innerJoinTbfila($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbfila relation
 *
 * @method TbofertaQuery leftJoinTbofertacoordenador($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbofertacoordenador relation
 * @method TbofertaQuery rightJoinTbofertacoordenador($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbofertacoordenador relation
 * @method TbofertaQuery innerJoinTbofertacoordenador($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbofertacoordenador relation
 *
 * @method TbofertaQuery leftJoinTbofertahorario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbofertahorario relation
 * @method TbofertaQuery rightJoinTbofertahorario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbofertahorario relation
 * @method TbofertaQuery innerJoinTbofertahorario($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbofertahorario relation
 *
 * @method TbofertaQuery leftJoinTbturma($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbturma relation
 * @method TbofertaQuery rightJoinTbturma($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbturma relation
 * @method TbofertaQuery innerJoinTbturma($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbturma relation
 *
 * @method Tboferta findOne(PropelPDO $con = null) Return the first Tboferta matching the query
 * @method Tboferta findOneOrCreate(PropelPDO $con = null) Return the first Tboferta matching the query, or a new Tboferta object populated from the query conditions when no match is found
 *
 * @method Tboferta findOneByIdOferta(int $id_oferta) Return the first Tboferta filtered by the id_oferta column
 * @method Tboferta findOneByIdPeriodo(int $id_periodo) Return the first Tboferta filtered by the id_periodo column
 * @method Tboferta findOneByIdTurno(int $id_turno) Return the first Tboferta filtered by the id_turno column
 * @method Tboferta findOneByCodCurso(int $cod_curso) Return the first Tboferta filtered by the cod_curso column
 * @method Tboferta findOneByCodCursoDestino(int $cod_curso_destino) Return the first Tboferta filtered by the cod_curso_destino column
 * @method Tboferta findOneByCodDisciplina(string $cod_disciplina) Return the first Tboferta filtered by the cod_disciplina column
 * @method Tboferta findOneByTurma(string $turma) Return the first Tboferta filtered by the turma column
 * @method Tboferta findOneByIdSala(int $id_sala) Return the first Tboferta filtered by the id_sala column
 * @method Tboferta findOneByVagas(int $vagas) Return the first Tboferta filtered by the vagas column
 * @method Tboferta findOneByMatriculados(int $matriculados) Return the first Tboferta filtered by the matriculados column
 * @method Tboferta findOneByExcesso(int $excesso) Return the first Tboferta filtered by the excesso column
 * @method Tboferta findOneByCancelados(int $cancelados) Return the first Tboferta filtered by the cancelados column
 * @method Tboferta findOneByTrancados(int $trancados) Return the first Tboferta filtered by the trancados column
 * @method Tboferta findOneByIdMatriculaProf(int $id_matricula_prof) Return the first Tboferta filtered by the id_matricula_prof column
 * @method Tboferta findOneByIdMatriculaProf2(int $id_matricula_prof2) Return the first Tboferta filtered by the id_matricula_prof2 column
 * @method Tboferta findOneByIdSetor(int $id_setor) Return the first Tboferta filtered by the id_setor column
 * @method Tboferta findOneByDtInicio(string $dt_inicio) Return the first Tboferta filtered by the dt_inicio column
 * @method Tboferta findOneByDtFim(string $dt_fim) Return the first Tboferta filtered by the dt_fim column
 * @method Tboferta findOneByIdSituacao(int $id_situacao) Return the first Tboferta filtered by the id_situacao column
 * @method Tboferta findOneByIdPolo(int $id_polo) Return the first Tboferta filtered by the id_polo column
 * @method Tboferta findOneByCreatedAt(string $created_at) Return the first Tboferta filtered by the created_at column
 * @method Tboferta findOneByUpdatedAt(string $updated_at) Return the first Tboferta filtered by the updated_at column
 * @method Tboferta findOneByCreatedBy(string $created_by) Return the first Tboferta filtered by the created_by column
 * @method Tboferta findOneByUpdatedBy(string $updated_by) Return the first Tboferta filtered by the updated_by column
 *
 * @method array findByIdOferta(int $id_oferta) Return Tboferta objects filtered by the id_oferta column
 * @method array findByIdPeriodo(int $id_periodo) Return Tboferta objects filtered by the id_periodo column
 * @method array findByIdTurno(int $id_turno) Return Tboferta objects filtered by the id_turno column
 * @method array findByCodCurso(int $cod_curso) Return Tboferta objects filtered by the cod_curso column
 * @method array findByCodCursoDestino(int $cod_curso_destino) Return Tboferta objects filtered by the cod_curso_destino column
 * @method array findByCodDisciplina(string $cod_disciplina) Return Tboferta objects filtered by the cod_disciplina column
 * @method array findByTurma(string $turma) Return Tboferta objects filtered by the turma column
 * @method array findByIdSala(int $id_sala) Return Tboferta objects filtered by the id_sala column
 * @method array findByVagas(int $vagas) Return Tboferta objects filtered by the vagas column
 * @method array findByMatriculados(int $matriculados) Return Tboferta objects filtered by the matriculados column
 * @method array findByExcesso(int $excesso) Return Tboferta objects filtered by the excesso column
 * @method array findByCancelados(int $cancelados) Return Tboferta objects filtered by the cancelados column
 * @method array findByTrancados(int $trancados) Return Tboferta objects filtered by the trancados column
 * @method array findByIdMatriculaProf(int $id_matricula_prof) Return Tboferta objects filtered by the id_matricula_prof column
 * @method array findByIdMatriculaProf2(int $id_matricula_prof2) Return Tboferta objects filtered by the id_matricula_prof2 column
 * @method array findByIdSetor(int $id_setor) Return Tboferta objects filtered by the id_setor column
 * @method array findByDtInicio(string $dt_inicio) Return Tboferta objects filtered by the dt_inicio column
 * @method array findByDtFim(string $dt_fim) Return Tboferta objects filtered by the dt_fim column
 * @method array findByIdSituacao(int $id_situacao) Return Tboferta objects filtered by the id_situacao column
 * @method array findByIdPolo(int $id_polo) Return Tboferta objects filtered by the id_polo column
 * @method array findByCreatedAt(string $created_at) Return Tboferta objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tboferta objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tboferta objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tboferta objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbofertaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbofertaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tboferta', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbofertaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbofertaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbofertaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbofertaQuery) {
            return $criteria;
        }
        $query = new TbofertaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tboferta|Tboferta[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbofertaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tboferta A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_OFERTA, ID_PERIODO, ID_TURNO, COD_CURSO, COD_CURSO_DESTINO, COD_DISCIPLINA, TURMA, ID_SALA, VAGAS, MATRICULADOS, EXCESSO, CANCELADOS, TRANCADOS, ID_MATRICULA_PROF, ID_MATRICULA_PROF2, ID_SETOR, DT_INICIO, DT_FIM, ID_SITUACAO, ID_POLO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tboferta WHERE ID_OFERTA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tboferta();
            $obj->hydrate($row);
            TbofertaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tboferta|Tboferta[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tboferta[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbofertaPeer::ID_OFERTA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbofertaPeer::ID_OFERTA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_oferta column
     *
     * Example usage:
     * <code>
     * $query->filterByIdOferta(1234); // WHERE id_oferta = 1234
     * $query->filterByIdOferta(array(12, 34)); // WHERE id_oferta IN (12, 34)
     * $query->filterByIdOferta(array('min' => 12)); // WHERE id_oferta > 12
     * </code>
     *
     * @param     mixed $idOferta The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdOferta($idOferta = null, $comparison = null)
    {
        if (is_array($idOferta) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbofertaPeer::ID_OFERTA, $idOferta, $comparison);
    }

    /**
     * Filter the query on the id_periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPeriodo(1234); // WHERE id_periodo = 1234
     * $query->filterByIdPeriodo(array(12, 34)); // WHERE id_periodo IN (12, 34)
     * $query->filterByIdPeriodo(array('min' => 12)); // WHERE id_periodo > 12
     * </code>
     *
     * @see       filterByTbperiodo()
     *
     * @param     mixed $idPeriodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdPeriodo($idPeriodo = null, $comparison = null)
    {
        if (is_array($idPeriodo)) {
            $useMinMax = false;
            if (isset($idPeriodo['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_PERIODO, $idPeriodo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPeriodo['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_PERIODO, $idPeriodo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_PERIODO, $idPeriodo, $comparison);
    }

    /**
     * Filter the query on the id_turno column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTurno(1234); // WHERE id_turno = 1234
     * $query->filterByIdTurno(array(12, 34)); // WHERE id_turno IN (12, 34)
     * $query->filterByIdTurno(array('min' => 12)); // WHERE id_turno > 12
     * </code>
     *
     * @see       filterByTbturno()
     *
     * @param     mixed $idTurno The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdTurno($idTurno = null, $comparison = null)
    {
        if (is_array($idTurno)) {
            $useMinMax = false;
            if (isset($idTurno['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_TURNO, $idTurno['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTurno['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_TURNO, $idTurno['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_TURNO, $idTurno, $comparison);
    }

    /**
     * Filter the query on the cod_curso column
     *
     * Example usage:
     * <code>
     * $query->filterByCodCurso(1234); // WHERE cod_curso = 1234
     * $query->filterByCodCurso(array(12, 34)); // WHERE cod_curso IN (12, 34)
     * $query->filterByCodCurso(array('min' => 12)); // WHERE cod_curso > 12
     * </code>
     *
     * @see       filterByTbcursoRelatedByCodCurso()
     *
     * @param     mixed $codCurso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByCodCurso($codCurso = null, $comparison = null)
    {
        if (is_array($codCurso)) {
            $useMinMax = false;
            if (isset($codCurso['min'])) {
                $this->addUsingAlias(TbofertaPeer::COD_CURSO, $codCurso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($codCurso['max'])) {
                $this->addUsingAlias(TbofertaPeer::COD_CURSO, $codCurso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::COD_CURSO, $codCurso, $comparison);
    }

    /**
     * Filter the query on the cod_curso_destino column
     *
     * Example usage:
     * <code>
     * $query->filterByCodCursoDestino(1234); // WHERE cod_curso_destino = 1234
     * $query->filterByCodCursoDestino(array(12, 34)); // WHERE cod_curso_destino IN (12, 34)
     * $query->filterByCodCursoDestino(array('min' => 12)); // WHERE cod_curso_destino > 12
     * </code>
     *
     * @see       filterByTbcursoRelatedByCodCursoDestino()
     *
     * @param     mixed $codCursoDestino The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByCodCursoDestino($codCursoDestino = null, $comparison = null)
    {
        if (is_array($codCursoDestino)) {
            $useMinMax = false;
            if (isset($codCursoDestino['min'])) {
                $this->addUsingAlias(TbofertaPeer::COD_CURSO_DESTINO, $codCursoDestino['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($codCursoDestino['max'])) {
                $this->addUsingAlias(TbofertaPeer::COD_CURSO_DESTINO, $codCursoDestino['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::COD_CURSO_DESTINO, $codCursoDestino, $comparison);
    }

    /**
     * Filter the query on the cod_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterByCodDisciplina('fooValue');   // WHERE cod_disciplina = 'fooValue'
     * $query->filterByCodDisciplina('%fooValue%'); // WHERE cod_disciplina LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codDisciplina The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByCodDisciplina($codDisciplina = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codDisciplina)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codDisciplina)) {
                $codDisciplina = str_replace('*', '%', $codDisciplina);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::COD_DISCIPLINA, $codDisciplina, $comparison);
    }

    /**
     * Filter the query on the turma column
     *
     * Example usage:
     * <code>
     * $query->filterByTurma('fooValue');   // WHERE turma = 'fooValue'
     * $query->filterByTurma('%fooValue%'); // WHERE turma LIKE '%fooValue%'
     * </code>
     *
     * @param     string $turma The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByTurma($turma = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($turma)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $turma)) {
                $turma = str_replace('*', '%', $turma);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::TURMA, $turma, $comparison);
    }

    /**
     * Filter the query on the id_sala column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSala(1234); // WHERE id_sala = 1234
     * $query->filterByIdSala(array(12, 34)); // WHERE id_sala IN (12, 34)
     * $query->filterByIdSala(array('min' => 12)); // WHERE id_sala > 12
     * </code>
     *
     * @see       filterByTbsala()
     *
     * @param     mixed $idSala The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdSala($idSala = null, $comparison = null)
    {
        if (is_array($idSala)) {
            $useMinMax = false;
            if (isset($idSala['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_SALA, $idSala['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSala['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_SALA, $idSala['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_SALA, $idSala, $comparison);
    }

    /**
     * Filter the query on the vagas column
     *
     * Example usage:
     * <code>
     * $query->filterByVagas(1234); // WHERE vagas = 1234
     * $query->filterByVagas(array(12, 34)); // WHERE vagas IN (12, 34)
     * $query->filterByVagas(array('min' => 12)); // WHERE vagas > 12
     * </code>
     *
     * @param     mixed $vagas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByVagas($vagas = null, $comparison = null)
    {
        if (is_array($vagas)) {
            $useMinMax = false;
            if (isset($vagas['min'])) {
                $this->addUsingAlias(TbofertaPeer::VAGAS, $vagas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vagas['max'])) {
                $this->addUsingAlias(TbofertaPeer::VAGAS, $vagas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::VAGAS, $vagas, $comparison);
    }

    /**
     * Filter the query on the matriculados column
     *
     * Example usage:
     * <code>
     * $query->filterByMatriculados(1234); // WHERE matriculados = 1234
     * $query->filterByMatriculados(array(12, 34)); // WHERE matriculados IN (12, 34)
     * $query->filterByMatriculados(array('min' => 12)); // WHERE matriculados > 12
     * </code>
     *
     * @param     mixed $matriculados The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByMatriculados($matriculados = null, $comparison = null)
    {
        if (is_array($matriculados)) {
            $useMinMax = false;
            if (isset($matriculados['min'])) {
                $this->addUsingAlias(TbofertaPeer::MATRICULADOS, $matriculados['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matriculados['max'])) {
                $this->addUsingAlias(TbofertaPeer::MATRICULADOS, $matriculados['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::MATRICULADOS, $matriculados, $comparison);
    }

    /**
     * Filter the query on the excesso column
     *
     * Example usage:
     * <code>
     * $query->filterByExcesso(1234); // WHERE excesso = 1234
     * $query->filterByExcesso(array(12, 34)); // WHERE excesso IN (12, 34)
     * $query->filterByExcesso(array('min' => 12)); // WHERE excesso > 12
     * </code>
     *
     * @param     mixed $excesso The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByExcesso($excesso = null, $comparison = null)
    {
        if (is_array($excesso)) {
            $useMinMax = false;
            if (isset($excesso['min'])) {
                $this->addUsingAlias(TbofertaPeer::EXCESSO, $excesso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($excesso['max'])) {
                $this->addUsingAlias(TbofertaPeer::EXCESSO, $excesso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::EXCESSO, $excesso, $comparison);
    }

    /**
     * Filter the query on the cancelados column
     *
     * Example usage:
     * <code>
     * $query->filterByCancelados(1234); // WHERE cancelados = 1234
     * $query->filterByCancelados(array(12, 34)); // WHERE cancelados IN (12, 34)
     * $query->filterByCancelados(array('min' => 12)); // WHERE cancelados > 12
     * </code>
     *
     * @param     mixed $cancelados The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByCancelados($cancelados = null, $comparison = null)
    {
        if (is_array($cancelados)) {
            $useMinMax = false;
            if (isset($cancelados['min'])) {
                $this->addUsingAlias(TbofertaPeer::CANCELADOS, $cancelados['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cancelados['max'])) {
                $this->addUsingAlias(TbofertaPeer::CANCELADOS, $cancelados['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::CANCELADOS, $cancelados, $comparison);
    }

    /**
     * Filter the query on the trancados column
     *
     * Example usage:
     * <code>
     * $query->filterByTrancados(1234); // WHERE trancados = 1234
     * $query->filterByTrancados(array(12, 34)); // WHERE trancados IN (12, 34)
     * $query->filterByTrancados(array('min' => 12)); // WHERE trancados > 12
     * </code>
     *
     * @param     mixed $trancados The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByTrancados($trancados = null, $comparison = null)
    {
        if (is_array($trancados)) {
            $useMinMax = false;
            if (isset($trancados['min'])) {
                $this->addUsingAlias(TbofertaPeer::TRANCADOS, $trancados['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($trancados['max'])) {
                $this->addUsingAlias(TbofertaPeer::TRANCADOS, $trancados['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::TRANCADOS, $trancados, $comparison);
    }

    /**
     * Filter the query on the id_matricula_prof column
     *
     * Example usage:
     * <code>
     * $query->filterByIdMatriculaProf(1234); // WHERE id_matricula_prof = 1234
     * $query->filterByIdMatriculaProf(array(12, 34)); // WHERE id_matricula_prof IN (12, 34)
     * $query->filterByIdMatriculaProf(array('min' => 12)); // WHERE id_matricula_prof > 12
     * </code>
     *
     * @see       filterByTbprofessorRelatedByIdMatriculaProf()
     *
     * @param     mixed $idMatriculaProf The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdMatriculaProf($idMatriculaProf = null, $comparison = null)
    {
        if (is_array($idMatriculaProf)) {
            $useMinMax = false;
            if (isset($idMatriculaProf['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF, $idMatriculaProf['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idMatriculaProf['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF, $idMatriculaProf['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF, $idMatriculaProf, $comparison);
    }

    /**
     * Filter the query on the id_matricula_prof2 column
     *
     * Example usage:
     * <code>
     * $query->filterByIdMatriculaProf2(1234); // WHERE id_matricula_prof2 = 1234
     * $query->filterByIdMatriculaProf2(array(12, 34)); // WHERE id_matricula_prof2 IN (12, 34)
     * $query->filterByIdMatriculaProf2(array('min' => 12)); // WHERE id_matricula_prof2 > 12
     * </code>
     *
     * @see       filterByTbprofessorRelatedByIdMatriculaProf2()
     *
     * @param     mixed $idMatriculaProf2 The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdMatriculaProf2($idMatriculaProf2 = null, $comparison = null)
    {
        if (is_array($idMatriculaProf2)) {
            $useMinMax = false;
            if (isset($idMatriculaProf2['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF2, $idMatriculaProf2['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idMatriculaProf2['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF2, $idMatriculaProf2['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF2, $idMatriculaProf2, $comparison);
    }

    /**
     * Filter the query on the id_setor column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSetor(1234); // WHERE id_setor = 1234
     * $query->filterByIdSetor(array(12, 34)); // WHERE id_setor IN (12, 34)
     * $query->filterByIdSetor(array('min' => 12)); // WHERE id_setor > 12
     * </code>
     *
     * @see       filterByTbsetor()
     *
     * @param     mixed $idSetor The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdSetor($idSetor = null, $comparison = null)
    {
        if (is_array($idSetor)) {
            $useMinMax = false;
            if (isset($idSetor['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_SETOR, $idSetor['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSetor['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_SETOR, $idSetor['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_SETOR, $idSetor, $comparison);
    }

    /**
     * Filter the query on the dt_inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByDtInicio('2011-03-14'); // WHERE dt_inicio = '2011-03-14'
     * $query->filterByDtInicio('now'); // WHERE dt_inicio = '2011-03-14'
     * $query->filterByDtInicio(array('max' => 'yesterday')); // WHERE dt_inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtInicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByDtInicio($dtInicio = null, $comparison = null)
    {
        if (is_array($dtInicio)) {
            $useMinMax = false;
            if (isset($dtInicio['min'])) {
                $this->addUsingAlias(TbofertaPeer::DT_INICIO, $dtInicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtInicio['max'])) {
                $this->addUsingAlias(TbofertaPeer::DT_INICIO, $dtInicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::DT_INICIO, $dtInicio, $comparison);
    }

    /**
     * Filter the query on the dt_fim column
     *
     * Example usage:
     * <code>
     * $query->filterByDtFim('2011-03-14'); // WHERE dt_fim = '2011-03-14'
     * $query->filterByDtFim('now'); // WHERE dt_fim = '2011-03-14'
     * $query->filterByDtFim(array('max' => 'yesterday')); // WHERE dt_fim > '2011-03-13'
     * </code>
     *
     * @param     mixed $dtFim The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByDtFim($dtFim = null, $comparison = null)
    {
        if (is_array($dtFim)) {
            $useMinMax = false;
            if (isset($dtFim['min'])) {
                $this->addUsingAlias(TbofertaPeer::DT_FIM, $dtFim['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($dtFim['max'])) {
                $this->addUsingAlias(TbofertaPeer::DT_FIM, $dtFim['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::DT_FIM, $dtFim, $comparison);
    }

    /**
     * Filter the query on the id_situacao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdSituacao(1234); // WHERE id_situacao = 1234
     * $query->filterByIdSituacao(array(12, 34)); // WHERE id_situacao IN (12, 34)
     * $query->filterByIdSituacao(array('min' => 12)); // WHERE id_situacao > 12
     * </code>
     *
     * @see       filterByTbofertasituacao()
     *
     * @param     mixed $idSituacao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdSituacao($idSituacao = null, $comparison = null)
    {
        if (is_array($idSituacao)) {
            $useMinMax = false;
            if (isset($idSituacao['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_SITUACAO, $idSituacao['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idSituacao['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_SITUACAO, $idSituacao['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_SITUACAO, $idSituacao, $comparison);
    }

    /**
     * Filter the query on the id_polo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPolo(1234); // WHERE id_polo = 1234
     * $query->filterByIdPolo(array(12, 34)); // WHERE id_polo IN (12, 34)
     * $query->filterByIdPolo(array('min' => 12)); // WHERE id_polo > 12
     * </code>
     *
     * @see       filterByTbpolos()
     *
     * @param     mixed $idPolo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByIdPolo($idPolo = null, $comparison = null)
    {
        if (is_array($idPolo)) {
            $useMinMax = false;
            if (isset($idPolo['min'])) {
                $this->addUsingAlias(TbofertaPeer::ID_POLO, $idPolo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPolo['max'])) {
                $this->addUsingAlias(TbofertaPeer::ID_POLO, $idPolo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::ID_POLO, $idPolo, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbofertaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbofertaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbofertaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbofertaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbofertaPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbperiodo object
     *
     * @param   Tbperiodo|PropelObjectCollection $tbperiodo The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbperiodo($tbperiodo, $comparison = null)
    {
        if ($tbperiodo instanceof Tbperiodo) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_PERIODO, $tbperiodo->getIdPeriodo(), $comparison);
        } elseif ($tbperiodo instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_PERIODO, $tbperiodo->toKeyValue('PrimaryKey', 'IdPeriodo'), $comparison);
        } else {
            throw new PropelException('filterByTbperiodo() only accepts arguments of type Tbperiodo or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbperiodo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbperiodo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbperiodo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbperiodo');
        }

        return $this;
    }

    /**
     * Use the Tbperiodo relation Tbperiodo object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbperiodoQuery A secondary query class using the current class as primary query
     */
    public function useTbperiodoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbperiodo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbperiodo', 'TbperiodoQuery');
    }

    /**
     * Filter the query by a related Tbturno object
     *
     * @param   Tbturno|PropelObjectCollection $tbturno The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturno($tbturno, $comparison = null)
    {
        if ($tbturno instanceof Tbturno) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_TURNO, $tbturno->getIdTurno(), $comparison);
        } elseif ($tbturno instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_TURNO, $tbturno->toKeyValue('PrimaryKey', 'IdTurno'), $comparison);
        } else {
            throw new PropelException('filterByTbturno() only accepts arguments of type Tbturno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbturno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturno');
        }

        return $this;
    }

    /**
     * Use the Tbturno relation Tbturno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturnoQuery A secondary query class using the current class as primary query
     */
    public function useTbturnoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturno', 'TbturnoQuery');
    }

    /**
     * Filter the query by a related Tbcurso object
     *
     * @param   Tbcurso|PropelObjectCollection $tbcurso The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcursoRelatedByCodCurso($tbcurso, $comparison = null)
    {
        if ($tbcurso instanceof Tbcurso) {
            return $this
                ->addUsingAlias(TbofertaPeer::COD_CURSO, $tbcurso->getCodCurso(), $comparison);
        } elseif ($tbcurso instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::COD_CURSO, $tbcurso->toKeyValue('PrimaryKey', 'CodCurso'), $comparison);
        } else {
            throw new PropelException('filterByTbcursoRelatedByCodCurso() only accepts arguments of type Tbcurso or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbcursoRelatedByCodCurso relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbcursoRelatedByCodCurso($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbcursoRelatedByCodCurso');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbcursoRelatedByCodCurso');
        }

        return $this;
    }

    /**
     * Use the TbcursoRelatedByCodCurso relation Tbcurso object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursoQuery A secondary query class using the current class as primary query
     */
    public function useTbcursoRelatedByCodCursoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbcursoRelatedByCodCurso($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbcursoRelatedByCodCurso', 'TbcursoQuery');
    }

    /**
     * Filter the query by a related Tbcurso object
     *
     * @param   Tbcurso|PropelObjectCollection $tbcurso The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbcursoRelatedByCodCursoDestino($tbcurso, $comparison = null)
    {
        if ($tbcurso instanceof Tbcurso) {
            return $this
                ->addUsingAlias(TbofertaPeer::COD_CURSO_DESTINO, $tbcurso->getCodCurso(), $comparison);
        } elseif ($tbcurso instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::COD_CURSO_DESTINO, $tbcurso->toKeyValue('PrimaryKey', 'CodCurso'), $comparison);
        } else {
            throw new PropelException('filterByTbcursoRelatedByCodCursoDestino() only accepts arguments of type Tbcurso or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbcursoRelatedByCodCursoDestino relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbcursoRelatedByCodCursoDestino($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbcursoRelatedByCodCursoDestino');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbcursoRelatedByCodCursoDestino');
        }

        return $this;
    }

    /**
     * Use the TbcursoRelatedByCodCursoDestino relation Tbcurso object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbcursoQuery A secondary query class using the current class as primary query
     */
    public function useTbcursoRelatedByCodCursoDestinoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbcursoRelatedByCodCursoDestino($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbcursoRelatedByCodCursoDestino', 'TbcursoQuery');
    }

    /**
     * Filter the query by a related Tbdisciplina object
     *
     * @param   Tbdisciplina|PropelObjectCollection $tbdisciplina The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplina($tbdisciplina, $comparison = null)
    {
        if ($tbdisciplina instanceof Tbdisciplina) {
            return $this
                ->addUsingAlias(TbofertaPeer::COD_DISCIPLINA, $tbdisciplina->getCodDisciplina(), $comparison);
        } elseif ($tbdisciplina instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::COD_DISCIPLINA, $tbdisciplina->toKeyValue('PrimaryKey', 'CodDisciplina'), $comparison);
        } else {
            throw new PropelException('filterByTbdisciplina() only accepts arguments of type Tbdisciplina or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbdisciplina relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbdisciplina($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbdisciplina');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbdisciplina');
        }

        return $this;
    }

    /**
     * Use the Tbdisciplina relation Tbdisciplina object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinaQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplina($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbdisciplina', 'TbdisciplinaQuery');
    }

    /**
     * Filter the query by a related Tbsala object
     *
     * @param   Tbsala|PropelObjectCollection $tbsala The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbsala($tbsala, $comparison = null)
    {
        if ($tbsala instanceof Tbsala) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_SALA, $tbsala->getIdSala(), $comparison);
        } elseif ($tbsala instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_SALA, $tbsala->toKeyValue('PrimaryKey', 'IdSala'), $comparison);
        } else {
            throw new PropelException('filterByTbsala() only accepts arguments of type Tbsala or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbsala relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbsala($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbsala');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbsala');
        }

        return $this;
    }

    /**
     * Use the Tbsala relation Tbsala object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbsalaQuery A secondary query class using the current class as primary query
     */
    public function useTbsalaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbsala($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbsala', 'TbsalaQuery');
    }

    /**
     * Filter the query by a related Tbprofessor object
     *
     * @param   Tbprofessor|PropelObjectCollection $tbprofessor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbprofessorRelatedByIdMatriculaProf($tbprofessor, $comparison = null)
    {
        if ($tbprofessor instanceof Tbprofessor) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF, $tbprofessor->getMatriculaProf(), $comparison);
        } elseif ($tbprofessor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF, $tbprofessor->toKeyValue('PrimaryKey', 'MatriculaProf'), $comparison);
        } else {
            throw new PropelException('filterByTbprofessorRelatedByIdMatriculaProf() only accepts arguments of type Tbprofessor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbprofessorRelatedByIdMatriculaProf($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbprofessorRelatedByIdMatriculaProf');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbprofessorRelatedByIdMatriculaProf');
        }

        return $this;
    }

    /**
     * Use the TbprofessorRelatedByIdMatriculaProf relation Tbprofessor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbprofessorQuery A secondary query class using the current class as primary query
     */
    public function useTbprofessorRelatedByIdMatriculaProfQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbprofessorRelatedByIdMatriculaProf($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbprofessorRelatedByIdMatriculaProf', 'TbprofessorQuery');
    }

    /**
     * Filter the query by a related Tbprofessor object
     *
     * @param   Tbprofessor|PropelObjectCollection $tbprofessor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbprofessorRelatedByIdMatriculaProf2($tbprofessor, $comparison = null)
    {
        if ($tbprofessor instanceof Tbprofessor) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF2, $tbprofessor->getMatriculaProf(), $comparison);
        } elseif ($tbprofessor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_MATRICULA_PROF2, $tbprofessor->toKeyValue('PrimaryKey', 'MatriculaProf'), $comparison);
        } else {
            throw new PropelException('filterByTbprofessorRelatedByIdMatriculaProf2() only accepts arguments of type Tbprofessor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbprofessorRelatedByIdMatriculaProf2 relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbprofessorRelatedByIdMatriculaProf2($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbprofessorRelatedByIdMatriculaProf2');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbprofessorRelatedByIdMatriculaProf2');
        }

        return $this;
    }

    /**
     * Use the TbprofessorRelatedByIdMatriculaProf2 relation Tbprofessor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbprofessorQuery A secondary query class using the current class as primary query
     */
    public function useTbprofessorRelatedByIdMatriculaProf2Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbprofessorRelatedByIdMatriculaProf2($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbprofessorRelatedByIdMatriculaProf2', 'TbprofessorQuery');
    }

    /**
     * Filter the query by a related Tbsetor object
     *
     * @param   Tbsetor|PropelObjectCollection $tbsetor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbsetor($tbsetor, $comparison = null)
    {
        if ($tbsetor instanceof Tbsetor) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_SETOR, $tbsetor->getIdSetor(), $comparison);
        } elseif ($tbsetor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_SETOR, $tbsetor->toKeyValue('PrimaryKey', 'IdSetor'), $comparison);
        } else {
            throw new PropelException('filterByTbsetor() only accepts arguments of type Tbsetor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbsetor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbsetor($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbsetor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbsetor');
        }

        return $this;
    }

    /**
     * Use the Tbsetor relation Tbsetor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbsetorQuery A secondary query class using the current class as primary query
     */
    public function useTbsetorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbsetor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbsetor', 'TbsetorQuery');
    }

    /**
     * Filter the query by a related Tbofertasituacao object
     *
     * @param   Tbofertasituacao|PropelObjectCollection $tbofertasituacao The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbofertasituacao($tbofertasituacao, $comparison = null)
    {
        if ($tbofertasituacao instanceof Tbofertasituacao) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_SITUACAO, $tbofertasituacao->getIdSituacao(), $comparison);
        } elseif ($tbofertasituacao instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_SITUACAO, $tbofertasituacao->toKeyValue('PrimaryKey', 'IdSituacao'), $comparison);
        } else {
            throw new PropelException('filterByTbofertasituacao() only accepts arguments of type Tbofertasituacao or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbofertasituacao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbofertasituacao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbofertasituacao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbofertasituacao');
        }

        return $this;
    }

    /**
     * Use the Tbofertasituacao relation Tbofertasituacao object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertasituacaoQuery A secondary query class using the current class as primary query
     */
    public function useTbofertasituacaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbofertasituacao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbofertasituacao', 'TbofertasituacaoQuery');
    }

    /**
     * Filter the query by a related Tbpolos object
     *
     * @param   Tbpolos|PropelObjectCollection $tbpolos The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbpolos($tbpolos, $comparison = null)
    {
        if ($tbpolos instanceof Tbpolos) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_POLO, $tbpolos->getIdPolo(), $comparison);
        } elseif ($tbpolos instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertaPeer::ID_POLO, $tbpolos->toKeyValue('PrimaryKey', 'IdPolo'), $comparison);
        } else {
            throw new PropelException('filterByTbpolos() only accepts arguments of type Tbpolos or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbpolos relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbpolos($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbpolos');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbpolos');
        }

        return $this;
    }

    /**
     * Use the Tbpolos relation Tbpolos object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbpolosQuery A secondary query class using the current class as primary query
     */
    public function useTbpolosQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbpolos($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbpolos', 'TbpolosQuery');
    }

    /**
     * Filter the query by a related Tbfilacalouros object
     *
     * @param   Tbfilacalouros|PropelObjectCollection $tbfilacalouros  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbfilacalouros($tbfilacalouros, $comparison = null)
    {
        if ($tbfilacalouros instanceof Tbfilacalouros) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_OFERTA, $tbfilacalouros->getIdOferta(), $comparison);
        } elseif ($tbfilacalouros instanceof PropelObjectCollection) {
            return $this
                ->useTbfilacalourosQuery()
                ->filterByPrimaryKeys($tbfilacalouros->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbfilacalouros() only accepts arguments of type Tbfilacalouros or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbfilacalouros relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbfilacalouros($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbfilacalouros');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbfilacalouros');
        }

        return $this;
    }

    /**
     * Use the Tbfilacalouros relation Tbfilacalouros object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbfilacalourosQuery A secondary query class using the current class as primary query
     */
    public function useTbfilacalourosQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbfilacalouros($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbfilacalouros', 'TbfilacalourosQuery');
    }

    /**
     * Filter the query by a related Tbfila object
     *
     * @param   Tbfila|PropelObjectCollection $tbfila  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbfila($tbfila, $comparison = null)
    {
        if ($tbfila instanceof Tbfila) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_OFERTA, $tbfila->getIdOferta(), $comparison);
        } elseif ($tbfila instanceof PropelObjectCollection) {
            return $this
                ->useTbfilaQuery()
                ->filterByPrimaryKeys($tbfila->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbfila() only accepts arguments of type Tbfila or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbfila relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbfila($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbfila');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbfila');
        }

        return $this;
    }

    /**
     * Use the Tbfila relation Tbfila object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbfilaQuery A secondary query class using the current class as primary query
     */
    public function useTbfilaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbfila($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbfila', 'TbfilaQuery');
    }

    /**
     * Filter the query by a related Tbofertacoordenador object
     *
     * @param   Tbofertacoordenador|PropelObjectCollection $tbofertacoordenador  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbofertacoordenador($tbofertacoordenador, $comparison = null)
    {
        if ($tbofertacoordenador instanceof Tbofertacoordenador) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_OFERTA, $tbofertacoordenador->getIdOferta(), $comparison);
        } elseif ($tbofertacoordenador instanceof PropelObjectCollection) {
            return $this
                ->useTbofertacoordenadorQuery()
                ->filterByPrimaryKeys($tbofertacoordenador->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbofertacoordenador() only accepts arguments of type Tbofertacoordenador or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbofertacoordenador relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbofertacoordenador($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbofertacoordenador');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbofertacoordenador');
        }

        return $this;
    }

    /**
     * Use the Tbofertacoordenador relation Tbofertacoordenador object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertacoordenadorQuery A secondary query class using the current class as primary query
     */
    public function useTbofertacoordenadorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbofertacoordenador($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbofertacoordenador', 'TbofertacoordenadorQuery');
    }

    /**
     * Filter the query by a related Tbofertahorario object
     *
     * @param   Tbofertahorario|PropelObjectCollection $tbofertahorario  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbofertahorario($tbofertahorario, $comparison = null)
    {
        if ($tbofertahorario instanceof Tbofertahorario) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_OFERTA, $tbofertahorario->getIdOferta(), $comparison);
        } elseif ($tbofertahorario instanceof PropelObjectCollection) {
            return $this
                ->useTbofertahorarioQuery()
                ->filterByPrimaryKeys($tbofertahorario->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbofertahorario() only accepts arguments of type Tbofertahorario or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbofertahorario relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbofertahorario($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbofertahorario');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbofertahorario');
        }

        return $this;
    }

    /**
     * Use the Tbofertahorario relation Tbofertahorario object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertahorarioQuery A secondary query class using the current class as primary query
     */
    public function useTbofertahorarioQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbofertahorario($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbofertahorario', 'TbofertahorarioQuery');
    }

    /**
     * Filter the query by a related Tbturma object
     *
     * @param   Tbturma|PropelObjectCollection $tbturma  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturma($tbturma, $comparison = null)
    {
        if ($tbturma instanceof Tbturma) {
            return $this
                ->addUsingAlias(TbofertaPeer::ID_OFERTA, $tbturma->getIdOferta(), $comparison);
        } elseif ($tbturma instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaQuery()
                ->filterByPrimaryKeys($tbturma->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturma() only accepts arguments of type Tbturma or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbturma relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function joinTbturma($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbturma');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbturma');
        }

        return $this;
    }

    /**
     * Use the Tbturma relation Tbturma object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTbturma($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbturma', 'TbturmaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tboferta $tboferta Object to remove from the list of results
     *
     * @return TbofertaQuery The current query, for fluid interface
     */
    public function prune($tboferta = null)
    {
        if ($tboferta) {
            $this->addUsingAlias(TbofertaPeer::ID_OFERTA, $tboferta->getIdOferta(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
