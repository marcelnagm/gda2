<?php


/**
 * Base class that represents a query for the 'tbturma' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:40 2013
 *
 * @method TbturmaQuery orderByIdTurma($order = Criteria::ASC) Order by the id_turma column
 * @method TbturmaQuery orderByIdPeriodo($order = Criteria::ASC) Order by the id_periodo column
 * @method TbturmaQuery orderByCodDisciplina($order = Criteria::ASC) Order by the cod_disciplina column
 * @method TbturmaQuery orderByTurma($order = Criteria::ASC) Order by the turma column
 * @method TbturmaQuery orderByNNotas($order = Criteria::ASC) Order by the n_notas column
 * @method TbturmaQuery orderByObservacao($order = Criteria::ASC) Order by the observacao column
 * @method TbturmaQuery orderByNotasNoHistorico($order = Criteria::ASC) Order by the notas_no_historico column
 * @method TbturmaQuery orderByIdOferta($order = Criteria::ASC) Order by the id_oferta column
 * @method TbturmaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbturmaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbturmaQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbturmaQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbturmaQuery groupByIdTurma() Group by the id_turma column
 * @method TbturmaQuery groupByIdPeriodo() Group by the id_periodo column
 * @method TbturmaQuery groupByCodDisciplina() Group by the cod_disciplina column
 * @method TbturmaQuery groupByTurma() Group by the turma column
 * @method TbturmaQuery groupByNNotas() Group by the n_notas column
 * @method TbturmaQuery groupByObservacao() Group by the observacao column
 * @method TbturmaQuery groupByNotasNoHistorico() Group by the notas_no_historico column
 * @method TbturmaQuery groupByIdOferta() Group by the id_oferta column
 * @method TbturmaQuery groupByCreatedAt() Group by the created_at column
 * @method TbturmaQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbturmaQuery groupByCreatedBy() Group by the created_by column
 * @method TbturmaQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbturmaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbturmaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbturmaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbturmaQuery leftJoinTbperiodo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbperiodo relation
 * @method TbturmaQuery rightJoinTbperiodo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbperiodo relation
 * @method TbturmaQuery innerJoinTbperiodo($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbperiodo relation
 *
 * @method TbturmaQuery leftJoinTbdisciplina($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbdisciplina relation
 * @method TbturmaQuery rightJoinTbdisciplina($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbdisciplina relation
 * @method TbturmaQuery innerJoinTbdisciplina($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbdisciplina relation
 *
 * @method TbturmaQuery leftJoinTboferta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tboferta relation
 * @method TbturmaQuery rightJoinTboferta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tboferta relation
 * @method TbturmaQuery innerJoinTboferta($relationAlias = null) Adds a INNER JOIN clause to the query using the Tboferta relation
 *
 * @method TbturmaQuery leftJoinTbturmaAluno($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbturmaAluno relation
 * @method TbturmaQuery rightJoinTbturmaAluno($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbturmaAluno relation
 * @method TbturmaQuery innerJoinTbturmaAluno($relationAlias = null) Adds a INNER JOIN clause to the query using the TbturmaAluno relation
 *
 * @method TbturmaQuery leftJoinTbturmaProfessor($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbturmaProfessor relation
 * @method TbturmaQuery rightJoinTbturmaProfessor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbturmaProfessor relation
 * @method TbturmaQuery innerJoinTbturmaProfessor($relationAlias = null) Adds a INNER JOIN clause to the query using the TbturmaProfessor relation
 *
 * @method TbturmaQuery leftJoinTbturmaSumula($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbturmaSumula relation
 * @method TbturmaQuery rightJoinTbturmaSumula($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbturmaSumula relation
 * @method TbturmaQuery innerJoinTbturmaSumula($relationAlias = null) Adds a INNER JOIN clause to the query using the TbturmaSumula relation
 *
 * @method Tbturma findOne(PropelPDO $con = null) Return the first Tbturma matching the query
 * @method Tbturma findOneOrCreate(PropelPDO $con = null) Return the first Tbturma matching the query, or a new Tbturma object populated from the query conditions when no match is found
 *
 * @method Tbturma findOneByIdTurma(int $id_turma) Return the first Tbturma filtered by the id_turma column
 * @method Tbturma findOneByIdPeriodo(int $id_periodo) Return the first Tbturma filtered by the id_periodo column
 * @method Tbturma findOneByCodDisciplina(string $cod_disciplina) Return the first Tbturma filtered by the cod_disciplina column
 * @method Tbturma findOneByTurma(string $turma) Return the first Tbturma filtered by the turma column
 * @method Tbturma findOneByNNotas(int $n_notas) Return the first Tbturma filtered by the n_notas column
 * @method Tbturma findOneByObservacao(string $observacao) Return the first Tbturma filtered by the observacao column
 * @method Tbturma findOneByNotasNoHistorico(boolean $notas_no_historico) Return the first Tbturma filtered by the notas_no_historico column
 * @method Tbturma findOneByIdOferta(int $id_oferta) Return the first Tbturma filtered by the id_oferta column
 * @method Tbturma findOneByCreatedAt(string $created_at) Return the first Tbturma filtered by the created_at column
 * @method Tbturma findOneByUpdatedAt(string $updated_at) Return the first Tbturma filtered by the updated_at column
 * @method Tbturma findOneByCreatedBy(string $created_by) Return the first Tbturma filtered by the created_by column
 * @method Tbturma findOneByUpdatedBy(string $updated_by) Return the first Tbturma filtered by the updated_by column
 *
 * @method array findByIdTurma(int $id_turma) Return Tbturma objects filtered by the id_turma column
 * @method array findByIdPeriodo(int $id_periodo) Return Tbturma objects filtered by the id_periodo column
 * @method array findByCodDisciplina(string $cod_disciplina) Return Tbturma objects filtered by the cod_disciplina column
 * @method array findByTurma(string $turma) Return Tbturma objects filtered by the turma column
 * @method array findByNNotas(int $n_notas) Return Tbturma objects filtered by the n_notas column
 * @method array findByObservacao(string $observacao) Return Tbturma objects filtered by the observacao column
 * @method array findByNotasNoHistorico(boolean $notas_no_historico) Return Tbturma objects filtered by the notas_no_historico column
 * @method array findByIdOferta(int $id_oferta) Return Tbturma objects filtered by the id_oferta column
 * @method array findByCreatedAt(string $created_at) Return Tbturma objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbturma objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbturma objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbturma objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbturmaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbturmaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbturma', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbturmaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbturmaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbturmaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbturmaQuery) {
            return $criteria;
        }
        $query = new TbturmaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbturma|Tbturma[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbturmaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbturmaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbturma A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_TURMA, ID_PERIODO, COD_DISCIPLINA, TURMA, N_NOTAS, OBSERVACAO, NOTAS_NO_HISTORICO, ID_OFERTA, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbturma WHERE ID_TURMA = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbturma();
            $obj->hydrate($row);
            TbturmaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbturma|Tbturma[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbturma[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbturmaPeer::ID_TURMA, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbturmaPeer::ID_TURMA, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_turma column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTurma(1234); // WHERE id_turma = 1234
     * $query->filterByIdTurma(array(12, 34)); // WHERE id_turma IN (12, 34)
     * $query->filterByIdTurma(array('min' => 12)); // WHERE id_turma > 12
     * </code>
     *
     * @param     mixed $idTurma The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByIdTurma($idTurma = null, $comparison = null)
    {
        if (is_array($idTurma) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbturmaPeer::ID_TURMA, $idTurma, $comparison);
    }

    /**
     * Filter the query on the id_periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPeriodo(1234); // WHERE id_periodo = 1234
     * $query->filterByIdPeriodo(array(12, 34)); // WHERE id_periodo IN (12, 34)
     * $query->filterByIdPeriodo(array('min' => 12)); // WHERE id_periodo > 12
     * </code>
     *
     * @see       filterByTbperiodo()
     *
     * @param     mixed $idPeriodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByIdPeriodo($idPeriodo = null, $comparison = null)
    {
        if (is_array($idPeriodo)) {
            $useMinMax = false;
            if (isset($idPeriodo['min'])) {
                $this->addUsingAlias(TbturmaPeer::ID_PERIODO, $idPeriodo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idPeriodo['max'])) {
                $this->addUsingAlias(TbturmaPeer::ID_PERIODO, $idPeriodo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::ID_PERIODO, $idPeriodo, $comparison);
    }

    /**
     * Filter the query on the cod_disciplina column
     *
     * Example usage:
     * <code>
     * $query->filterByCodDisciplina('fooValue');   // WHERE cod_disciplina = 'fooValue'
     * $query->filterByCodDisciplina('%fooValue%'); // WHERE cod_disciplina LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codDisciplina The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByCodDisciplina($codDisciplina = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codDisciplina)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codDisciplina)) {
                $codDisciplina = str_replace('*', '%', $codDisciplina);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::COD_DISCIPLINA, $codDisciplina, $comparison);
    }

    /**
     * Filter the query on the turma column
     *
     * Example usage:
     * <code>
     * $query->filterByTurma('fooValue');   // WHERE turma = 'fooValue'
     * $query->filterByTurma('%fooValue%'); // WHERE turma LIKE '%fooValue%'
     * </code>
     *
     * @param     string $turma The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByTurma($turma = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($turma)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $turma)) {
                $turma = str_replace('*', '%', $turma);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::TURMA, $turma, $comparison);
    }

    /**
     * Filter the query on the n_notas column
     *
     * Example usage:
     * <code>
     * $query->filterByNNotas(1234); // WHERE n_notas = 1234
     * $query->filterByNNotas(array(12, 34)); // WHERE n_notas IN (12, 34)
     * $query->filterByNNotas(array('min' => 12)); // WHERE n_notas > 12
     * </code>
     *
     * @param     mixed $nNotas The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByNNotas($nNotas = null, $comparison = null)
    {
        if (is_array($nNotas)) {
            $useMinMax = false;
            if (isset($nNotas['min'])) {
                $this->addUsingAlias(TbturmaPeer::N_NOTAS, $nNotas['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($nNotas['max'])) {
                $this->addUsingAlias(TbturmaPeer::N_NOTAS, $nNotas['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::N_NOTAS, $nNotas, $comparison);
    }

    /**
     * Filter the query on the observacao column
     *
     * Example usage:
     * <code>
     * $query->filterByObservacao('fooValue');   // WHERE observacao = 'fooValue'
     * $query->filterByObservacao('%fooValue%'); // WHERE observacao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $observacao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByObservacao($observacao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($observacao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $observacao)) {
                $observacao = str_replace('*', '%', $observacao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::OBSERVACAO, $observacao, $comparison);
    }

    /**
     * Filter the query on the notas_no_historico column
     *
     * Example usage:
     * <code>
     * $query->filterByNotasNoHistorico(true); // WHERE notas_no_historico = true
     * $query->filterByNotasNoHistorico('yes'); // WHERE notas_no_historico = true
     * </code>
     *
     * @param     boolean|string $notasNoHistorico The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByNotasNoHistorico($notasNoHistorico = null, $comparison = null)
    {
        if (is_string($notasNoHistorico)) {
            $notas_no_historico = in_array(strtolower($notasNoHistorico), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(TbturmaPeer::NOTAS_NO_HISTORICO, $notasNoHistorico, $comparison);
    }

    /**
     * Filter the query on the id_oferta column
     *
     * Example usage:
     * <code>
     * $query->filterByIdOferta(1234); // WHERE id_oferta = 1234
     * $query->filterByIdOferta(array(12, 34)); // WHERE id_oferta IN (12, 34)
     * $query->filterByIdOferta(array('min' => 12)); // WHERE id_oferta > 12
     * </code>
     *
     * @see       filterByTboferta()
     *
     * @param     mixed $idOferta The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByIdOferta($idOferta = null, $comparison = null)
    {
        if (is_array($idOferta)) {
            $useMinMax = false;
            if (isset($idOferta['min'])) {
                $this->addUsingAlias(TbturmaPeer::ID_OFERTA, $idOferta['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idOferta['max'])) {
                $this->addUsingAlias(TbturmaPeer::ID_OFERTA, $idOferta['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::ID_OFERTA, $idOferta, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbturmaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbturmaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbturmaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbturmaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbturmaPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbperiodo object
     *
     * @param   Tbperiodo|PropelObjectCollection $tbperiodo The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbperiodo($tbperiodo, $comparison = null)
    {
        if ($tbperiodo instanceof Tbperiodo) {
            return $this
                ->addUsingAlias(TbturmaPeer::ID_PERIODO, $tbperiodo->getIdPeriodo(), $comparison);
        } elseif ($tbperiodo instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaPeer::ID_PERIODO, $tbperiodo->toKeyValue('PrimaryKey', 'IdPeriodo'), $comparison);
        } else {
            throw new PropelException('filterByTbperiodo() only accepts arguments of type Tbperiodo or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbperiodo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function joinTbperiodo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbperiodo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbperiodo');
        }

        return $this;
    }

    /**
     * Use the Tbperiodo relation Tbperiodo object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbperiodoQuery A secondary query class using the current class as primary query
     */
    public function useTbperiodoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbperiodo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbperiodo', 'TbperiodoQuery');
    }

    /**
     * Filter the query by a related Tbdisciplina object
     *
     * @param   Tbdisciplina|PropelObjectCollection $tbdisciplina The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbdisciplina($tbdisciplina, $comparison = null)
    {
        if ($tbdisciplina instanceof Tbdisciplina) {
            return $this
                ->addUsingAlias(TbturmaPeer::COD_DISCIPLINA, $tbdisciplina->getCodDisciplina(), $comparison);
        } elseif ($tbdisciplina instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaPeer::COD_DISCIPLINA, $tbdisciplina->toKeyValue('PrimaryKey', 'CodDisciplina'), $comparison);
        } else {
            throw new PropelException('filterByTbdisciplina() only accepts arguments of type Tbdisciplina or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbdisciplina relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function joinTbdisciplina($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbdisciplina');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbdisciplina');
        }

        return $this;
    }

    /**
     * Use the Tbdisciplina relation Tbdisciplina object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbdisciplinaQuery A secondary query class using the current class as primary query
     */
    public function useTbdisciplinaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbdisciplina($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbdisciplina', 'TbdisciplinaQuery');
    }

    /**
     * Filter the query by a related Tboferta object
     *
     * @param   Tboferta|PropelObjectCollection $tboferta The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTboferta($tboferta, $comparison = null)
    {
        if ($tboferta instanceof Tboferta) {
            return $this
                ->addUsingAlias(TbturmaPeer::ID_OFERTA, $tboferta->getIdOferta(), $comparison);
        } elseif ($tboferta instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbturmaPeer::ID_OFERTA, $tboferta->toKeyValue('PrimaryKey', 'IdOferta'), $comparison);
        } else {
            throw new PropelException('filterByTboferta() only accepts arguments of type Tboferta or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tboferta relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function joinTboferta($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tboferta');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tboferta');
        }

        return $this;
    }

    /**
     * Use the Tboferta relation Tboferta object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertaQuery A secondary query class using the current class as primary query
     */
    public function useTbofertaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTboferta($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tboferta', 'TbofertaQuery');
    }

    /**
     * Filter the query by a related TbturmaAluno object
     *
     * @param   TbturmaAluno|PropelObjectCollection $tbturmaAluno  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturmaAluno($tbturmaAluno, $comparison = null)
    {
        if ($tbturmaAluno instanceof TbturmaAluno) {
            return $this
                ->addUsingAlias(TbturmaPeer::ID_TURMA, $tbturmaAluno->getIdTurma(), $comparison);
        } elseif ($tbturmaAluno instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaAlunoQuery()
                ->filterByPrimaryKeys($tbturmaAluno->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturmaAluno() only accepts arguments of type TbturmaAluno or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbturmaAluno relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function joinTbturmaAluno($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbturmaAluno');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbturmaAluno');
        }

        return $this;
    }

    /**
     * Use the TbturmaAluno relation TbturmaAluno object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaAlunoQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaAlunoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturmaAluno($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbturmaAluno', 'TbturmaAlunoQuery');
    }

    /**
     * Filter the query by a related TbturmaProfessor object
     *
     * @param   TbturmaProfessor|PropelObjectCollection $tbturmaProfessor  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturmaProfessor($tbturmaProfessor, $comparison = null)
    {
        if ($tbturmaProfessor instanceof TbturmaProfessor) {
            return $this
                ->addUsingAlias(TbturmaPeer::ID_TURMA, $tbturmaProfessor->getIdTurma(), $comparison);
        } elseif ($tbturmaProfessor instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaProfessorQuery()
                ->filterByPrimaryKeys($tbturmaProfessor->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturmaProfessor() only accepts arguments of type TbturmaProfessor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbturmaProfessor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function joinTbturmaProfessor($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbturmaProfessor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbturmaProfessor');
        }

        return $this;
    }

    /**
     * Use the TbturmaProfessor relation TbturmaProfessor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaProfessorQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaProfessorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturmaProfessor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbturmaProfessor', 'TbturmaProfessorQuery');
    }

    /**
     * Filter the query by a related TbturmaSumula object
     *
     * @param   TbturmaSumula|PropelObjectCollection $tbturmaSumula  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbturmaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbturmaSumula($tbturmaSumula, $comparison = null)
    {
        if ($tbturmaSumula instanceof TbturmaSumula) {
            return $this
                ->addUsingAlias(TbturmaPeer::ID_TURMA, $tbturmaSumula->getIdTurma(), $comparison);
        } elseif ($tbturmaSumula instanceof PropelObjectCollection) {
            return $this
                ->useTbturmaSumulaQuery()
                ->filterByPrimaryKeys($tbturmaSumula->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbturmaSumula() only accepts arguments of type TbturmaSumula or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbturmaSumula relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function joinTbturmaSumula($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbturmaSumula');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbturmaSumula');
        }

        return $this;
    }

    /**
     * Use the TbturmaSumula relation TbturmaSumula object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbturmaSumulaQuery A secondary query class using the current class as primary query
     */
    public function useTbturmaSumulaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbturmaSumula($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbturmaSumula', 'TbturmaSumulaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbturma $tbturma Object to remove from the list of results
     *
     * @return TbturmaQuery The current query, for fluid interface
     */
    public function prune($tbturma = null)
    {
        if ($tbturma) {
            $this->addUsingAlias(TbturmaPeer::ID_TURMA, $tbturma->getIdTurma(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
