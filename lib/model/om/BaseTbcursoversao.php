<?php

/**
 * Base class that represents a row from the 'tbcursoversao' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:51 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbcursoversao extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbcursoversaoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_versao_curso field.
	 * @var        int
	 */
	protected $id_versao_curso;

	/**
	 * The value for the id_formacao field.
	 * @var        int
	 */
	protected $id_formacao;

	/**
	 * The value for the cod_curso field.
	 * @var        int
	 */
	protected $cod_curso;

	/**
	 * The value for the id_turno field.
	 * @var        int
	 */
	protected $id_turno;

	/**
	 * The value for the descricao field.
	 * @var        string
	 */
	protected $descricao;

	/**
	 * The value for the situacao field.
	 * @var        string
	 */
	protected $situacao;

	/**
	 * The value for the doc_criacao field.
	 * @var        string
	 */
	protected $doc_criacao;

	/**
	 * The value for the dt_criacao field.
	 * @var        string
	 */
	protected $dt_criacao;

	/**
	 * The value for the dt_inicio field.
	 * @var        string
	 */
	protected $dt_inicio;

	/**
	 * The value for the dt_termino field.
	 * @var        string
	 */
	protected $dt_termino;

	/**
	 * The value for the id_campus field.
	 * @var        int
	 */
	protected $id_campus;

	/**
	 * The value for the id_setor field.
	 * @var        int
	 */
	protected $id_setor;

	/**
	 * The value for the prazo_min field.
	 * @var        string
	 */
	protected $prazo_min;

	/**
	 * The value for the prazo_max field.
	 * @var        string
	 */
	protected $prazo_max;

	/**
	 * The value for the cred_obr field.
	 * @var        string
	 */
	protected $cred_obr;

	/**
	 * The value for the cred_eletivo field.
	 * @var        string
	 */
	protected $cred_eletivo;

	/**
	 * The value for the cred_total field.
	 * @var        string
	 */
	protected $cred_total;

	/**
	 * The value for the ch_obr field.
	 * @var        int
	 */
	protected $ch_obr;

	/**
	 * The value for the ch_eletiva field.
	 * @var        int
	 */
	protected $ch_eletiva;

	/**
	 * The value for the ch_total field.
	 * @var        string
	 */
	protected $ch_total;

	/**
	 * The value for the semestre_inicio field.
	 * @var        int
	 */
	protected $semestre_inicio;

	/**
	 * The value for the cod_integracao field.
	 * @var        string
	 */
	protected $cod_integracao;

	/**
	 * The value for the cod_integracao_tipo field.
	 * @var        string
	 */
	protected $cod_integracao_tipo;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbformacao
	 */
	protected $aTbformacao;

	/**
	 * @var        Tbcurso
	 */
	protected $aTbcurso;

	/**
	 * @var        Tbturno
	 */
	protected $aTbturno;

	/**
	 * @var        Tbcampus
	 */
	protected $aTbcampus;

	/**
	 * @var        Tbsetor
	 */
	protected $aTbsetor;

	/**
	 * @var        array Tbalunomatricula[] Collection to store aggregation of Tbalunomatricula objects.
	 */
	protected $collTbalunomatriculas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbalunomatriculas.
	 */
	private $lastTbalunomatriculaCriteria = null;

	/**
	 * @var        array Tbalunobackup[] Collection to store aggregation of Tbalunobackup objects.
	 */
	protected $collTbalunobackups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbalunobackups.
	 */
	private $lastTbalunobackupCriteria = null;

	/**
	 * @var        array Tbfilacalouros[] Collection to store aggregation of Tbfilacalouros objects.
	 */
	protected $collTbfilacalouross;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbfilacalouross.
	 */
	private $lastTbfilacalourosCriteria = null;

	/**
	 * @var        array Tbvagas[] Collection to store aggregation of Tbvagas objects.
	 */
	protected $collTbvagass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbvagass.
	 */
	private $lastTbvagasCriteria = null;

	/**
	 * @var        array Tbloadaluno[] Collection to store aggregation of Tbloadaluno objects.
	 */
	protected $collTbloadalunos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbloadalunos.
	 */
	private $lastTbloadalunoCriteria = null;

	/**
	 * @var        array Tbaluno[] Collection to store aggregation of Tbaluno objects.
	 */
	protected $collTbalunos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbalunos.
	 */
	private $lastTbalunoCriteria = null;

	/**
	 * @var        array Tbcurriculodisciplinas[] Collection to store aggregation of Tbcurriculodisciplinas objects.
	 */
	protected $collTbcurriculodisciplinass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbcurriculodisciplinass.
	 */
	private $lastTbcurriculodisciplinasCriteria = null;

	/**
	 * @var        array Tbdisciplinarequisitos[] Collection to store aggregation of Tbdisciplinarequisitos objects.
	 */
	protected $collTbdisciplinarequisitoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinarequisitoss.
	 */
	private $lastTbdisciplinarequisitosCriteria = null;

	/**
	 * @var        array Tbdisciplinacorequisitos[] Collection to store aggregation of Tbdisciplinacorequisitos objects.
	 */
	protected $collTbdisciplinacorequisitoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbdisciplinacorequisitoss.
	 */
	private $lastTbdisciplinacorequisitosCriteria = null;

	/**
	 * @var        array Tbcoordenadorcurso[] Collection to store aggregation of Tbcoordenadorcurso objects.
	 */
	protected $collTbcoordenadorcursos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbcoordenadorcursos.
	 */
	private $lastTbcoordenadorcursoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbcursoversaoPeer';

	/**
	 * Get the [id_versao_curso] column value.
	 * 
	 * @return     int
	 */
	public function getIdVersaoCurso()
	{
		return $this->id_versao_curso;
	}

	/**
	 * Get the [id_formacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdFormacao()
	{
		return $this->id_formacao;
	}

	/**
	 * Get the [cod_curso] column value.
	 * 
	 * @return     int
	 */
	public function getCodCurso()
	{
		return $this->cod_curso;
	}

	/**
	 * Get the [id_turno] column value.
	 * 
	 * @return     int
	 */
	public function getIdTurno()
	{
		return $this->id_turno;
	}

	/**
	 * Get the [descricao] column value.
	 * 
	 * @return     string
	 */
	public function getDescricao()
	{
		return $this->descricao;
	}

	/**
	 * Get the [situacao] column value.
	 * 
	 * @return     string
	 */
	public function getSituacao()
	{
		return $this->situacao;
	}

	/**
	 * Get the [doc_criacao] column value.
	 * 
	 * @return     string
	 */
	public function getDocCriacao()
	{
		return $this->doc_criacao;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_criacao] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtCriacao($format = 'Y-m-d')
	{
		if ($this->dt_criacao === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_criacao);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_criacao, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicio($format = 'Y-m-d')
	{
		if ($this->dt_inicio === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_termino] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtTermino($format = 'Y-m-d')
	{
		if ($this->dt_termino === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_termino);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_termino, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id_campus] column value.
	 * 
	 * @return     int
	 */
	public function getIdCampus()
	{
		return $this->id_campus;
	}

	/**
	 * Get the [id_setor] column value.
	 * 
	 * @return     int
	 */
	public function getIdSetor()
	{
		return $this->id_setor;
	}

	/**
	 * Get the [prazo_min] column value.
	 * 
	 * @return     string
	 */
	public function getPrazoMin()
	{
		return $this->prazo_min;
	}

	/**
	 * Get the [prazo_max] column value.
	 * 
	 * @return     string
	 */
	public function getPrazoMax()
	{
		return $this->prazo_max;
	}

	/**
	 * Get the [cred_obr] column value.
	 * 
	 * @return     string
	 */
	public function getCredObr()
	{
		return $this->cred_obr;
	}

	/**
	 * Get the [cred_eletivo] column value.
	 * 
	 * @return     string
	 */
	public function getCredEletivo()
	{
		return $this->cred_eletivo;
	}

	/**
	 * Get the [cred_total] column value.
	 * 
	 * @return     string
	 */
	public function getCredTotal()
	{
		return $this->cred_total;
	}

	/**
	 * Get the [ch_obr] column value.
	 * 
	 * @return     int
	 */
	public function getChObr()
	{
		return $this->ch_obr;
	}

	/**
	 * Get the [ch_eletiva] column value.
	 * 
	 * @return     int
	 */
	public function getChEletiva()
	{
		return $this->ch_eletiva;
	}

	/**
	 * Get the [ch_total] column value.
	 * 
	 * @return     string
	 */
	public function getChTotal()
	{
		return $this->ch_total;
	}

	/**
	 * Get the [semestre_inicio] column value.
	 * 
	 * @return     int
	 */
	public function getSemestreInicio()
	{
		return $this->semestre_inicio;
	}

	/**
	 * Get the [cod_integracao] column value.
	 * 
	 * @return     string
	 */
	public function getCodIntegracao()
	{
		return $this->cod_integracao;
	}

	/**
	 * Get the [cod_integracao_tipo] column value.
	 * 
	 * @return     string
	 */
	public function getCodIntegracaoTipo()
	{
		return $this->cod_integracao_tipo;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [id_versao_curso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setIdVersaoCurso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_versao_curso !== $v) {
			$this->id_versao_curso = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::ID_VERSAO_CURSO;
		}

		return $this;
	} // setIdVersaoCurso()

	/**
	 * Set the value of [id_formacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setIdFormacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_formacao !== $v) {
			$this->id_formacao = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::ID_FORMACAO;
		}

		if ($this->aTbformacao !== null && $this->aTbformacao->getIdFormacao() !== $v) {
			$this->aTbformacao = null;
		}

		return $this;
	} // setIdFormacao()

	/**
	 * Set the value of [cod_curso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCodCurso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cod_curso !== $v) {
			$this->cod_curso = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::COD_CURSO;
		}

		if ($this->aTbcurso !== null && $this->aTbcurso->getCodCurso() !== $v) {
			$this->aTbcurso = null;
		}

		return $this;
	} // setCodCurso()

	/**
	 * Set the value of [id_turno] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setIdTurno($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_turno !== $v) {
			$this->id_turno = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::ID_TURNO;
		}

		if ($this->aTbturno !== null && $this->aTbturno->getIdTurno() !== $v) {
			$this->aTbturno = null;
		}

		return $this;
	} // setIdTurno()

	/**
	 * Set the value of [descricao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setDescricao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descricao !== $v) {
			$this->descricao = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::DESCRICAO;
		}

		return $this;
	} // setDescricao()

	/**
	 * Set the value of [situacao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setSituacao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->situacao !== $v) {
			$this->situacao = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::SITUACAO;
		}

		return $this;
	} // setSituacao()

	/**
	 * Set the value of [doc_criacao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setDocCriacao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->doc_criacao !== $v) {
			$this->doc_criacao = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::DOC_CRIACAO;
		}

		return $this;
	} // setDocCriacao()

	/**
	 * Sets the value of [dt_criacao] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setDtCriacao($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_criacao !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_criacao !== null && $tmpDt = new DateTime($this->dt_criacao)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_criacao = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoversaoPeer::DT_CRIACAO;
			}
		} // if either are not null

		return $this;
	} // setDtCriacao()

	/**
	 * Sets the value of [dt_inicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setDtInicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio !== null && $tmpDt = new DateTime($this->dt_inicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoversaoPeer::DT_INICIO;
			}
		} // if either are not null

		return $this;
	} // setDtInicio()

	/**
	 * Sets the value of [dt_termino] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setDtTermino($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_termino !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_termino !== null && $tmpDt = new DateTime($this->dt_termino)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_termino = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoversaoPeer::DT_TERMINO;
			}
		} // if either are not null

		return $this;
	} // setDtTermino()

	/**
	 * Set the value of [id_campus] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setIdCampus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_campus !== $v) {
			$this->id_campus = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::ID_CAMPUS;
		}

		if ($this->aTbcampus !== null && $this->aTbcampus->getIdCampus() !== $v) {
			$this->aTbcampus = null;
		}

		return $this;
	} // setIdCampus()

	/**
	 * Set the value of [id_setor] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setIdSetor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_setor !== $v) {
			$this->id_setor = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::ID_SETOR;
		}

		if ($this->aTbsetor !== null && $this->aTbsetor->getIdSetor() !== $v) {
			$this->aTbsetor = null;
		}

		return $this;
	} // setIdSetor()

	/**
	 * Set the value of [prazo_min] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setPrazoMin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prazo_min !== $v) {
			$this->prazo_min = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::PRAZO_MIN;
		}

		return $this;
	} // setPrazoMin()

	/**
	 * Set the value of [prazo_max] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setPrazoMax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prazo_max !== $v) {
			$this->prazo_max = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::PRAZO_MAX;
		}

		return $this;
	} // setPrazoMax()

	/**
	 * Set the value of [cred_obr] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCredObr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cred_obr !== $v) {
			$this->cred_obr = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CRED_OBR;
		}

		return $this;
	} // setCredObr()

	/**
	 * Set the value of [cred_eletivo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCredEletivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cred_eletivo !== $v) {
			$this->cred_eletivo = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CRED_ELETIVO;
		}

		return $this;
	} // setCredEletivo()

	/**
	 * Set the value of [cred_total] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCredTotal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cred_total !== $v) {
			$this->cred_total = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CRED_TOTAL;
		}

		return $this;
	} // setCredTotal()

	/**
	 * Set the value of [ch_obr] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setChObr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ch_obr !== $v) {
			$this->ch_obr = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CH_OBR;
		}

		return $this;
	} // setChObr()

	/**
	 * Set the value of [ch_eletiva] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setChEletiva($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ch_eletiva !== $v) {
			$this->ch_eletiva = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CH_ELETIVA;
		}

		return $this;
	} // setChEletiva()

	/**
	 * Set the value of [ch_total] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setChTotal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ch_total !== $v) {
			$this->ch_total = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CH_TOTAL;
		}

		return $this;
	} // setChTotal()

	/**
	 * Set the value of [semestre_inicio] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setSemestreInicio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->semestre_inicio !== $v) {
			$this->semestre_inicio = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::SEMESTRE_INICIO;
		}

		return $this;
	} // setSemestreInicio()

	/**
	 * Set the value of [cod_integracao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCodIntegracao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cod_integracao !== $v) {
			$this->cod_integracao = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::COD_INTEGRACAO;
		}

		return $this;
	} // setCodIntegracao()

	/**
	 * Set the value of [cod_integracao_tipo] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCodIntegracaoTipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cod_integracao_tipo !== $v) {
			$this->cod_integracao_tipo = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::COD_INTEGRACAO_TIPO;
		}

		return $this;
	} // setCodIntegracaoTipo()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoversaoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbcursoversaoPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbcursoversao The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbcursoversaoPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_versao_curso = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_formacao = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->cod_curso = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->id_turno = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->descricao = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->situacao = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->doc_criacao = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->dt_criacao = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->dt_inicio = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->dt_termino = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->id_campus = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->id_setor = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->prazo_min = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->prazo_max = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->cred_obr = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->cred_eletivo = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->cred_total = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->ch_obr = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->ch_eletiva = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->ch_total = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->semestre_inicio = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->cod_integracao = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->cod_integracao_tipo = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->created_at = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->updated_at = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->created_by = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->updated_by = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tbcursoversao object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbformacao !== null && $this->id_formacao !== $this->aTbformacao->getIdFormacao()) {
			$this->aTbformacao = null;
		}
		if ($this->aTbcurso !== null && $this->cod_curso !== $this->aTbcurso->getCodCurso()) {
			$this->aTbcurso = null;
		}
		if ($this->aTbturno !== null && $this->id_turno !== $this->aTbturno->getIdTurno()) {
			$this->aTbturno = null;
		}
		if ($this->aTbcampus !== null && $this->id_campus !== $this->aTbcampus->getIdCampus()) {
			$this->aTbcampus = null;
		}
		if ($this->aTbsetor !== null && $this->id_setor !== $this->aTbsetor->getIdSetor()) {
			$this->aTbsetor = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbcursoversaoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbcursoversaoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbformacao = null;
			$this->aTbcurso = null;
			$this->aTbturno = null;
			$this->aTbcampus = null;
			$this->aTbsetor = null;
			$this->collTbalunomatriculas = null;
			$this->lastTbalunomatriculaCriteria = null;

			$this->collTbalunobackups = null;
			$this->lastTbalunobackupCriteria = null;

			$this->collTbfilacalouross = null;
			$this->lastTbfilacalourosCriteria = null;

			$this->collTbvagass = null;
			$this->lastTbvagasCriteria = null;

			$this->collTbloadalunos = null;
			$this->lastTbloadalunoCriteria = null;

			$this->collTbalunos = null;
			$this->lastTbalunoCriteria = null;

			$this->collTbcurriculodisciplinass = null;
			$this->lastTbcurriculodisciplinasCriteria = null;

			$this->collTbdisciplinarequisitoss = null;
			$this->lastTbdisciplinarequisitosCriteria = null;

			$this->collTbdisciplinacorequisitoss = null;
			$this->lastTbdisciplinacorequisitosCriteria = null;

			$this->collTbcoordenadorcursos = null;
			$this->lastTbcoordenadorcursoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbcursoversaoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbcursoversao:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbcursoversaoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbcursoversao:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbcursoversaoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbcursoversao:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbcursoversaoPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbcursoversaoPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbcursoversao:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbcursoversaoPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbformacao !== null) {
				if ($this->aTbformacao->isModified() || $this->aTbformacao->isNew()) {
					$affectedRows += $this->aTbformacao->save($con);
				}
				$this->setTbformacao($this->aTbformacao);
			}

			if ($this->aTbcurso !== null) {
				if ($this->aTbcurso->isModified() || $this->aTbcurso->isNew()) {
					$affectedRows += $this->aTbcurso->save($con);
				}
				$this->setTbcurso($this->aTbcurso);
			}

			if ($this->aTbturno !== null) {
				if ($this->aTbturno->isModified() || $this->aTbturno->isNew()) {
					$affectedRows += $this->aTbturno->save($con);
				}
				$this->setTbturno($this->aTbturno);
			}

			if ($this->aTbcampus !== null) {
				if ($this->aTbcampus->isModified() || $this->aTbcampus->isNew()) {
					$affectedRows += $this->aTbcampus->save($con);
				}
				$this->setTbcampus($this->aTbcampus);
			}

			if ($this->aTbsetor !== null) {
				if ($this->aTbsetor->isModified() || $this->aTbsetor->isNew()) {
					$affectedRows += $this->aTbsetor->save($con);
				}
				$this->setTbsetor($this->aTbsetor);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TbcursoversaoPeer::ID_VERSAO_CURSO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbcursoversaoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdVersaoCurso($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TbcursoversaoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTbalunomatriculas !== null) {
				foreach ($this->collTbalunomatriculas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbalunobackups !== null) {
				foreach ($this->collTbalunobackups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbfilacalouross !== null) {
				foreach ($this->collTbfilacalouross as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbvagass !== null) {
				foreach ($this->collTbvagass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbloadalunos !== null) {
				foreach ($this->collTbloadalunos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbalunos !== null) {
				foreach ($this->collTbalunos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbcurriculodisciplinass !== null) {
				foreach ($this->collTbcurriculodisciplinass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinarequisitoss !== null) {
				foreach ($this->collTbdisciplinarequisitoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbdisciplinacorequisitoss !== null) {
				foreach ($this->collTbdisciplinacorequisitoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbcoordenadorcursos !== null) {
				foreach ($this->collTbcoordenadorcursos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbformacao !== null) {
				if (!$this->aTbformacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbformacao->getValidationFailures());
				}
			}

			if ($this->aTbcurso !== null) {
				if (!$this->aTbcurso->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcurso->getValidationFailures());
				}
			}

			if ($this->aTbturno !== null) {
				if (!$this->aTbturno->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbturno->getValidationFailures());
				}
			}

			if ($this->aTbcampus !== null) {
				if (!$this->aTbcampus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcampus->getValidationFailures());
				}
			}

			if ($this->aTbsetor !== null) {
				if (!$this->aTbsetor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbsetor->getValidationFailures());
				}
			}


			if (($retval = TbcursoversaoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTbalunomatriculas !== null) {
					foreach ($this->collTbalunomatriculas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbalunobackups !== null) {
					foreach ($this->collTbalunobackups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbfilacalouross !== null) {
					foreach ($this->collTbfilacalouross as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbvagass !== null) {
					foreach ($this->collTbvagass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbloadalunos !== null) {
					foreach ($this->collTbloadalunos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbalunos !== null) {
					foreach ($this->collTbalunos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbcurriculodisciplinass !== null) {
					foreach ($this->collTbcurriculodisciplinass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinarequisitoss !== null) {
					foreach ($this->collTbdisciplinarequisitoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbdisciplinacorequisitoss !== null) {
					foreach ($this->collTbdisciplinacorequisitoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbcoordenadorcursos !== null) {
					foreach ($this->collTbcoordenadorcursos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbcursoversaoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdVersaoCurso();
				break;
			case 1:
				return $this->getIdFormacao();
				break;
			case 2:
				return $this->getCodCurso();
				break;
			case 3:
				return $this->getIdTurno();
				break;
			case 4:
				return $this->getDescricao();
				break;
			case 5:
				return $this->getSituacao();
				break;
			case 6:
				return $this->getDocCriacao();
				break;
			case 7:
				return $this->getDtCriacao();
				break;
			case 8:
				return $this->getDtInicio();
				break;
			case 9:
				return $this->getDtTermino();
				break;
			case 10:
				return $this->getIdCampus();
				break;
			case 11:
				return $this->getIdSetor();
				break;
			case 12:
				return $this->getPrazoMin();
				break;
			case 13:
				return $this->getPrazoMax();
				break;
			case 14:
				return $this->getCredObr();
				break;
			case 15:
				return $this->getCredEletivo();
				break;
			case 16:
				return $this->getCredTotal();
				break;
			case 17:
				return $this->getChObr();
				break;
			case 18:
				return $this->getChEletiva();
				break;
			case 19:
				return $this->getChTotal();
				break;
			case 20:
				return $this->getSemestreInicio();
				break;
			case 21:
				return $this->getCodIntegracao();
				break;
			case 22:
				return $this->getCodIntegracaoTipo();
				break;
			case 23:
				return $this->getCreatedAt();
				break;
			case 24:
				return $this->getUpdatedAt();
				break;
			case 25:
				return $this->getCreatedBy();
				break;
			case 26:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbcursoversaoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdVersaoCurso(),
			$keys[1] => $this->getIdFormacao(),
			$keys[2] => $this->getCodCurso(),
			$keys[3] => $this->getIdTurno(),
			$keys[4] => $this->getDescricao(),
			$keys[5] => $this->getSituacao(),
			$keys[6] => $this->getDocCriacao(),
			$keys[7] => $this->getDtCriacao(),
			$keys[8] => $this->getDtInicio(),
			$keys[9] => $this->getDtTermino(),
			$keys[10] => $this->getIdCampus(),
			$keys[11] => $this->getIdSetor(),
			$keys[12] => $this->getPrazoMin(),
			$keys[13] => $this->getPrazoMax(),
			$keys[14] => $this->getCredObr(),
			$keys[15] => $this->getCredEletivo(),
			$keys[16] => $this->getCredTotal(),
			$keys[17] => $this->getChObr(),
			$keys[18] => $this->getChEletiva(),
			$keys[19] => $this->getChTotal(),
			$keys[20] => $this->getSemestreInicio(),
			$keys[21] => $this->getCodIntegracao(),
			$keys[22] => $this->getCodIntegracaoTipo(),
			$keys[23] => $this->getCreatedAt(),
			$keys[24] => $this->getUpdatedAt(),
			$keys[25] => $this->getCreatedBy(),
			$keys[26] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbcursoversaoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdVersaoCurso($value);
				break;
			case 1:
				$this->setIdFormacao($value);
				break;
			case 2:
				$this->setCodCurso($value);
				break;
			case 3:
				$this->setIdTurno($value);
				break;
			case 4:
				$this->setDescricao($value);
				break;
			case 5:
				$this->setSituacao($value);
				break;
			case 6:
				$this->setDocCriacao($value);
				break;
			case 7:
				$this->setDtCriacao($value);
				break;
			case 8:
				$this->setDtInicio($value);
				break;
			case 9:
				$this->setDtTermino($value);
				break;
			case 10:
				$this->setIdCampus($value);
				break;
			case 11:
				$this->setIdSetor($value);
				break;
			case 12:
				$this->setPrazoMin($value);
				break;
			case 13:
				$this->setPrazoMax($value);
				break;
			case 14:
				$this->setCredObr($value);
				break;
			case 15:
				$this->setCredEletivo($value);
				break;
			case 16:
				$this->setCredTotal($value);
				break;
			case 17:
				$this->setChObr($value);
				break;
			case 18:
				$this->setChEletiva($value);
				break;
			case 19:
				$this->setChTotal($value);
				break;
			case 20:
				$this->setSemestreInicio($value);
				break;
			case 21:
				$this->setCodIntegracao($value);
				break;
			case 22:
				$this->setCodIntegracaoTipo($value);
				break;
			case 23:
				$this->setCreatedAt($value);
				break;
			case 24:
				$this->setUpdatedAt($value);
				break;
			case 25:
				$this->setCreatedBy($value);
				break;
			case 26:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbcursoversaoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdVersaoCurso($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdFormacao($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCodCurso($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdTurno($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDescricao($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSituacao($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDocCriacao($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDtCriacao($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDtInicio($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDtTermino($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIdCampus($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIdSetor($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPrazoMin($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPrazoMax($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCredObr($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCredEletivo($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCredTotal($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setChObr($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setChEletiva($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setChTotal($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSemestreInicio($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCodIntegracao($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCodIntegracaoTipo($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCreatedAt($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setUpdatedAt($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCreatedBy($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setUpdatedBy($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbcursoversaoPeer::ID_VERSAO_CURSO)) $criteria->add(TbcursoversaoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);
		if ($this->isColumnModified(TbcursoversaoPeer::ID_FORMACAO)) $criteria->add(TbcursoversaoPeer::ID_FORMACAO, $this->id_formacao);
		if ($this->isColumnModified(TbcursoversaoPeer::COD_CURSO)) $criteria->add(TbcursoversaoPeer::COD_CURSO, $this->cod_curso);
		if ($this->isColumnModified(TbcursoversaoPeer::ID_TURNO)) $criteria->add(TbcursoversaoPeer::ID_TURNO, $this->id_turno);
		if ($this->isColumnModified(TbcursoversaoPeer::DESCRICAO)) $criteria->add(TbcursoversaoPeer::DESCRICAO, $this->descricao);
		if ($this->isColumnModified(TbcursoversaoPeer::SITUACAO)) $criteria->add(TbcursoversaoPeer::SITUACAO, $this->situacao);
		if ($this->isColumnModified(TbcursoversaoPeer::DOC_CRIACAO)) $criteria->add(TbcursoversaoPeer::DOC_CRIACAO, $this->doc_criacao);
		if ($this->isColumnModified(TbcursoversaoPeer::DT_CRIACAO)) $criteria->add(TbcursoversaoPeer::DT_CRIACAO, $this->dt_criacao);
		if ($this->isColumnModified(TbcursoversaoPeer::DT_INICIO)) $criteria->add(TbcursoversaoPeer::DT_INICIO, $this->dt_inicio);
		if ($this->isColumnModified(TbcursoversaoPeer::DT_TERMINO)) $criteria->add(TbcursoversaoPeer::DT_TERMINO, $this->dt_termino);
		if ($this->isColumnModified(TbcursoversaoPeer::ID_CAMPUS)) $criteria->add(TbcursoversaoPeer::ID_CAMPUS, $this->id_campus);
		if ($this->isColumnModified(TbcursoversaoPeer::ID_SETOR)) $criteria->add(TbcursoversaoPeer::ID_SETOR, $this->id_setor);
		if ($this->isColumnModified(TbcursoversaoPeer::PRAZO_MIN)) $criteria->add(TbcursoversaoPeer::PRAZO_MIN, $this->prazo_min);
		if ($this->isColumnModified(TbcursoversaoPeer::PRAZO_MAX)) $criteria->add(TbcursoversaoPeer::PRAZO_MAX, $this->prazo_max);
		if ($this->isColumnModified(TbcursoversaoPeer::CRED_OBR)) $criteria->add(TbcursoversaoPeer::CRED_OBR, $this->cred_obr);
		if ($this->isColumnModified(TbcursoversaoPeer::CRED_ELETIVO)) $criteria->add(TbcursoversaoPeer::CRED_ELETIVO, $this->cred_eletivo);
		if ($this->isColumnModified(TbcursoversaoPeer::CRED_TOTAL)) $criteria->add(TbcursoversaoPeer::CRED_TOTAL, $this->cred_total);
		if ($this->isColumnModified(TbcursoversaoPeer::CH_OBR)) $criteria->add(TbcursoversaoPeer::CH_OBR, $this->ch_obr);
		if ($this->isColumnModified(TbcursoversaoPeer::CH_ELETIVA)) $criteria->add(TbcursoversaoPeer::CH_ELETIVA, $this->ch_eletiva);
		if ($this->isColumnModified(TbcursoversaoPeer::CH_TOTAL)) $criteria->add(TbcursoversaoPeer::CH_TOTAL, $this->ch_total);
		if ($this->isColumnModified(TbcursoversaoPeer::SEMESTRE_INICIO)) $criteria->add(TbcursoversaoPeer::SEMESTRE_INICIO, $this->semestre_inicio);
		if ($this->isColumnModified(TbcursoversaoPeer::COD_INTEGRACAO)) $criteria->add(TbcursoversaoPeer::COD_INTEGRACAO, $this->cod_integracao);
		if ($this->isColumnModified(TbcursoversaoPeer::COD_INTEGRACAO_TIPO)) $criteria->add(TbcursoversaoPeer::COD_INTEGRACAO_TIPO, $this->cod_integracao_tipo);
		if ($this->isColumnModified(TbcursoversaoPeer::CREATED_AT)) $criteria->add(TbcursoversaoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbcursoversaoPeer::UPDATED_AT)) $criteria->add(TbcursoversaoPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbcursoversaoPeer::CREATED_BY)) $criteria->add(TbcursoversaoPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbcursoversaoPeer::UPDATED_BY)) $criteria->add(TbcursoversaoPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);

		$criteria->add(TbcursoversaoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdVersaoCurso();
	}

	/**
	 * Generic method to set the primary key (id_versao_curso column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdVersaoCurso($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tbcursoversao (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdFormacao($this->id_formacao);

		$copyObj->setCodCurso($this->cod_curso);

		$copyObj->setIdTurno($this->id_turno);

		$copyObj->setDescricao($this->descricao);

		$copyObj->setSituacao($this->situacao);

		$copyObj->setDocCriacao($this->doc_criacao);

		$copyObj->setDtCriacao($this->dt_criacao);

		$copyObj->setDtInicio($this->dt_inicio);

		$copyObj->setDtTermino($this->dt_termino);

		$copyObj->setIdCampus($this->id_campus);

		$copyObj->setIdSetor($this->id_setor);

		$copyObj->setPrazoMin($this->prazo_min);

		$copyObj->setPrazoMax($this->prazo_max);

		$copyObj->setCredObr($this->cred_obr);

		$copyObj->setCredEletivo($this->cred_eletivo);

		$copyObj->setCredTotal($this->cred_total);

		$copyObj->setChObr($this->ch_obr);

		$copyObj->setChEletiva($this->ch_eletiva);

		$copyObj->setChTotal($this->ch_total);

		$copyObj->setSemestreInicio($this->semestre_inicio);

		$copyObj->setCodIntegracao($this->cod_integracao);

		$copyObj->setCodIntegracaoTipo($this->cod_integracao_tipo);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTbalunomatriculas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbalunomatricula($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbalunobackups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbalunobackup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbfilacalouross() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbfilacalouros($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbvagass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbvagas($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbloadalunos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbloadaluno($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbalunos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbaluno($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbcurriculodisciplinass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbcurriculodisciplinas($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinarequisitoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinarequisitos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbdisciplinacorequisitoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbdisciplinacorequisitos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbcoordenadorcursos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbcoordenadorcurso($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdVersaoCurso(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tbcursoversao Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbcursoversaoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbcursoversaoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbformacao object.
	 *
	 * @param      Tbformacao $v
	 * @return     Tbcursoversao The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbformacao(Tbformacao $v = null)
	{
		if ($v === null) {
			$this->setIdFormacao(NULL);
		} else {
			$this->setIdFormacao($v->getIdFormacao());
		}

		$this->aTbformacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbformacao object, it will not be re-added.
		if ($v !== null) {
			$v->addTbcursoversao($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbformacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbformacao The associated Tbformacao object.
	 * @throws     PropelException
	 */
	public function getTbformacao(PropelPDO $con = null)
	{
		if ($this->aTbformacao === null && ($this->id_formacao !== null)) {
			$this->aTbformacao = TbformacaoPeer::retrieveByPk($this->id_formacao);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbformacao->addTbcursoversaos($this);
			 */
		}
		return $this->aTbformacao;
	}

	/**
	 * Declares an association between this object and a Tbcurso object.
	 *
	 * @param      Tbcurso $v
	 * @return     Tbcursoversao The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcurso(Tbcurso $v = null)
	{
		if ($v === null) {
			$this->setCodCurso(NULL);
		} else {
			$this->setCodCurso($v->getCodCurso());
		}

		$this->aTbcurso = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcurso object, it will not be re-added.
		if ($v !== null) {
			$v->addTbcursoversao($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcurso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcurso The associated Tbcurso object.
	 * @throws     PropelException
	 */
	public function getTbcurso(PropelPDO $con = null)
	{
		if ($this->aTbcurso === null && ($this->cod_curso !== null)) {
			$this->aTbcurso = TbcursoPeer::retrieveByPk($this->cod_curso);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcurso->addTbcursoversaos($this);
			 */
		}
		return $this->aTbcurso;
	}

	/**
	 * Declares an association between this object and a Tbturno object.
	 *
	 * @param      Tbturno $v
	 * @return     Tbcursoversao The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbturno(Tbturno $v = null)
	{
		if ($v === null) {
			$this->setIdTurno(NULL);
		} else {
			$this->setIdTurno($v->getIdTurno());
		}

		$this->aTbturno = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbturno object, it will not be re-added.
		if ($v !== null) {
			$v->addTbcursoversao($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbturno object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbturno The associated Tbturno object.
	 * @throws     PropelException
	 */
	public function getTbturno(PropelPDO $con = null)
	{
		if ($this->aTbturno === null && ($this->id_turno !== null)) {
			$this->aTbturno = TbturnoPeer::retrieveByPk($this->id_turno);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbturno->addTbcursoversaos($this);
			 */
		}
		return $this->aTbturno;
	}

	/**
	 * Declares an association between this object and a Tbcampus object.
	 *
	 * @param      Tbcampus $v
	 * @return     Tbcursoversao The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcampus(Tbcampus $v = null)
	{
		if ($v === null) {
			$this->setIdCampus(NULL);
		} else {
			$this->setIdCampus($v->getIdCampus());
		}

		$this->aTbcampus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcampus object, it will not be re-added.
		if ($v !== null) {
			$v->addTbcursoversao($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcampus object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcampus The associated Tbcampus object.
	 * @throws     PropelException
	 */
	public function getTbcampus(PropelPDO $con = null)
	{
		if ($this->aTbcampus === null && ($this->id_campus !== null)) {
			$this->aTbcampus = TbcampusPeer::retrieveByPk($this->id_campus);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcampus->addTbcursoversaos($this);
			 */
		}
		return $this->aTbcampus;
	}

	/**
	 * Declares an association between this object and a Tbsetor object.
	 *
	 * @param      Tbsetor $v
	 * @return     Tbcursoversao The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbsetor(Tbsetor $v = null)
	{
		if ($v === null) {
			$this->setIdSetor(NULL);
		} else {
			$this->setIdSetor($v->getIdSetor());
		}

		$this->aTbsetor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbsetor object, it will not be re-added.
		if ($v !== null) {
			$v->addTbcursoversao($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbsetor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbsetor The associated Tbsetor object.
	 * @throws     PropelException
	 */
	public function getTbsetor(PropelPDO $con = null)
	{
		if ($this->aTbsetor === null && ($this->id_setor !== null)) {
			$this->aTbsetor = TbsetorPeer::retrieveByPk($this->id_setor);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbsetor->addTbcursoversaos($this);
			 */
		}
		return $this->aTbsetor;
	}

	/**
	 * Clears out the collTbalunomatriculas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbalunomatriculas()
	 */
	public function clearTbalunomatriculas()
	{
		$this->collTbalunomatriculas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbalunomatriculas collection (array).
	 *
	 * By default this just sets the collTbalunomatriculas collection to an empty array (like clearcollTbalunomatriculas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbalunomatriculas()
	{
		$this->collTbalunomatriculas = array();
	}

	/**
	 * Gets an array of Tbalunomatricula objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbalunomatriculas from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbalunomatricula[]
	 * @throws     PropelException
	 */
	public function getTbalunomatriculas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
			   $this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbalunomatriculaPeer::addSelectColumns($criteria);
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbalunomatriculaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
					$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;
		return $this->collTbalunomatriculas;
	}

	/**
	 * Returns the number of related Tbalunomatricula objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbalunomatricula objects.
	 * @throws     PropelException
	 */
	public function countTbalunomatriculas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbalunomatriculaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
					$count = TbalunomatriculaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbalunomatriculas);
				}
			} else {
				$count = count($this->collTbalunomatriculas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbalunomatricula object to this object
	 * through the Tbalunomatricula foreign key attribute.
	 *
	 * @param      Tbalunomatricula $l Tbalunomatricula
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbalunomatricula(Tbalunomatricula $l)
	{
		if ($this->collTbalunomatriculas === null) {
			$this->initTbalunomatriculas();
		}
		if (!in_array($l, $this->collTbalunomatriculas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbalunomatriculas, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbnecesespecial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbcidade($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbcidade($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbcidade($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbpais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbpais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbpais($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTblogradouro($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTblogradouro($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTblogradouro($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbtipoingresso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbalunosituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbinstexterna($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbinstexterna($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbinstexterna($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunomatriculas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunomatriculasJoinTbalunoracacor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunomatriculas === null) {
			if ($this->isNew()) {
				$this->collTbalunomatriculas = array();
			} else {

				$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbalunoracacor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunomatriculaPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunomatriculaCriteria) || !$this->lastTbalunomatriculaCriteria->equals($criteria)) {
				$this->collTbalunomatriculas = TbalunomatriculaPeer::doSelectJoinTbalunoracacor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunomatriculaCriteria = $criteria;

		return $this->collTbalunomatriculas;
	}

	/**
	 * Clears out the collTbalunobackups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbalunobackups()
	 */
	public function clearTbalunobackups()
	{
		$this->collTbalunobackups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbalunobackups collection (array).
	 *
	 * By default this just sets the collTbalunobackups collection to an empty array (like clearcollTbalunobackups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbalunobackups()
	{
		$this->collTbalunobackups = array();
	}

	/**
	 * Gets an array of Tbalunobackup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbalunobackups from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbalunobackup[]
	 * @throws     PropelException
	 */
	public function getTbalunobackups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
			   $this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbalunobackupPeer::addSelectColumns($criteria);
				$this->collTbalunobackups = TbalunobackupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbalunobackupPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
					$this->collTbalunobackups = TbalunobackupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;
		return $this->collTbalunobackups;
	}

	/**
	 * Returns the number of related Tbalunobackup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbalunobackup objects.
	 * @throws     PropelException
	 */
	public function countTbalunobackups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbalunobackupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
					$count = TbalunobackupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbalunobackups);
				}
			} else {
				$count = count($this->collTbalunobackups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbalunobackup object to this object
	 * through the Tbalunobackup foreign key attribute.
	 *
	 * @param      Tbalunobackup $l Tbalunobackup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbalunobackup(Tbalunobackup $l)
	{
		if ($this->collTbalunobackups === null) {
			$this->initTbalunobackups();
		}
		if (!in_array($l, $this->collTbalunobackups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbalunobackups, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbnecesespecial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbcidade($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbcidade($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbcidade($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbpais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbpais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbpais($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTblogradouroRelatedByCep($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTblogradouroRelatedByCep($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTblogradouroRelatedByCep($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbtipoingresso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbalunosituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbinstexternaRelatedByIdDestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedByIdDestino($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedByIdDestino($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbinstexternaRelatedById2grau($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedById2grau($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedById2grau($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbinstexternaRelatedById3grau($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedById3grau($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedById3grau($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbinstexternaRelatedByIdTrabalho($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedByIdTrabalho($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbinstexternaRelatedByIdTrabalho($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTblogradouroRelatedByCepTrabalho($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTblogradouroRelatedByCepTrabalho($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTblogradouroRelatedByCepTrabalho($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbalunoracacor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbalunoracacor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbalunoracacor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbreligiao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbreligiao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbreligiao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbnivelinstrucaoRelatedByPaiIdNivelInstrucao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbnivelinstrucaoRelatedByPaiIdNivelInstrucao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbnivelinstrucaoRelatedByPaiIdNivelInstrucao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunobackups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunobackupsJoinTbnivelinstrucaoRelatedByMaeIdNivelInstrucao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunobackups === null) {
			if ($this->isNew()) {
				$this->collTbalunobackups = array();
			} else {

				$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbnivelinstrucaoRelatedByMaeIdNivelInstrucao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunobackupPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunobackupCriteria) || !$this->lastTbalunobackupCriteria->equals($criteria)) {
				$this->collTbalunobackups = TbalunobackupPeer::doSelectJoinTbnivelinstrucaoRelatedByMaeIdNivelInstrucao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunobackupCriteria = $criteria;

		return $this->collTbalunobackups;
	}

	/**
	 * Clears out the collTbfilacalouross collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbfilacalouross()
	 */
	public function clearTbfilacalouross()
	{
		$this->collTbfilacalouross = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbfilacalouross collection (array).
	 *
	 * By default this just sets the collTbfilacalouross collection to an empty array (like clearcollTbfilacalouross());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbfilacalouross()
	{
		$this->collTbfilacalouross = array();
	}

	/**
	 * Gets an array of Tbfilacalouros objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbfilacalouross from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbfilacalouros[]
	 * @throws     PropelException
	 */
	public function getTbfilacalouross($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
			   $this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbfilacalourosPeer::addSelectColumns($criteria);
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbfilacalourosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
					$this->collTbfilacalouross = TbfilacalourosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;
		return $this->collTbfilacalouross;
	}

	/**
	 * Returns the number of related Tbfilacalouros objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbfilacalouros objects.
	 * @throws     PropelException
	 */
	public function countTbfilacalouross(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbfilacalourosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
					$count = TbfilacalourosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbfilacalouross);
				}
			} else {
				$count = count($this->collTbfilacalouross);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbfilacalouros object to this object
	 * through the Tbfilacalouros foreign key attribute.
	 *
	 * @param      Tbfilacalouros $l Tbfilacalouros
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbfilacalouros(Tbfilacalouros $l)
	{
		if ($this->collTbfilacalouross === null) {
			$this->initTbfilacalouross();
		}
		if (!in_array($l, $this->collTbfilacalouross, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbfilacalouross, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbfilacalouross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbfilacalourossJoinTboferta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;

		return $this->collTbfilacalouross;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbfilacalouross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbfilacalourossJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilacalourosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;

		return $this->collTbfilacalouross;
	}

	/**
	 * Clears out the collTbvagass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbvagass()
	 */
	public function clearTbvagass()
	{
		$this->collTbvagass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbvagass collection (array).
	 *
	 * By default this just sets the collTbvagass collection to an empty array (like clearcollTbvagass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbvagass()
	{
		$this->collTbvagass = array();
	}

	/**
	 * Gets an array of Tbvagas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbvagass from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbvagas[]
	 * @throws     PropelException
	 */
	public function getTbvagass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbvagass === null) {
			if ($this->isNew()) {
			   $this->collTbvagass = array();
			} else {

				$criteria->add(TbvagasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbvagasPeer::addSelectColumns($criteria);
				$this->collTbvagass = TbvagasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbvagasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbvagasPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbvagasCriteria) || !$this->lastTbvagasCriteria->equals($criteria)) {
					$this->collTbvagass = TbvagasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbvagasCriteria = $criteria;
		return $this->collTbvagass;
	}

	/**
	 * Returns the number of related Tbvagas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbvagas objects.
	 * @throws     PropelException
	 */
	public function countTbvagass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbvagass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbvagasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbvagasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbvagasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbvagasCriteria) || !$this->lastTbvagasCriteria->equals($criteria)) {
					$count = TbvagasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbvagass);
				}
			} else {
				$count = count($this->collTbvagass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbvagas object to this object
	 * through the Tbvagas foreign key attribute.
	 *
	 * @param      Tbvagas $l Tbvagas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbvagas(Tbvagas $l)
	{
		if ($this->collTbvagass === null) {
			$this->initTbvagass();
		}
		if (!in_array($l, $this->collTbvagass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbvagass, $l);
			$l->setTbcursoversao($this);
		}
	}

	/**
	 * Clears out the collTbloadalunos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbloadalunos()
	 */
	public function clearTbloadalunos()
	{
		$this->collTbloadalunos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbloadalunos collection (array).
	 *
	 * By default this just sets the collTbloadalunos collection to an empty array (like clearcollTbloadalunos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbloadalunos()
	{
		$this->collTbloadalunos = array();
	}

	/**
	 * Gets an array of Tbloadaluno objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbloadalunos from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbloadaluno[]
	 * @throws     PropelException
	 */
	public function getTbloadalunos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbloadalunos === null) {
			if ($this->isNew()) {
			   $this->collTbloadalunos = array();
			} else {

				$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbloadalunoPeer::addSelectColumns($criteria);
				$this->collTbloadalunos = TbloadalunoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbloadalunoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbloadalunoCriteria) || !$this->lastTbloadalunoCriteria->equals($criteria)) {
					$this->collTbloadalunos = TbloadalunoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbloadalunoCriteria = $criteria;
		return $this->collTbloadalunos;
	}

	/**
	 * Returns the number of related Tbloadaluno objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbloadaluno objects.
	 * @throws     PropelException
	 */
	public function countTbloadalunos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbloadalunos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbloadalunoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbloadalunoCriteria) || !$this->lastTbloadalunoCriteria->equals($criteria)) {
					$count = TbloadalunoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbloadalunos);
				}
			} else {
				$count = count($this->collTbloadalunos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbloadaluno object to this object
	 * through the Tbloadaluno foreign key attribute.
	 *
	 * @param      Tbloadaluno $l Tbloadaluno
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbloadaluno(Tbloadaluno $l)
	{
		if ($this->collTbloadalunos === null) {
			$this->initTbloadalunos();
		}
		if (!in_array($l, $this->collTbloadalunos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbloadalunos, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbloadalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbloadalunosJoinTbtipoingresso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbloadalunos === null) {
			if ($this->isNew()) {
				$this->collTbloadalunos = array();
			} else {

				$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbloadalunos = TbloadalunoPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbloadalunoCriteria) || !$this->lastTbloadalunoCriteria->equals($criteria)) {
				$this->collTbloadalunos = TbloadalunoPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbloadalunoCriteria = $criteria;

		return $this->collTbloadalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbloadalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbloadalunosJoinTbalunosituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbloadalunos === null) {
			if ($this->isNew()) {
				$this->collTbloadalunos = array();
			} else {

				$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbloadalunos = TbloadalunoPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbloadalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbloadalunoCriteria) || !$this->lastTbloadalunoCriteria->equals($criteria)) {
				$this->collTbloadalunos = TbloadalunoPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbloadalunoCriteria = $criteria;

		return $this->collTbloadalunos;
	}

	/**
	 * Clears out the collTbalunos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbalunos()
	 */
	public function clearTbalunos()
	{
		$this->collTbalunos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbalunos collection (array).
	 *
	 * By default this just sets the collTbalunos collection to an empty array (like clearcollTbalunos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbalunos()
	{
		$this->collTbalunos = array();
	}

	/**
	 * Gets an array of Tbaluno objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbalunos from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbaluno[]
	 * @throws     PropelException
	 */
	public function getTbalunos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
			   $this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbalunoPeer::addSelectColumns($criteria);
				$this->collTbalunos = TbalunoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbalunoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
					$this->collTbalunos = TbalunoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbalunoCriteria = $criteria;
		return $this->collTbalunos;
	}

	/**
	 * Returns the number of related Tbaluno objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbaluno objects.
	 * @throws     PropelException
	 */
	public function countTbalunos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbalunoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
					$count = TbalunoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbalunos);
				}
			} else {
				$count = count($this->collTbalunos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbaluno object to this object
	 * through the Tbaluno foreign key attribute.
	 *
	 * @param      Tbaluno $l Tbaluno
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbaluno(Tbaluno $l)
	{
		if ($this->collTbalunos === null) {
			$this->initTbalunos();
		}
		if (!in_array($l, $this->collTbalunos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbalunos, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbnecesespecial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbnecesespecial($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbcidade($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbcidade($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbcidade($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbpais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbpais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbpais($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTblogradouroRelatedByCep($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTblogradouroRelatedByCep($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTblogradouroRelatedByCep($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbtipoingresso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbtipoingresso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbalunosituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbalunosituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbinstexternaRelatedByIdDestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedByIdDestino($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedByIdDestino($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbinstexternaRelatedById2grau($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedById2grau($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedById2grau($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbinstexternaRelatedById3grau($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedById3grau($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedById3grau($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbinstexternaRelatedByIdTrabalho($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedByIdTrabalho($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbinstexternaRelatedByIdTrabalho($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTblogradouroRelatedByCepTrabalho($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTblogradouroRelatedByCepTrabalho($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTblogradouroRelatedByCepTrabalho($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbalunos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbalunosJoinTbalunoracacor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbalunos === null) {
			if ($this->isNew()) {
				$this->collTbalunos = array();
			} else {

				$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbalunos = TbalunoPeer::doSelectJoinTbalunoracacor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbalunoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbalunoCriteria) || !$this->lastTbalunoCriteria->equals($criteria)) {
				$this->collTbalunos = TbalunoPeer::doSelectJoinTbalunoracacor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbalunoCriteria = $criteria;

		return $this->collTbalunos;
	}

	/**
	 * Clears out the collTbcurriculodisciplinass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbcurriculodisciplinass()
	 */
	public function clearTbcurriculodisciplinass()
	{
		$this->collTbcurriculodisciplinass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbcurriculodisciplinass collection (array).
	 *
	 * By default this just sets the collTbcurriculodisciplinass collection to an empty array (like clearcollTbcurriculodisciplinass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbcurriculodisciplinass()
	{
		$this->collTbcurriculodisciplinass = array();
	}

	/**
	 * Gets an array of Tbcurriculodisciplinas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbcurriculodisciplinass from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbcurriculodisciplinas[]
	 * @throws     PropelException
	 */
	public function getTbcurriculodisciplinass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
			   $this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbcurriculodisciplinasPeer::addSelectColumns($criteria);
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbcurriculodisciplinasPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
					$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;
		return $this->collTbcurriculodisciplinass;
	}

	/**
	 * Returns the number of related Tbcurriculodisciplinas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbcurriculodisciplinas objects.
	 * @throws     PropelException
	 */
	public function countTbcurriculodisciplinass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbcurriculodisciplinasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
					$count = TbcurriculodisciplinasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbcurriculodisciplinass);
				}
			} else {
				$count = count($this->collTbcurriculodisciplinass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbcurriculodisciplinas object to this object
	 * through the Tbcurriculodisciplinas foreign key attribute.
	 *
	 * @param      Tbcurriculodisciplinas $l Tbcurriculodisciplinas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbcurriculodisciplinas(Tbcurriculodisciplinas $l)
	{
		if ($this->collTbcurriculodisciplinass === null) {
			$this->initTbcurriculodisciplinass();
		}
		if (!in_array($l, $this->collTbcurriculodisciplinass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbcurriculodisciplinass, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbcurriculodisciplinass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbcurriculodisciplinassJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;

		return $this->collTbcurriculodisciplinass;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbcurriculodisciplinass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbcurriculodisciplinassJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;

		return $this->collTbcurriculodisciplinass;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbcurriculodisciplinass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbcurriculodisciplinassJoinTbcarater($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcurriculodisciplinass === null) {
			if ($this->isNew()) {
				$this->collTbcurriculodisciplinass = array();
			} else {

				$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbcarater($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcurriculodisciplinasPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbcurriculodisciplinasCriteria) || !$this->lastTbcurriculodisciplinasCriteria->equals($criteria)) {
				$this->collTbcurriculodisciplinass = TbcurriculodisciplinasPeer::doSelectJoinTbcarater($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcurriculodisciplinasCriteria = $criteria;

		return $this->collTbcurriculodisciplinass;
	}

	/**
	 * Clears out the collTbdisciplinarequisitoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinarequisitoss()
	 */
	public function clearTbdisciplinarequisitoss()
	{
		$this->collTbdisciplinarequisitoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinarequisitoss collection (array).
	 *
	 * By default this just sets the collTbdisciplinarequisitoss collection to an empty array (like clearcollTbdisciplinarequisitoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinarequisitoss()
	{
		$this->collTbdisciplinarequisitoss = array();
	}

	/**
	 * Gets an array of Tbdisciplinarequisitos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbdisciplinarequisitoss from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbdisciplinarequisitos[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinarequisitoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitoss === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinarequisitoss = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbdisciplinarequisitosPeer::addSelectColumns($criteria);
				$this->collTbdisciplinarequisitoss = TbdisciplinarequisitosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbdisciplinarequisitosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinarequisitosCriteria) || !$this->lastTbdisciplinarequisitosCriteria->equals($criteria)) {
					$this->collTbdisciplinarequisitoss = TbdisciplinarequisitosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinarequisitosCriteria = $criteria;
		return $this->collTbdisciplinarequisitoss;
	}

	/**
	 * Returns the number of related Tbdisciplinarequisitos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbdisciplinarequisitos objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinarequisitoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinarequisitoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbdisciplinarequisitosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbdisciplinarequisitosCriteria) || !$this->lastTbdisciplinarequisitosCriteria->equals($criteria)) {
					$count = TbdisciplinarequisitosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinarequisitoss);
				}
			} else {
				$count = count($this->collTbdisciplinarequisitoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbdisciplinarequisitos object to this object
	 * through the Tbdisciplinarequisitos foreign key attribute.
	 *
	 * @param      Tbdisciplinarequisitos $l Tbdisciplinarequisitos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinarequisitos(Tbdisciplinarequisitos $l)
	{
		if ($this->collTbdisciplinarequisitoss === null) {
			$this->initTbdisciplinarequisitoss();
		}
		if (!in_array($l, $this->collTbdisciplinarequisitoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinarequisitoss, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbdisciplinarequisitoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbdisciplinarequisitossJoinTbdisciplinaRelatedByCodDisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitoss === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinarequisitoss = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbdisciplinarequisitoss = TbdisciplinarequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbdisciplinarequisitosCriteria) || !$this->lastTbdisciplinarequisitosCriteria->equals($criteria)) {
				$this->collTbdisciplinarequisitoss = TbdisciplinarequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinarequisitosCriteria = $criteria;

		return $this->collTbdisciplinarequisitoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbdisciplinarequisitoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbdisciplinarequisitossJoinTbdisciplinaRelatedByCodDiscRequisito($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinarequisitoss === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinarequisitoss = array();
			} else {

				$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbdisciplinarequisitoss = TbdisciplinarequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDiscRequisito($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinarequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbdisciplinarequisitosCriteria) || !$this->lastTbdisciplinarequisitosCriteria->equals($criteria)) {
				$this->collTbdisciplinarequisitoss = TbdisciplinarequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDiscRequisito($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinarequisitosCriteria = $criteria;

		return $this->collTbdisciplinarequisitoss;
	}

	/**
	 * Clears out the collTbdisciplinacorequisitoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbdisciplinacorequisitoss()
	 */
	public function clearTbdisciplinacorequisitoss()
	{
		$this->collTbdisciplinacorequisitoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbdisciplinacorequisitoss collection (array).
	 *
	 * By default this just sets the collTbdisciplinacorequisitoss collection to an empty array (like clearcollTbdisciplinacorequisitoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbdisciplinacorequisitoss()
	{
		$this->collTbdisciplinacorequisitoss = array();
	}

	/**
	 * Gets an array of Tbdisciplinacorequisitos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbdisciplinacorequisitoss from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbdisciplinacorequisitos[]
	 * @throws     PropelException
	 */
	public function getTbdisciplinacorequisitoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitoss === null) {
			if ($this->isNew()) {
			   $this->collTbdisciplinacorequisitoss = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbdisciplinacorequisitosPeer::addSelectColumns($criteria);
				$this->collTbdisciplinacorequisitoss = TbdisciplinacorequisitosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbdisciplinacorequisitosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbdisciplinacorequisitosCriteria) || !$this->lastTbdisciplinacorequisitosCriteria->equals($criteria)) {
					$this->collTbdisciplinacorequisitoss = TbdisciplinacorequisitosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbdisciplinacorequisitosCriteria = $criteria;
		return $this->collTbdisciplinacorequisitoss;
	}

	/**
	 * Returns the number of related Tbdisciplinacorequisitos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbdisciplinacorequisitos objects.
	 * @throws     PropelException
	 */
	public function countTbdisciplinacorequisitoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbdisciplinacorequisitoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbdisciplinacorequisitosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbdisciplinacorequisitosCriteria) || !$this->lastTbdisciplinacorequisitosCriteria->equals($criteria)) {
					$count = TbdisciplinacorequisitosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbdisciplinacorequisitoss);
				}
			} else {
				$count = count($this->collTbdisciplinacorequisitoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbdisciplinacorequisitos object to this object
	 * through the Tbdisciplinacorequisitos foreign key attribute.
	 *
	 * @param      Tbdisciplinacorequisitos $l Tbdisciplinacorequisitos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbdisciplinacorequisitos(Tbdisciplinacorequisitos $l)
	{
		if ($this->collTbdisciplinacorequisitoss === null) {
			$this->initTbdisciplinacorequisitoss();
		}
		if (!in_array($l, $this->collTbdisciplinacorequisitoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbdisciplinacorequisitoss, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbdisciplinacorequisitoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbdisciplinacorequisitossJoinTbdisciplinaRelatedByCodDisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitoss === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinacorequisitoss = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbdisciplinacorequisitoss = TbdisciplinacorequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbdisciplinacorequisitosCriteria) || !$this->lastTbdisciplinacorequisitosCriteria->equals($criteria)) {
				$this->collTbdisciplinacorequisitoss = TbdisciplinacorequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinacorequisitosCriteria = $criteria;

		return $this->collTbdisciplinacorequisitoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbdisciplinacorequisitoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbdisciplinacorequisitossJoinTbdisciplinaRelatedByCodDiscCoRequisito($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbdisciplinacorequisitoss === null) {
			if ($this->isNew()) {
				$this->collTbdisciplinacorequisitoss = array();
			} else {

				$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbdisciplinacorequisitoss = TbdisciplinacorequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDiscCoRequisito($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbdisciplinacorequisitosPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbdisciplinacorequisitosCriteria) || !$this->lastTbdisciplinacorequisitosCriteria->equals($criteria)) {
				$this->collTbdisciplinacorequisitoss = TbdisciplinacorequisitosPeer::doSelectJoinTbdisciplinaRelatedByCodDiscCoRequisito($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbdisciplinacorequisitosCriteria = $criteria;

		return $this->collTbdisciplinacorequisitoss;
	}

	/**
	 * Clears out the collTbcoordenadorcursos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbcoordenadorcursos()
	 */
	public function clearTbcoordenadorcursos()
	{
		$this->collTbcoordenadorcursos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbcoordenadorcursos collection (array).
	 *
	 * By default this just sets the collTbcoordenadorcursos collection to an empty array (like clearcollTbcoordenadorcursos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbcoordenadorcursos()
	{
		$this->collTbcoordenadorcursos = array();
	}

	/**
	 * Gets an array of Tbcoordenadorcurso objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao has previously been saved, it will retrieve
	 * related Tbcoordenadorcursos from storage. If this Tbcursoversao is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbcoordenadorcurso[]
	 * @throws     PropelException
	 */
	public function getTbcoordenadorcursos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcoordenadorcursos === null) {
			if ($this->isNew()) {
			   $this->collTbcoordenadorcursos = array();
			} else {

				$criteria->add(TbcoordenadorcursoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbcoordenadorcursoPeer::addSelectColumns($criteria);
				$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbcoordenadorcursoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				TbcoordenadorcursoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbcoordenadorcursoCriteria) || !$this->lastTbcoordenadorcursoCriteria->equals($criteria)) {
					$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbcoordenadorcursoCriteria = $criteria;
		return $this->collTbcoordenadorcursos;
	}

	/**
	 * Returns the number of related Tbcoordenadorcurso objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbcoordenadorcurso objects.
	 * @throws     PropelException
	 */
	public function countTbcoordenadorcursos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbcoordenadorcursos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbcoordenadorcursoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$count = TbcoordenadorcursoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbcoordenadorcursoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				if (!isset($this->lastTbcoordenadorcursoCriteria) || !$this->lastTbcoordenadorcursoCriteria->equals($criteria)) {
					$count = TbcoordenadorcursoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbcoordenadorcursos);
				}
			} else {
				$count = count($this->collTbcoordenadorcursos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbcoordenadorcurso object to this object
	 * through the Tbcoordenadorcurso foreign key attribute.
	 *
	 * @param      Tbcoordenadorcurso $l Tbcoordenadorcurso
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbcoordenadorcurso(Tbcoordenadorcurso $l)
	{
		if ($this->collTbcoordenadorcursos === null) {
			$this->initTbcoordenadorcursos();
		}
		if (!in_array($l, $this->collTbcoordenadorcursos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbcoordenadorcursos, $l);
			$l->setTbcursoversao($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbcursoversao is new, it will return
	 * an empty collection; or if this Tbcursoversao has previously
	 * been saved, it will retrieve related Tbcoordenadorcursos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbcursoversao.
	 */
	public function getTbcoordenadorcursosJoinTbprofessor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbcursoversaoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbcoordenadorcursos === null) {
			if ($this->isNew()) {
				$this->collTbcoordenadorcursos = array();
			} else {

				$criteria->add(TbcoordenadorcursoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

				$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelectJoinTbprofessor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbcoordenadorcursoPeer::ID_VERSAO_CURSO, $this->id_versao_curso);

			if (!isset($this->lastTbcoordenadorcursoCriteria) || !$this->lastTbcoordenadorcursoCriteria->equals($criteria)) {
				$this->collTbcoordenadorcursos = TbcoordenadorcursoPeer::doSelectJoinTbprofessor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbcoordenadorcursoCriteria = $criteria;

		return $this->collTbcoordenadorcursos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTbalunomatriculas) {
				foreach ((array) $this->collTbalunomatriculas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbalunobackups) {
				foreach ((array) $this->collTbalunobackups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbfilacalouross) {
				foreach ((array) $this->collTbfilacalouross as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbvagass) {
				foreach ((array) $this->collTbvagass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbloadalunos) {
				foreach ((array) $this->collTbloadalunos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbalunos) {
				foreach ((array) $this->collTbalunos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbcurriculodisciplinass) {
				foreach ((array) $this->collTbcurriculodisciplinass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinarequisitoss) {
				foreach ((array) $this->collTbdisciplinarequisitoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbdisciplinacorequisitoss) {
				foreach ((array) $this->collTbdisciplinacorequisitoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbcoordenadorcursos) {
				foreach ((array) $this->collTbcoordenadorcursos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTbalunomatriculas = null;
		$this->collTbalunobackups = null;
		$this->collTbfilacalouross = null;
		$this->collTbvagass = null;
		$this->collTbloadalunos = null;
		$this->collTbalunos = null;
		$this->collTbcurriculodisciplinass = null;
		$this->collTbdisciplinarequisitoss = null;
		$this->collTbdisciplinacorequisitoss = null;
		$this->collTbcoordenadorcursos = null;
			$this->aTbformacao = null;
			$this->aTbcurso = null;
			$this->aTbturno = null;
			$this->aTbcampus = null;
			$this->aTbsetor = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTbcursoversao:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTbcursoversao::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTbcursoversao
