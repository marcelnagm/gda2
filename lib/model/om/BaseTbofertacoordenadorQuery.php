<?php


/**
 * Base class that represents a query for the 'tbofertacoordenador' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:39 2013
 *
 * @method TbofertacoordenadorQuery orderByIdOfertaCoordenador($order = Criteria::ASC) Order by the id_oferta_coordenador column
 * @method TbofertacoordenadorQuery orderByMatriculaProf($order = Criteria::ASC) Order by the matricula_prof column
 * @method TbofertacoordenadorQuery orderByIdOferta($order = Criteria::ASC) Order by the id_oferta column
 * @method TbofertacoordenadorQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbofertacoordenadorQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbofertacoordenadorQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbofertacoordenadorQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbofertacoordenadorQuery groupByIdOfertaCoordenador() Group by the id_oferta_coordenador column
 * @method TbofertacoordenadorQuery groupByMatriculaProf() Group by the matricula_prof column
 * @method TbofertacoordenadorQuery groupByIdOferta() Group by the id_oferta column
 * @method TbofertacoordenadorQuery groupByCreatedAt() Group by the created_at column
 * @method TbofertacoordenadorQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbofertacoordenadorQuery groupByCreatedBy() Group by the created_by column
 * @method TbofertacoordenadorQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbofertacoordenadorQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbofertacoordenadorQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbofertacoordenadorQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbofertacoordenadorQuery leftJoinTbprofessor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbprofessor relation
 * @method TbofertacoordenadorQuery rightJoinTbprofessor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbprofessor relation
 * @method TbofertacoordenadorQuery innerJoinTbprofessor($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbprofessor relation
 *
 * @method TbofertacoordenadorQuery leftJoinTboferta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tboferta relation
 * @method TbofertacoordenadorQuery rightJoinTboferta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tboferta relation
 * @method TbofertacoordenadorQuery innerJoinTboferta($relationAlias = null) Adds a INNER JOIN clause to the query using the Tboferta relation
 *
 * @method Tbofertacoordenador findOne(PropelPDO $con = null) Return the first Tbofertacoordenador matching the query
 * @method Tbofertacoordenador findOneOrCreate(PropelPDO $con = null) Return the first Tbofertacoordenador matching the query, or a new Tbofertacoordenador object populated from the query conditions when no match is found
 *
 * @method Tbofertacoordenador findOneByIdOfertaCoordenador(int $id_oferta_coordenador) Return the first Tbofertacoordenador filtered by the id_oferta_coordenador column
 * @method Tbofertacoordenador findOneByMatriculaProf(int $matricula_prof) Return the first Tbofertacoordenador filtered by the matricula_prof column
 * @method Tbofertacoordenador findOneByIdOferta(int $id_oferta) Return the first Tbofertacoordenador filtered by the id_oferta column
 * @method Tbofertacoordenador findOneByCreatedAt(string $created_at) Return the first Tbofertacoordenador filtered by the created_at column
 * @method Tbofertacoordenador findOneByUpdatedAt(string $updated_at) Return the first Tbofertacoordenador filtered by the updated_at column
 * @method Tbofertacoordenador findOneByCreatedBy(string $created_by) Return the first Tbofertacoordenador filtered by the created_by column
 * @method Tbofertacoordenador findOneByUpdatedBy(string $updated_by) Return the first Tbofertacoordenador filtered by the updated_by column
 *
 * @method array findByIdOfertaCoordenador(int $id_oferta_coordenador) Return Tbofertacoordenador objects filtered by the id_oferta_coordenador column
 * @method array findByMatriculaProf(int $matricula_prof) Return Tbofertacoordenador objects filtered by the matricula_prof column
 * @method array findByIdOferta(int $id_oferta) Return Tbofertacoordenador objects filtered by the id_oferta column
 * @method array findByCreatedAt(string $created_at) Return Tbofertacoordenador objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbofertacoordenador objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbofertacoordenador objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbofertacoordenador objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbofertacoordenadorQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbofertacoordenadorQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbofertacoordenador', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbofertacoordenadorQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbofertacoordenadorQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbofertacoordenadorQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbofertacoordenadorQuery) {
            return $criteria;
        }
        $query = new TbofertacoordenadorQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbofertacoordenador|Tbofertacoordenador[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbofertacoordenadorPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbofertacoordenadorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbofertacoordenador A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_OFERTA_COORDENADOR, MATRICULA_PROF, ID_OFERTA, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbofertacoordenador WHERE ID_OFERTA_COORDENADOR = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbofertacoordenador();
            $obj->hydrate($row);
            TbofertacoordenadorPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbofertacoordenador|Tbofertacoordenador[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbofertacoordenador[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA_COORDENADOR, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA_COORDENADOR, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_oferta_coordenador column
     *
     * Example usage:
     * <code>
     * $query->filterByIdOfertaCoordenador(1234); // WHERE id_oferta_coordenador = 1234
     * $query->filterByIdOfertaCoordenador(array(12, 34)); // WHERE id_oferta_coordenador IN (12, 34)
     * $query->filterByIdOfertaCoordenador(array('min' => 12)); // WHERE id_oferta_coordenador > 12
     * </code>
     *
     * @param     mixed $idOfertaCoordenador The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByIdOfertaCoordenador($idOfertaCoordenador = null, $comparison = null)
    {
        if (is_array($idOfertaCoordenador) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA_COORDENADOR, $idOfertaCoordenador, $comparison);
    }

    /**
     * Filter the query on the matricula_prof column
     *
     * Example usage:
     * <code>
     * $query->filterByMatriculaProf(1234); // WHERE matricula_prof = 1234
     * $query->filterByMatriculaProf(array(12, 34)); // WHERE matricula_prof IN (12, 34)
     * $query->filterByMatriculaProf(array('min' => 12)); // WHERE matricula_prof > 12
     * </code>
     *
     * @see       filterByTbprofessor()
     *
     * @param     mixed $matriculaProf The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByMatriculaProf($matriculaProf = null, $comparison = null)
    {
        if (is_array($matriculaProf)) {
            $useMinMax = false;
            if (isset($matriculaProf['min'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::MATRICULA_PROF, $matriculaProf['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matriculaProf['max'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::MATRICULA_PROF, $matriculaProf['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::MATRICULA_PROF, $matriculaProf, $comparison);
    }

    /**
     * Filter the query on the id_oferta column
     *
     * Example usage:
     * <code>
     * $query->filterByIdOferta(1234); // WHERE id_oferta = 1234
     * $query->filterByIdOferta(array(12, 34)); // WHERE id_oferta IN (12, 34)
     * $query->filterByIdOferta(array('min' => 12)); // WHERE id_oferta > 12
     * </code>
     *
     * @see       filterByTboferta()
     *
     * @param     mixed $idOferta The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByIdOferta($idOferta = null, $comparison = null)
    {
        if (is_array($idOferta)) {
            $useMinMax = false;
            if (isset($idOferta['min'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA, $idOferta['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idOferta['max'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA, $idOferta['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA, $idOferta, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbofertacoordenadorPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbofertacoordenadorPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbprofessor object
     *
     * @param   Tbprofessor|PropelObjectCollection $tbprofessor The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertacoordenadorQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbprofessor($tbprofessor, $comparison = null)
    {
        if ($tbprofessor instanceof Tbprofessor) {
            return $this
                ->addUsingAlias(TbofertacoordenadorPeer::MATRICULA_PROF, $tbprofessor->getMatriculaProf(), $comparison);
        } elseif ($tbprofessor instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertacoordenadorPeer::MATRICULA_PROF, $tbprofessor->toKeyValue('PrimaryKey', 'MatriculaProf'), $comparison);
        } else {
            throw new PropelException('filterByTbprofessor() only accepts arguments of type Tbprofessor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbprofessor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function joinTbprofessor($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbprofessor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbprofessor');
        }

        return $this;
    }

    /**
     * Use the Tbprofessor relation Tbprofessor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbprofessorQuery A secondary query class using the current class as primary query
     */
    public function useTbprofessorQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbprofessor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbprofessor', 'TbprofessorQuery');
    }

    /**
     * Filter the query by a related Tboferta object
     *
     * @param   Tboferta|PropelObjectCollection $tboferta The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbofertacoordenadorQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTboferta($tboferta, $comparison = null)
    {
        if ($tboferta instanceof Tboferta) {
            return $this
                ->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA, $tboferta->getIdOferta(), $comparison);
        } elseif ($tboferta instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA, $tboferta->toKeyValue('PrimaryKey', 'IdOferta'), $comparison);
        } else {
            throw new PropelException('filterByTboferta() only accepts arguments of type Tboferta or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tboferta relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function joinTboferta($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tboferta');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tboferta');
        }

        return $this;
    }

    /**
     * Use the Tboferta relation Tboferta object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbofertaQuery A secondary query class using the current class as primary query
     */
    public function useTbofertaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTboferta($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tboferta', 'TbofertaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbofertacoordenador $tbofertacoordenador Object to remove from the list of results
     *
     * @return TbofertacoordenadorQuery The current query, for fluid interface
     */
    public function prune($tbofertacoordenador = null)
    {
        if ($tbofertacoordenador) {
            $this->addUsingAlias(TbofertacoordenadorPeer::ID_OFERTA_COORDENADOR, $tbofertacoordenador->getIdOfertaCoordenador(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
