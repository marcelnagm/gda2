<?php


/**
 * Base class that represents a query for the 'tbnivelinstrucao' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:36 2013
 *
 * @method TbnivelinstrucaoQuery orderByIdNivelInstrucao($order = Criteria::ASC) Order by the id_nivel_instrucao column
 * @method TbnivelinstrucaoQuery orderByDescricao($order = Criteria::ASC) Order by the descricao column
 *
 * @method TbnivelinstrucaoQuery groupByIdNivelInstrucao() Group by the id_nivel_instrucao column
 * @method TbnivelinstrucaoQuery groupByDescricao() Group by the descricao column
 *
 * @method TbnivelinstrucaoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbnivelinstrucaoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbnivelinstrucaoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbnivelinstrucaoQuery leftJoinTbalunobackupRelatedByPaiIdNivelInstrucao($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunobackupRelatedByPaiIdNivelInstrucao relation
 * @method TbnivelinstrucaoQuery rightJoinTbalunobackupRelatedByPaiIdNivelInstrucao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunobackupRelatedByPaiIdNivelInstrucao relation
 * @method TbnivelinstrucaoQuery innerJoinTbalunobackupRelatedByPaiIdNivelInstrucao($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunobackupRelatedByPaiIdNivelInstrucao relation
 *
 * @method TbnivelinstrucaoQuery leftJoinTbalunobackupRelatedByMaeIdNivelInstrucao($relationAlias = null) Adds a LEFT JOIN clause to the query using the TbalunobackupRelatedByMaeIdNivelInstrucao relation
 * @method TbnivelinstrucaoQuery rightJoinTbalunobackupRelatedByMaeIdNivelInstrucao($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TbalunobackupRelatedByMaeIdNivelInstrucao relation
 * @method TbnivelinstrucaoQuery innerJoinTbalunobackupRelatedByMaeIdNivelInstrucao($relationAlias = null) Adds a INNER JOIN clause to the query using the TbalunobackupRelatedByMaeIdNivelInstrucao relation
 *
 * @method Tbnivelinstrucao findOne(PropelPDO $con = null) Return the first Tbnivelinstrucao matching the query
 * @method Tbnivelinstrucao findOneOrCreate(PropelPDO $con = null) Return the first Tbnivelinstrucao matching the query, or a new Tbnivelinstrucao object populated from the query conditions when no match is found
 *
 * @method Tbnivelinstrucao findOneByIdNivelInstrucao(int $id_nivel_instrucao) Return the first Tbnivelinstrucao filtered by the id_nivel_instrucao column
 * @method Tbnivelinstrucao findOneByDescricao(string $descricao) Return the first Tbnivelinstrucao filtered by the descricao column
 *
 * @method array findByIdNivelInstrucao(int $id_nivel_instrucao) Return Tbnivelinstrucao objects filtered by the id_nivel_instrucao column
 * @method array findByDescricao(string $descricao) Return Tbnivelinstrucao objects filtered by the descricao column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbnivelinstrucaoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbnivelinstrucaoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbnivelinstrucao', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbnivelinstrucaoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbnivelinstrucaoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbnivelinstrucaoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbnivelinstrucaoQuery) {
            return $criteria;
        }
        $query = new TbnivelinstrucaoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbnivelinstrucao|Tbnivelinstrucao[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbnivelinstrucaoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbnivelinstrucaoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbnivelinstrucao A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_NIVEL_INSTRUCAO, DESCRICAO FROM tbnivelinstrucao WHERE ID_NIVEL_INSTRUCAO = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbnivelinstrucao();
            $obj->hydrate($row);
            TbnivelinstrucaoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbnivelinstrucao|Tbnivelinstrucao[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbnivelinstrucao[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_nivel_instrucao column
     *
     * Example usage:
     * <code>
     * $query->filterByIdNivelInstrucao(1234); // WHERE id_nivel_instrucao = 1234
     * $query->filterByIdNivelInstrucao(array(12, 34)); // WHERE id_nivel_instrucao IN (12, 34)
     * $query->filterByIdNivelInstrucao(array('min' => 12)); // WHERE id_nivel_instrucao > 12
     * </code>
     *
     * @param     mixed $idNivelInstrucao The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function filterByIdNivelInstrucao($idNivelInstrucao = null, $comparison = null)
    {
        if (is_array($idNivelInstrucao) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $idNivelInstrucao, $comparison);
    }

    /**
     * Filter the query on the descricao column
     *
     * Example usage:
     * <code>
     * $query->filterByDescricao('fooValue');   // WHERE descricao = 'fooValue'
     * $query->filterByDescricao('%fooValue%'); // WHERE descricao LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descricao The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function filterByDescricao($descricao = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descricao)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descricao)) {
                $descricao = str_replace('*', '%', $descricao);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbnivelinstrucaoPeer::DESCRICAO, $descricao, $comparison);
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbnivelinstrucaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackupRelatedByPaiIdNivelInstrucao($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $tbalunobackup->getPaiIdNivelInstrucao(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupRelatedByPaiIdNivelInstrucaoQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackupRelatedByPaiIdNivelInstrucao() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunobackupRelatedByPaiIdNivelInstrucao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function joinTbalunobackupRelatedByPaiIdNivelInstrucao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunobackupRelatedByPaiIdNivelInstrucao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunobackupRelatedByPaiIdNivelInstrucao');
        }

        return $this;
    }

    /**
     * Use the TbalunobackupRelatedByPaiIdNivelInstrucao relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupRelatedByPaiIdNivelInstrucaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunobackupRelatedByPaiIdNivelInstrucao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunobackupRelatedByPaiIdNivelInstrucao', 'TbalunobackupQuery');
    }

    /**
     * Filter the query by a related Tbalunobackup object
     *
     * @param   Tbalunobackup|PropelObjectCollection $tbalunobackup  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbnivelinstrucaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbalunobackupRelatedByMaeIdNivelInstrucao($tbalunobackup, $comparison = null)
    {
        if ($tbalunobackup instanceof Tbalunobackup) {
            return $this
                ->addUsingAlias(TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $tbalunobackup->getMaeIdNivelInstrucao(), $comparison);
        } elseif ($tbalunobackup instanceof PropelObjectCollection) {
            return $this
                ->useTbalunobackupRelatedByMaeIdNivelInstrucaoQuery()
                ->filterByPrimaryKeys($tbalunobackup->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByTbalunobackupRelatedByMaeIdNivelInstrucao() only accepts arguments of type Tbalunobackup or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TbalunobackupRelatedByMaeIdNivelInstrucao relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function joinTbalunobackupRelatedByMaeIdNivelInstrucao($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TbalunobackupRelatedByMaeIdNivelInstrucao');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TbalunobackupRelatedByMaeIdNivelInstrucao');
        }

        return $this;
    }

    /**
     * Use the TbalunobackupRelatedByMaeIdNivelInstrucao relation Tbalunobackup object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbalunobackupQuery A secondary query class using the current class as primary query
     */
    public function useTbalunobackupRelatedByMaeIdNivelInstrucaoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbalunobackupRelatedByMaeIdNivelInstrucao($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TbalunobackupRelatedByMaeIdNivelInstrucao', 'TbalunobackupQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbnivelinstrucao $tbnivelinstrucao Object to remove from the list of results
     *
     * @return TbnivelinstrucaoQuery The current query, for fluid interface
     */
    public function prune($tbnivelinstrucao = null)
    {
        if ($tbnivelinstrucao) {
            $this->addUsingAlias(TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $tbnivelinstrucao->getIdNivelInstrucao(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
