<?php


/**
 * Base class that represents a query for the 'tbvalidacao' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:37 2013
 *
 * @method TbvalidacaoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method TbvalidacaoQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbvalidacaoQuery orderByNumAuth($order = Criteria::ASC) Order by the num_auth column
 * @method TbvalidacaoQuery orderByData($order = Criteria::ASC) Order by the data column
 * @method TbvalidacaoQuery orderByHora($order = Criteria::ASC) Order by the hora column
 * @method TbvalidacaoQuery orderByIdTipo($order = Criteria::ASC) Order by the id_tipo column
 * @method TbvalidacaoQuery orderByAtivo($order = Criteria::ASC) Order by the ativo column
 * @method TbvalidacaoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbvalidacaoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbvalidacaoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbvalidacaoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 *
 * @method TbvalidacaoQuery groupById() Group by the id column
 * @method TbvalidacaoQuery groupByMatricula() Group by the matricula column
 * @method TbvalidacaoQuery groupByNumAuth() Group by the num_auth column
 * @method TbvalidacaoQuery groupByData() Group by the data column
 * @method TbvalidacaoQuery groupByHora() Group by the hora column
 * @method TbvalidacaoQuery groupByIdTipo() Group by the id_tipo column
 * @method TbvalidacaoQuery groupByAtivo() Group by the ativo column
 * @method TbvalidacaoQuery groupByCreatedAt() Group by the created_at column
 * @method TbvalidacaoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbvalidacaoQuery groupByCreatedBy() Group by the created_by column
 * @method TbvalidacaoQuery groupByUpdatedBy() Group by the updated_by column
 *
 * @method TbvalidacaoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbvalidacaoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbvalidacaoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method TbvalidacaoQuery leftJoinTbvalidacaotipo($relationAlias = null) Adds a LEFT JOIN clause to the query using the Tbvalidacaotipo relation
 * @method TbvalidacaoQuery rightJoinTbvalidacaotipo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Tbvalidacaotipo relation
 * @method TbvalidacaoQuery innerJoinTbvalidacaotipo($relationAlias = null) Adds a INNER JOIN clause to the query using the Tbvalidacaotipo relation
 *
 * @method Tbvalidacao findOne(PropelPDO $con = null) Return the first Tbvalidacao matching the query
 * @method Tbvalidacao findOneOrCreate(PropelPDO $con = null) Return the first Tbvalidacao matching the query, or a new Tbvalidacao object populated from the query conditions when no match is found
 *
 * @method Tbvalidacao findOneById(int $id) Return the first Tbvalidacao filtered by the id column
 * @method Tbvalidacao findOneByMatricula(string $matricula) Return the first Tbvalidacao filtered by the matricula column
 * @method Tbvalidacao findOneByNumAuth(string $num_auth) Return the first Tbvalidacao filtered by the num_auth column
 * @method Tbvalidacao findOneByData(string $data) Return the first Tbvalidacao filtered by the data column
 * @method Tbvalidacao findOneByHora(string $hora) Return the first Tbvalidacao filtered by the hora column
 * @method Tbvalidacao findOneByIdTipo(int $id_tipo) Return the first Tbvalidacao filtered by the id_tipo column
 * @method Tbvalidacao findOneByAtivo(int $ativo) Return the first Tbvalidacao filtered by the ativo column
 * @method Tbvalidacao findOneByCreatedAt(string $created_at) Return the first Tbvalidacao filtered by the created_at column
 * @method Tbvalidacao findOneByUpdatedAt(string $updated_at) Return the first Tbvalidacao filtered by the updated_at column
 * @method Tbvalidacao findOneByCreatedBy(string $created_by) Return the first Tbvalidacao filtered by the created_by column
 * @method Tbvalidacao findOneByUpdatedBy(string $updated_by) Return the first Tbvalidacao filtered by the updated_by column
 *
 * @method array findById(int $id) Return Tbvalidacao objects filtered by the id column
 * @method array findByMatricula(string $matricula) Return Tbvalidacao objects filtered by the matricula column
 * @method array findByNumAuth(string $num_auth) Return Tbvalidacao objects filtered by the num_auth column
 * @method array findByData(string $data) Return Tbvalidacao objects filtered by the data column
 * @method array findByHora(string $hora) Return Tbvalidacao objects filtered by the hora column
 * @method array findByIdTipo(int $id_tipo) Return Tbvalidacao objects filtered by the id_tipo column
 * @method array findByAtivo(int $ativo) Return Tbvalidacao objects filtered by the ativo column
 * @method array findByCreatedAt(string $created_at) Return Tbvalidacao objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbvalidacao objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbvalidacao objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbvalidacao objects filtered by the updated_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbvalidacaoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbvalidacaoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbvalidacao', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbvalidacaoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbvalidacaoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbvalidacaoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbvalidacaoQuery) {
            return $criteria;
        }
        $query = new TbvalidacaoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbvalidacao|Tbvalidacao[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbvalidacaoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbvalidacaoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbvalidacao A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID, MATRICULA, NUM_AUTH, DATA, HORA, ID_TIPO, ATIVO, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM tbvalidacao WHERE ID = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbvalidacao();
            $obj->hydrate($row);
            TbvalidacaoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbvalidacao|Tbvalidacao[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbvalidacao[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbvalidacaoPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbvalidacaoPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbvalidacaoPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula('fooValue');   // WHERE matricula = 'fooValue'
     * $query->filterByMatricula('%fooValue%'); // WHERE matricula LIKE '%fooValue%'
     * </code>
     *
     * @param     string $matricula The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($matricula)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $matricula)) {
                $matricula = str_replace('*', '%', $matricula);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the num_auth column
     *
     * Example usage:
     * <code>
     * $query->filterByNumAuth('fooValue');   // WHERE num_auth = 'fooValue'
     * $query->filterByNumAuth('%fooValue%'); // WHERE num_auth LIKE '%fooValue%'
     * </code>
     *
     * @param     string $numAuth The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByNumAuth($numAuth = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($numAuth)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $numAuth)) {
                $numAuth = str_replace('*', '%', $numAuth);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::NUM_AUTH, $numAuth, $comparison);
    }

    /**
     * Filter the query on the data column
     *
     * Example usage:
     * <code>
     * $query->filterByData('2011-03-14'); // WHERE data = '2011-03-14'
     * $query->filterByData('now'); // WHERE data = '2011-03-14'
     * $query->filterByData(array('max' => 'yesterday')); // WHERE data > '2011-03-13'
     * </code>
     *
     * @param     mixed $data The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByData($data = null, $comparison = null)
    {
        if (is_array($data)) {
            $useMinMax = false;
            if (isset($data['min'])) {
                $this->addUsingAlias(TbvalidacaoPeer::DATA, $data['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($data['max'])) {
                $this->addUsingAlias(TbvalidacaoPeer::DATA, $data['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::DATA, $data, $comparison);
    }

    /**
     * Filter the query on the hora column
     *
     * Example usage:
     * <code>
     * $query->filterByHora('2011-03-14'); // WHERE hora = '2011-03-14'
     * $query->filterByHora('now'); // WHERE hora = '2011-03-14'
     * $query->filterByHora(array('max' => 'yesterday')); // WHERE hora > '2011-03-13'
     * </code>
     *
     * @param     mixed $hora The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByHora($hora = null, $comparison = null)
    {
        if (is_array($hora)) {
            $useMinMax = false;
            if (isset($hora['min'])) {
                $this->addUsingAlias(TbvalidacaoPeer::HORA, $hora['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hora['max'])) {
                $this->addUsingAlias(TbvalidacaoPeer::HORA, $hora['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::HORA, $hora, $comparison);
    }

    /**
     * Filter the query on the id_tipo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdTipo(1234); // WHERE id_tipo = 1234
     * $query->filterByIdTipo(array(12, 34)); // WHERE id_tipo IN (12, 34)
     * $query->filterByIdTipo(array('min' => 12)); // WHERE id_tipo > 12
     * </code>
     *
     * @see       filterByTbvalidacaotipo()
     *
     * @param     mixed $idTipo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByIdTipo($idTipo = null, $comparison = null)
    {
        if (is_array($idTipo)) {
            $useMinMax = false;
            if (isset($idTipo['min'])) {
                $this->addUsingAlias(TbvalidacaoPeer::ID_TIPO, $idTipo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($idTipo['max'])) {
                $this->addUsingAlias(TbvalidacaoPeer::ID_TIPO, $idTipo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::ID_TIPO, $idTipo, $comparison);
    }

    /**
     * Filter the query on the ativo column
     *
     * Example usage:
     * <code>
     * $query->filterByAtivo(1234); // WHERE ativo = 1234
     * $query->filterByAtivo(array(12, 34)); // WHERE ativo IN (12, 34)
     * $query->filterByAtivo(array('min' => 12)); // WHERE ativo > 12
     * </code>
     *
     * @param     mixed $ativo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByAtivo($ativo = null, $comparison = null)
    {
        if (is_array($ativo)) {
            $useMinMax = false;
            if (isset($ativo['min'])) {
                $this->addUsingAlias(TbvalidacaoPeer::ATIVO, $ativo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ativo['max'])) {
                $this->addUsingAlias(TbvalidacaoPeer::ATIVO, $ativo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::ATIVO, $ativo, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbvalidacaoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbvalidacaoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbvalidacaoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbvalidacaoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbvalidacaoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query by a related Tbvalidacaotipo object
     *
     * @param   Tbvalidacaotipo|PropelObjectCollection $tbvalidacaotipo The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   TbvalidacaoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTbvalidacaotipo($tbvalidacaotipo, $comparison = null)
    {
        if ($tbvalidacaotipo instanceof Tbvalidacaotipo) {
            return $this
                ->addUsingAlias(TbvalidacaoPeer::ID_TIPO, $tbvalidacaotipo->getId(), $comparison);
        } elseif ($tbvalidacaotipo instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(TbvalidacaoPeer::ID_TIPO, $tbvalidacaotipo->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByTbvalidacaotipo() only accepts arguments of type Tbvalidacaotipo or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Tbvalidacaotipo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function joinTbvalidacaotipo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Tbvalidacaotipo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Tbvalidacaotipo');
        }

        return $this;
    }

    /**
     * Use the Tbvalidacaotipo relation Tbvalidacaotipo object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TbvalidacaotipoQuery A secondary query class using the current class as primary query
     */
    public function useTbvalidacaotipoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinTbvalidacaotipo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Tbvalidacaotipo', 'TbvalidacaotipoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Tbvalidacao $tbvalidacao Object to remove from the list of results
     *
     * @return TbvalidacaoQuery The current query, for fluid interface
     */
    public function prune($tbvalidacao = null)
    {
        if ($tbvalidacao) {
            $this->addUsingAlias(TbvalidacaoPeer::ID, $tbvalidacao->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
