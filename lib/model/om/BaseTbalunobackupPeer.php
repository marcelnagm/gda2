<?php

/**
 * Base static class for performing query and update operations on the 'tbalunobackup' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:45 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbalunobackupPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'tbalunobackup';

	/** the related Propel class for this table */
	const OM_CLASS = 'Tbalunobackup';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Tbalunobackup';

	/** the related TableMap class for this table */
	const TM_CLASS = 'TbalunobackupTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 66;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 1;

	/** the column name for the ID_PESSOA field */
	const ID_PESSOA = 'tbalunobackup.ID_PESSOA';

	/** the column name for the MATRICULA field */
	const MATRICULA = 'tbalunobackup.MATRICULA';

	/** the column name for the NOME field */
	const NOME = 'tbalunobackup.NOME';

	/** the column name for the CELULAR field */
	const CELULAR = 'tbalunobackup.CELULAR';

	/** the column name for the EMAIL field */
	const EMAIL = 'tbalunobackup.EMAIL';

	/** the column name for the FONE_RESIDENCIAL field */
	const FONE_RESIDENCIAL = 'tbalunobackup.FONE_RESIDENCIAL';

	/** the column name for the FOTO field */
	const FOTO = 'tbalunobackup.FOTO';

	/** the column name for the ID_NECES_ESPECIAL field */
	const ID_NECES_ESPECIAL = 'tbalunobackup.ID_NECES_ESPECIAL';

	/** the column name for the DT_NASCIMENTO field */
	const DT_NASCIMENTO = 'tbalunobackup.DT_NASCIMENTO';

	/** the column name for the NATURALIDADE field */
	const NATURALIDADE = 'tbalunobackup.NATURALIDADE';

	/** the column name for the UF_NASCIMENTO field */
	const UF_NASCIMENTO = 'tbalunobackup.UF_NASCIMENTO';

	/** the column name for the NACIONALIDADE field */
	const NACIONALIDADE = 'tbalunobackup.NACIONALIDADE';

	/** the column name for the SEXO field */
	const SEXO = 'tbalunobackup.SEXO';

	/** the column name for the ESTADO_CIVIL field */
	const ESTADO_CIVIL = 'tbalunobackup.ESTADO_CIVIL';

	/** the column name for the TITULO field */
	const TITULO = 'tbalunobackup.TITULO';

	/** the column name for the TITULO_ZONA field */
	const TITULO_ZONA = 'tbalunobackup.TITULO_ZONA';

	/** the column name for the TITULO_SECAO field */
	const TITULO_SECAO = 'tbalunobackup.TITULO_SECAO';

	/** the column name for the RG field */
	const RG = 'tbalunobackup.RG';

	/** the column name for the RG_DT_EXPED field */
	const RG_DT_EXPED = 'tbalunobackup.RG_DT_EXPED';

	/** the column name for the RG_ORG_EXPED field */
	const RG_ORG_EXPED = 'tbalunobackup.RG_ORG_EXPED';

	/** the column name for the CPF field */
	const CPF = 'tbalunobackup.CPF';

	/** the column name for the RESERVISTA field */
	const RESERVISTA = 'tbalunobackup.RESERVISTA';

	/** the column name for the PAI field */
	const PAI = 'tbalunobackup.PAI';

	/** the column name for the MAE field */
	const MAE = 'tbalunobackup.MAE';

	/** the column name for the CEP field */
	const CEP = 'tbalunobackup.CEP';

	/** the column name for the NUMERO field */
	const NUMERO = 'tbalunobackup.NUMERO';

	/** the column name for the COMPLEMENTO field */
	const COMPLEMENTO = 'tbalunobackup.COMPLEMENTO';

	/** the column name for the ID_VERSAO_CURSO field */
	const ID_VERSAO_CURSO = 'tbalunobackup.ID_VERSAO_CURSO';

	/** the column name for the ID_TIPO_INGRESSO field */
	const ID_TIPO_INGRESSO = 'tbalunobackup.ID_TIPO_INGRESSO';

	/** the column name for the DT_INGRESSO field */
	const DT_INGRESSO = 'tbalunobackup.DT_INGRESSO';

	/** the column name for the ID_SITUACAO field */
	const ID_SITUACAO = 'tbalunobackup.ID_SITUACAO';

	/** the column name for the DT_SITUACAO field */
	const DT_SITUACAO = 'tbalunobackup.DT_SITUACAO';

	/** the column name for the ID_DESTINO field */
	const ID_DESTINO = 'tbalunobackup.ID_DESTINO';

	/** the column name for the ID_2GRAU field */
	const ID_2GRAU = 'tbalunobackup.ID_2GRAU';

	/** the column name for the ANO_CONCL_2GRAU field */
	const ANO_CONCL_2GRAU = 'tbalunobackup.ANO_CONCL_2GRAU';

	/** the column name for the ID_3GRAU field */
	const ID_3GRAU = 'tbalunobackup.ID_3GRAU';

	/** the column name for the ANO_CONCL_3GRAU field */
	const ANO_CONCL_3GRAU = 'tbalunobackup.ANO_CONCL_3GRAU';

	/** the column name for the ID_TRABALHO field */
	const ID_TRABALHO = 'tbalunobackup.ID_TRABALHO';

	/** the column name for the CEP_TRABALHO field */
	const CEP_TRABALHO = 'tbalunobackup.CEP_TRABALHO';

	/** the column name for the FONE_TRABALHO field */
	const FONE_TRABALHO = 'tbalunobackup.FONE_TRABALHO';

	/** the column name for the RAMAL_TRABALHO field */
	const RAMAL_TRABALHO = 'tbalunobackup.RAMAL_TRABALHO';

	/** the column name for the MEDIA_GERAL field */
	const MEDIA_GERAL = 'tbalunobackup.MEDIA_GERAL';

	/** the column name for the CH_ELETIVA_CURSADA field */
	const CH_ELETIVA_CURSADA = 'tbalunobackup.CH_ELETIVA_CURSADA';

	/** the column name for the CH_ELETIVA_SOLICITADA field */
	const CH_ELETIVA_SOLICITADA = 'tbalunobackup.CH_ELETIVA_SOLICITADA';

	/** the column name for the CH_OBRIG_CURSADA field */
	const CH_OBRIG_CURSADA = 'tbalunobackup.CH_OBRIG_CURSADA';

	/** the column name for the CH_OBRIG_SOLICITADA field */
	const CH_OBRIG_SOLICITADA = 'tbalunobackup.CH_OBRIG_SOLICITADA';

	/** the column name for the CH_TOTAL field */
	const CH_TOTAL = 'tbalunobackup.CH_TOTAL';

	/** the column name for the OP_INGRESSO field */
	const OP_INGRESSO = 'tbalunobackup.OP_INGRESSO';

	/** the column name for the ID_POLO field */
	const ID_POLO = 'tbalunobackup.ID_POLO';

	/** the column name for the CREATED_AT field */
	const CREATED_AT = 'tbalunobackup.CREATED_AT';

	/** the column name for the UPDATED_AT field */
	const UPDATED_AT = 'tbalunobackup.UPDATED_AT';

	/** the column name for the CREATED_BY field */
	const CREATED_BY = 'tbalunobackup.CREATED_BY';

	/** the column name for the UPDATED_BY field */
	const UPDATED_BY = 'tbalunobackup.UPDATED_BY';

	/** the column name for the ID_ANTIGO field */
	const ID_ANTIGO = 'tbalunobackup.ID_ANTIGO';

	/** the column name for the ID_RACA field */
	const ID_RACA = 'tbalunobackup.ID_RACA';

	/** the column name for the QTD_IRMAOS field */
	const QTD_IRMAOS = 'tbalunobackup.QTD_IRMAOS';

	/** the column name for the RENDA_FAMILIAR field */
	const RENDA_FAMILIAR = 'tbalunobackup.RENDA_FAMILIAR';

	/** the column name for the ID_RELIGIAO field */
	const ID_RELIGIAO = 'tbalunobackup.ID_RELIGIAO';

	/** the column name for the PAI_PROFISSAO field */
	const PAI_PROFISSAO = 'tbalunobackup.PAI_PROFISSAO';

	/** the column name for the PAI_LOCAL_TRABALHO field */
	const PAI_LOCAL_TRABALHO = 'tbalunobackup.PAI_LOCAL_TRABALHO';

	/** the column name for the PAI_FONE field */
	const PAI_FONE = 'tbalunobackup.PAI_FONE';

	/** the column name for the PAI_ID_NIVEL_INSTRUCAO field */
	const PAI_ID_NIVEL_INSTRUCAO = 'tbalunobackup.PAI_ID_NIVEL_INSTRUCAO';

	/** the column name for the MAE_PROFISSAO field */
	const MAE_PROFISSAO = 'tbalunobackup.MAE_PROFISSAO';

	/** the column name for the MAE_LOCAL_TRABALHO field */
	const MAE_LOCAL_TRABALHO = 'tbalunobackup.MAE_LOCAL_TRABALHO';

	/** the column name for the MAE_FONE field */
	const MAE_FONE = 'tbalunobackup.MAE_FONE';

	/** the column name for the MAE_ID_NIVEL_INSTRUCAO field */
	const MAE_ID_NIVEL_INSTRUCAO = 'tbalunobackup.MAE_ID_NIVEL_INSTRUCAO';

	/**
	 * An identiy map to hold any loaded instances of Tbalunobackup objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Tbalunobackup[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('IdPessoa', 'Matricula', 'Nome', 'Celular', 'Email', 'FoneResidencial', 'Foto', 'IdNecesEspecial', 'DtNascimento', 'Naturalidade', 'UfNascimento', 'Nacionalidade', 'Sexo', 'EstadoCivil', 'Titulo', 'TituloZona', 'TituloSecao', 'Rg', 'RgDtExped', 'RgOrgExped', 'Cpf', 'Reservista', 'Pai', 'Mae', 'Cep', 'Numero', 'Complemento', 'IdVersaoCurso', 'IdTipoIngresso', 'DtIngresso', 'IdSituacao', 'DtSituacao', 'IdDestino', 'Id2grau', 'AnoConcl2grau', 'Id3grau', 'AnoConcl3grau', 'IdTrabalho', 'CepTrabalho', 'FoneTrabalho', 'RamalTrabalho', 'MediaGeral', 'ChEletivaCursada', 'ChEletivaSolicitada', 'ChObrigCursada', 'ChObrigSolicitada', 'ChTotal', 'OpIngresso', 'IdPolo', 'CreatedAt', 'UpdatedAt', 'CreatedBy', 'UpdatedBy', 'IdAntigo', 'IdRaca', 'QtdIrmaos', 'RendaFamiliar', 'IdReligiao', 'PaiProfissao', 'PaiLocalTrabalho', 'PaiFone', 'PaiIdNivelInstrucao', 'MaeProfissao', 'MaeLocalTrabalho', 'MaeFone', 'MaeIdNivelInstrucao', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('idPessoa', 'matricula', 'nome', 'celular', 'email', 'foneResidencial', 'foto', 'idNecesEspecial', 'dtNascimento', 'naturalidade', 'ufNascimento', 'nacionalidade', 'sexo', 'estadoCivil', 'titulo', 'tituloZona', 'tituloSecao', 'rg', 'rgDtExped', 'rgOrgExped', 'cpf', 'reservista', 'pai', 'mae', 'cep', 'numero', 'complemento', 'idVersaoCurso', 'idTipoIngresso', 'dtIngresso', 'idSituacao', 'dtSituacao', 'idDestino', 'id2grau', 'anoConcl2grau', 'id3grau', 'anoConcl3grau', 'idTrabalho', 'cepTrabalho', 'foneTrabalho', 'ramalTrabalho', 'mediaGeral', 'chEletivaCursada', 'chEletivaSolicitada', 'chObrigCursada', 'chObrigSolicitada', 'chTotal', 'opIngresso', 'idPolo', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'idAntigo', 'idRaca', 'qtdIrmaos', 'rendaFamiliar', 'idReligiao', 'paiProfissao', 'paiLocalTrabalho', 'paiFone', 'paiIdNivelInstrucao', 'maeProfissao', 'maeLocalTrabalho', 'maeFone', 'maeIdNivelInstrucao', ),
		BasePeer::TYPE_COLNAME => array (self::ID_PESSOA, self::MATRICULA, self::NOME, self::CELULAR, self::EMAIL, self::FONE_RESIDENCIAL, self::FOTO, self::ID_NECES_ESPECIAL, self::DT_NASCIMENTO, self::NATURALIDADE, self::UF_NASCIMENTO, self::NACIONALIDADE, self::SEXO, self::ESTADO_CIVIL, self::TITULO, self::TITULO_ZONA, self::TITULO_SECAO, self::RG, self::RG_DT_EXPED, self::RG_ORG_EXPED, self::CPF, self::RESERVISTA, self::PAI, self::MAE, self::CEP, self::NUMERO, self::COMPLEMENTO, self::ID_VERSAO_CURSO, self::ID_TIPO_INGRESSO, self::DT_INGRESSO, self::ID_SITUACAO, self::DT_SITUACAO, self::ID_DESTINO, self::ID_2GRAU, self::ANO_CONCL_2GRAU, self::ID_3GRAU, self::ANO_CONCL_3GRAU, self::ID_TRABALHO, self::CEP_TRABALHO, self::FONE_TRABALHO, self::RAMAL_TRABALHO, self::MEDIA_GERAL, self::CH_ELETIVA_CURSADA, self::CH_ELETIVA_SOLICITADA, self::CH_OBRIG_CURSADA, self::CH_OBRIG_SOLICITADA, self::CH_TOTAL, self::OP_INGRESSO, self::ID_POLO, self::CREATED_AT, self::UPDATED_AT, self::CREATED_BY, self::UPDATED_BY, self::ID_ANTIGO, self::ID_RACA, self::QTD_IRMAOS, self::RENDA_FAMILIAR, self::ID_RELIGIAO, self::PAI_PROFISSAO, self::PAI_LOCAL_TRABALHO, self::PAI_FONE, self::PAI_ID_NIVEL_INSTRUCAO, self::MAE_PROFISSAO, self::MAE_LOCAL_TRABALHO, self::MAE_FONE, self::MAE_ID_NIVEL_INSTRUCAO, ),
		BasePeer::TYPE_FIELDNAME => array ('id_pessoa', 'matricula', 'nome', 'celular', 'email', 'fone_residencial', 'foto', 'id_neces_especial', 'dt_nascimento', 'naturalidade', 'uf_nascimento', 'nacionalidade', 'sexo', 'estado_civil', 'titulo', 'titulo_zona', 'titulo_secao', 'rg', 'rg_dt_exped', 'rg_org_exped', 'cpf', 'reservista', 'pai', 'mae', 'cep', 'numero', 'complemento', 'id_versao_curso', 'id_tipo_ingresso', 'dt_ingresso', 'id_situacao', 'dt_situacao', 'id_destino', 'id_2grau', 'ano_concl_2grau', 'id_3grau', 'ano_concl_3grau', 'id_trabalho', 'cep_trabalho', 'fone_trabalho', 'ramal_trabalho', 'media_geral', 'ch_eletiva_cursada', 'ch_eletiva_solicitada', 'ch_obrig_cursada', 'ch_obrig_solicitada', 'ch_total', 'op_ingresso', 'id_polo', 'created_at', 'updated_at', 'created_by', 'updated_by', 'id_antigo', 'id_raca', 'qtd_irmaos', 'renda_familiar', 'id_religiao', 'pai_profissao', 'pai_local_trabalho', 'pai_fone', 'pai_id_nivel_instrucao', 'mae_profissao', 'mae_local_trabalho', 'mae_fone', 'mae_id_nivel_instrucao', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('IdPessoa' => 0, 'Matricula' => 1, 'Nome' => 2, 'Celular' => 3, 'Email' => 4, 'FoneResidencial' => 5, 'Foto' => 6, 'IdNecesEspecial' => 7, 'DtNascimento' => 8, 'Naturalidade' => 9, 'UfNascimento' => 10, 'Nacionalidade' => 11, 'Sexo' => 12, 'EstadoCivil' => 13, 'Titulo' => 14, 'TituloZona' => 15, 'TituloSecao' => 16, 'Rg' => 17, 'RgDtExped' => 18, 'RgOrgExped' => 19, 'Cpf' => 20, 'Reservista' => 21, 'Pai' => 22, 'Mae' => 23, 'Cep' => 24, 'Numero' => 25, 'Complemento' => 26, 'IdVersaoCurso' => 27, 'IdTipoIngresso' => 28, 'DtIngresso' => 29, 'IdSituacao' => 30, 'DtSituacao' => 31, 'IdDestino' => 32, 'Id2grau' => 33, 'AnoConcl2grau' => 34, 'Id3grau' => 35, 'AnoConcl3grau' => 36, 'IdTrabalho' => 37, 'CepTrabalho' => 38, 'FoneTrabalho' => 39, 'RamalTrabalho' => 40, 'MediaGeral' => 41, 'ChEletivaCursada' => 42, 'ChEletivaSolicitada' => 43, 'ChObrigCursada' => 44, 'ChObrigSolicitada' => 45, 'ChTotal' => 46, 'OpIngresso' => 47, 'IdPolo' => 48, 'CreatedAt' => 49, 'UpdatedAt' => 50, 'CreatedBy' => 51, 'UpdatedBy' => 52, 'IdAntigo' => 53, 'IdRaca' => 54, 'QtdIrmaos' => 55, 'RendaFamiliar' => 56, 'IdReligiao' => 57, 'PaiProfissao' => 58, 'PaiLocalTrabalho' => 59, 'PaiFone' => 60, 'PaiIdNivelInstrucao' => 61, 'MaeProfissao' => 62, 'MaeLocalTrabalho' => 63, 'MaeFone' => 64, 'MaeIdNivelInstrucao' => 65, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('idPessoa' => 0, 'matricula' => 1, 'nome' => 2, 'celular' => 3, 'email' => 4, 'foneResidencial' => 5, 'foto' => 6, 'idNecesEspecial' => 7, 'dtNascimento' => 8, 'naturalidade' => 9, 'ufNascimento' => 10, 'nacionalidade' => 11, 'sexo' => 12, 'estadoCivil' => 13, 'titulo' => 14, 'tituloZona' => 15, 'tituloSecao' => 16, 'rg' => 17, 'rgDtExped' => 18, 'rgOrgExped' => 19, 'cpf' => 20, 'reservista' => 21, 'pai' => 22, 'mae' => 23, 'cep' => 24, 'numero' => 25, 'complemento' => 26, 'idVersaoCurso' => 27, 'idTipoIngresso' => 28, 'dtIngresso' => 29, 'idSituacao' => 30, 'dtSituacao' => 31, 'idDestino' => 32, 'id2grau' => 33, 'anoConcl2grau' => 34, 'id3grau' => 35, 'anoConcl3grau' => 36, 'idTrabalho' => 37, 'cepTrabalho' => 38, 'foneTrabalho' => 39, 'ramalTrabalho' => 40, 'mediaGeral' => 41, 'chEletivaCursada' => 42, 'chEletivaSolicitada' => 43, 'chObrigCursada' => 44, 'chObrigSolicitada' => 45, 'chTotal' => 46, 'opIngresso' => 47, 'idPolo' => 48, 'createdAt' => 49, 'updatedAt' => 50, 'createdBy' => 51, 'updatedBy' => 52, 'idAntigo' => 53, 'idRaca' => 54, 'qtdIrmaos' => 55, 'rendaFamiliar' => 56, 'idReligiao' => 57, 'paiProfissao' => 58, 'paiLocalTrabalho' => 59, 'paiFone' => 60, 'paiIdNivelInstrucao' => 61, 'maeProfissao' => 62, 'maeLocalTrabalho' => 63, 'maeFone' => 64, 'maeIdNivelInstrucao' => 65, ),
		BasePeer::TYPE_COLNAME => array (self::ID_PESSOA => 0, self::MATRICULA => 1, self::NOME => 2, self::CELULAR => 3, self::EMAIL => 4, self::FONE_RESIDENCIAL => 5, self::FOTO => 6, self::ID_NECES_ESPECIAL => 7, self::DT_NASCIMENTO => 8, self::NATURALIDADE => 9, self::UF_NASCIMENTO => 10, self::NACIONALIDADE => 11, self::SEXO => 12, self::ESTADO_CIVIL => 13, self::TITULO => 14, self::TITULO_ZONA => 15, self::TITULO_SECAO => 16, self::RG => 17, self::RG_DT_EXPED => 18, self::RG_ORG_EXPED => 19, self::CPF => 20, self::RESERVISTA => 21, self::PAI => 22, self::MAE => 23, self::CEP => 24, self::NUMERO => 25, self::COMPLEMENTO => 26, self::ID_VERSAO_CURSO => 27, self::ID_TIPO_INGRESSO => 28, self::DT_INGRESSO => 29, self::ID_SITUACAO => 30, self::DT_SITUACAO => 31, self::ID_DESTINO => 32, self::ID_2GRAU => 33, self::ANO_CONCL_2GRAU => 34, self::ID_3GRAU => 35, self::ANO_CONCL_3GRAU => 36, self::ID_TRABALHO => 37, self::CEP_TRABALHO => 38, self::FONE_TRABALHO => 39, self::RAMAL_TRABALHO => 40, self::MEDIA_GERAL => 41, self::CH_ELETIVA_CURSADA => 42, self::CH_ELETIVA_SOLICITADA => 43, self::CH_OBRIG_CURSADA => 44, self::CH_OBRIG_SOLICITADA => 45, self::CH_TOTAL => 46, self::OP_INGRESSO => 47, self::ID_POLO => 48, self::CREATED_AT => 49, self::UPDATED_AT => 50, self::CREATED_BY => 51, self::UPDATED_BY => 52, self::ID_ANTIGO => 53, self::ID_RACA => 54, self::QTD_IRMAOS => 55, self::RENDA_FAMILIAR => 56, self::ID_RELIGIAO => 57, self::PAI_PROFISSAO => 58, self::PAI_LOCAL_TRABALHO => 59, self::PAI_FONE => 60, self::PAI_ID_NIVEL_INSTRUCAO => 61, self::MAE_PROFISSAO => 62, self::MAE_LOCAL_TRABALHO => 63, self::MAE_FONE => 64, self::MAE_ID_NIVEL_INSTRUCAO => 65, ),
		BasePeer::TYPE_FIELDNAME => array ('id_pessoa' => 0, 'matricula' => 1, 'nome' => 2, 'celular' => 3, 'email' => 4, 'fone_residencial' => 5, 'foto' => 6, 'id_neces_especial' => 7, 'dt_nascimento' => 8, 'naturalidade' => 9, 'uf_nascimento' => 10, 'nacionalidade' => 11, 'sexo' => 12, 'estado_civil' => 13, 'titulo' => 14, 'titulo_zona' => 15, 'titulo_secao' => 16, 'rg' => 17, 'rg_dt_exped' => 18, 'rg_org_exped' => 19, 'cpf' => 20, 'reservista' => 21, 'pai' => 22, 'mae' => 23, 'cep' => 24, 'numero' => 25, 'complemento' => 26, 'id_versao_curso' => 27, 'id_tipo_ingresso' => 28, 'dt_ingresso' => 29, 'id_situacao' => 30, 'dt_situacao' => 31, 'id_destino' => 32, 'id_2grau' => 33, 'ano_concl_2grau' => 34, 'id_3grau' => 35, 'ano_concl_3grau' => 36, 'id_trabalho' => 37, 'cep_trabalho' => 38, 'fone_trabalho' => 39, 'ramal_trabalho' => 40, 'media_geral' => 41, 'ch_eletiva_cursada' => 42, 'ch_eletiva_solicitada' => 43, 'ch_obrig_cursada' => 44, 'ch_obrig_solicitada' => 45, 'ch_total' => 46, 'op_ingresso' => 47, 'id_polo' => 48, 'created_at' => 49, 'updated_at' => 50, 'created_by' => 51, 'updated_by' => 52, 'id_antigo' => 53, 'id_raca' => 54, 'qtd_irmaos' => 55, 'renda_familiar' => 56, 'id_religiao' => 57, 'pai_profissao' => 58, 'pai_local_trabalho' => 59, 'pai_fone' => 60, 'pai_id_nivel_instrucao' => 61, 'mae_profissao' => 62, 'mae_local_trabalho' => 63, 'mae_fone' => 64, 'mae_id_nivel_instrucao' => 65, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. TbalunobackupPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(TbalunobackupPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(TbalunobackupPeer::ID_PESSOA);
		$criteria->addSelectColumn(TbalunobackupPeer::MATRICULA);
		$criteria->addSelectColumn(TbalunobackupPeer::NOME);
		$criteria->addSelectColumn(TbalunobackupPeer::CELULAR);
		$criteria->addSelectColumn(TbalunobackupPeer::EMAIL);
		$criteria->addSelectColumn(TbalunobackupPeer::FONE_RESIDENCIAL);
		$criteria->addSelectColumn(TbalunobackupPeer::FOTO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_NECES_ESPECIAL);
		$criteria->addSelectColumn(TbalunobackupPeer::DT_NASCIMENTO);
		$criteria->addSelectColumn(TbalunobackupPeer::NATURALIDADE);
		$criteria->addSelectColumn(TbalunobackupPeer::UF_NASCIMENTO);
		$criteria->addSelectColumn(TbalunobackupPeer::NACIONALIDADE);
		$criteria->addSelectColumn(TbalunobackupPeer::SEXO);
		$criteria->addSelectColumn(TbalunobackupPeer::ESTADO_CIVIL);
		$criteria->addSelectColumn(TbalunobackupPeer::TITULO);
		$criteria->addSelectColumn(TbalunobackupPeer::TITULO_ZONA);
		$criteria->addSelectColumn(TbalunobackupPeer::TITULO_SECAO);
		$criteria->addSelectColumn(TbalunobackupPeer::RG);
		$criteria->addSelectColumn(TbalunobackupPeer::RG_DT_EXPED);
		$criteria->addSelectColumn(TbalunobackupPeer::RG_ORG_EXPED);
		$criteria->addSelectColumn(TbalunobackupPeer::CPF);
		$criteria->addSelectColumn(TbalunobackupPeer::RESERVISTA);
		$criteria->addSelectColumn(TbalunobackupPeer::PAI);
		$criteria->addSelectColumn(TbalunobackupPeer::MAE);
		$criteria->addSelectColumn(TbalunobackupPeer::CEP);
		$criteria->addSelectColumn(TbalunobackupPeer::NUMERO);
		$criteria->addSelectColumn(TbalunobackupPeer::COMPLEMENTO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_VERSAO_CURSO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_TIPO_INGRESSO);
		$criteria->addSelectColumn(TbalunobackupPeer::DT_INGRESSO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_SITUACAO);
		$criteria->addSelectColumn(TbalunobackupPeer::DT_SITUACAO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_DESTINO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_2GRAU);
		$criteria->addSelectColumn(TbalunobackupPeer::ANO_CONCL_2GRAU);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_3GRAU);
		$criteria->addSelectColumn(TbalunobackupPeer::ANO_CONCL_3GRAU);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_TRABALHO);
		$criteria->addSelectColumn(TbalunobackupPeer::CEP_TRABALHO);
		$criteria->addSelectColumn(TbalunobackupPeer::FONE_TRABALHO);
		$criteria->addSelectColumn(TbalunobackupPeer::RAMAL_TRABALHO);
		$criteria->addSelectColumn(TbalunobackupPeer::MEDIA_GERAL);
		$criteria->addSelectColumn(TbalunobackupPeer::CH_ELETIVA_CURSADA);
		$criteria->addSelectColumn(TbalunobackupPeer::CH_ELETIVA_SOLICITADA);
		$criteria->addSelectColumn(TbalunobackupPeer::CH_OBRIG_CURSADA);
		$criteria->addSelectColumn(TbalunobackupPeer::CH_OBRIG_SOLICITADA);
		$criteria->addSelectColumn(TbalunobackupPeer::CH_TOTAL);
		$criteria->addSelectColumn(TbalunobackupPeer::OP_INGRESSO);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_POLO);
		$criteria->addSelectColumn(TbalunobackupPeer::CREATED_AT);
		$criteria->addSelectColumn(TbalunobackupPeer::UPDATED_AT);
		$criteria->addSelectColumn(TbalunobackupPeer::CREATED_BY);
		$criteria->addSelectColumn(TbalunobackupPeer::UPDATED_BY);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_RACA);
		$criteria->addSelectColumn(TbalunobackupPeer::QTD_IRMAOS);
		$criteria->addSelectColumn(TbalunobackupPeer::RENDA_FAMILIAR);
		$criteria->addSelectColumn(TbalunobackupPeer::ID_RELIGIAO);
		$criteria->addSelectColumn(TbalunobackupPeer::PAI_PROFISSAO);
		$criteria->addSelectColumn(TbalunobackupPeer::PAI_LOCAL_TRABALHO);
		$criteria->addSelectColumn(TbalunobackupPeer::PAI_FONE);
		$criteria->addSelectColumn(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO);
		$criteria->addSelectColumn(TbalunobackupPeer::MAE_PROFISSAO);
		$criteria->addSelectColumn(TbalunobackupPeer::MAE_LOCAL_TRABALHO);
		$criteria->addSelectColumn(TbalunobackupPeer::MAE_FONE);
		$criteria->addSelectColumn(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Tbalunobackup
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = TbalunobackupPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return TbalunobackupPeer::populateObjects(TbalunobackupPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			TbalunobackupPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Tbalunobackup $value A Tbalunobackup object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Tbalunobackup $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getMatricula();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Tbalunobackup object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Tbalunobackup) {
				$key = (string) $value->getMatricula();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Tbalunobackup object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Tbalunobackup Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to tbalunobackup
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 1] === null) {
			return null;
		}
		return (string) $row[$startcol + 1];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = TbalunobackupPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = TbalunobackupPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				TbalunobackupPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Tbnecesespecial table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbnecesespecial(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbcidade table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbcidade(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbpais table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbpais(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TblogradouroRelatedByCep table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTblogradouroRelatedByCep(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbcursoversao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbcursoversao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbtipoingresso table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbtipoingresso(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbalunosituacao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbalunosituacao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedByIdDestino table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbinstexternaRelatedByIdDestino(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedById2grau table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbinstexternaRelatedById2grau(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedById3grau table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbinstexternaRelatedById3grau(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedByIdTrabalho table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbinstexternaRelatedByIdTrabalho(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TblogradouroRelatedByCepTrabalho table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTblogradouroRelatedByCepTrabalho(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbpolos table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbpolos(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbalunoracacor table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbalunoracacor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbreligiao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbreligiao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbnivelinstrucaoRelatedByPaiIdNivelInstrucao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbnivelinstrucaoRelatedByPaiIdNivelInstrucao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbnivelinstrucaoRelatedByMaeIdNivelInstrucao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTbnivelinstrucaoRelatedByMaeIdNivelInstrucao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbnecesespecial objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbnecesespecial(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbnecesespecialPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbcidade objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbcidade(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbcidadePeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbcidadePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbcidadePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbcidadePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbcidade)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbpais objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbpais(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbpaisPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbpaisPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbpaisPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbpaisPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbpais)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tblogradouro objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTblogradouroRelatedByCep(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TblogradouroPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TblogradouroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TblogradouroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TblogradouroPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tblogradouro)
				$obj2->addTbalunobackupRelatedByCep($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbcursoversao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbcursoversao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbcursoversaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbcursoversaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbcursoversaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbcursoversaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbcursoversao)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbtipoingresso objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbtipoingresso(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbtipoingressoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbtipoingressoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbtipoingressoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbtipoingressoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbtipoingresso)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbalunosituacao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbalunosituacao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbalunosituacaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbalunosituacaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbalunosituacaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbalunosituacao)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbinstexterna objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbinstexternaRelatedByIdDestino(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbinstexternaPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbinstexternaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbinstexternaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbinstexterna)
				$obj2->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbinstexterna objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbinstexternaRelatedById2grau(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbinstexternaPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbinstexternaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbinstexternaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbinstexterna)
				$obj2->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbinstexterna objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbinstexternaRelatedById3grau(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbinstexternaPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbinstexternaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbinstexternaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbinstexterna)
				$obj2->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbinstexterna objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbinstexternaRelatedByIdTrabalho(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbinstexternaPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbinstexternaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbinstexternaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbinstexterna)
				$obj2->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tblogradouro objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTblogradouroRelatedByCepTrabalho(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TblogradouroPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TblogradouroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TblogradouroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TblogradouroPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tblogradouro)
				$obj2->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbpolos objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbpolos(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbpolosPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbpolosPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbpolosPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbpolosPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbpolos)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbalunoracacor objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbalunoracacor(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbalunoracacorPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbalunoracacorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbalunoracacorPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbalunoracacorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbalunoracacor)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbreligiao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbreligiao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbreligiaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbreligiaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbreligiaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbreligiaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbreligiao)
				$obj2->addTbalunobackup($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbnivelinstrucao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbnivelinstrucaoRelatedByPaiIdNivelInstrucao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbnivelinstrucaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbnivelinstrucaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbnivelinstrucaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbnivelinstrucao)
				$obj2->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with their Tbnivelinstrucao objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTbnivelinstrucaoRelatedByMaeIdNivelInstrucao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);
		TbnivelinstrucaoPeer::addSelectColumns($criteria);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TbnivelinstrucaoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TbnivelinstrucaoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to $obj2 (Tbnivelinstrucao)
				$obj2->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol19 = $startcol18 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Tbnecesespecial rows

			$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbcidade rows

			$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = TbcidadePeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbpais rows

			$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = TbpaisPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tblogradouro rows

			$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);
			} // if joined row not null

			// Add objects for joined Tbcursoversao rows

			$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbtipoingresso rows

			$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbalunosituacao rows

			$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbinstexterna rows

			$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedByIdDestino($obj1);
			} // if joined row not null

			// Add objects for joined Tbinstexterna rows

			$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById2grau($obj1);
			} // if joined row not null

			// Add objects for joined Tbinstexterna rows

			$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
			if ($key11 !== null) {
				$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
				if (!$obj11) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if obj11 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedById3grau($obj1);
			} // if joined row not null

			// Add objects for joined Tbinstexterna rows

			$key12 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
			if ($key12 !== null) {
				$obj12 = TbinstexternaPeer::getInstanceFromPool($key12);
				if (!$obj12) {

					$cls = TbinstexternaPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbinstexternaPeer::addInstanceToPool($obj12, $key12);
				} // if obj12 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbinstexterna)
				$obj12->addTbalunobackupRelatedByIdTrabalho($obj1);
			} // if joined row not null

			// Add objects for joined Tblogradouro rows

			$key13 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol13);
			if ($key13 !== null) {
				$obj13 = TblogradouroPeer::getInstanceFromPool($key13);
				if (!$obj13) {

					$cls = TblogradouroPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TblogradouroPeer::addInstanceToPool($obj13, $key13);
				} // if obj13 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tblogradouro)
				$obj13->addTbalunobackupRelatedByCepTrabalho($obj1);
			} // if joined row not null

			// Add objects for joined Tbpolos rows

			$key14 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol14);
			if ($key14 !== null) {
				$obj14 = TbpolosPeer::getInstanceFromPool($key14);
				if (!$obj14) {

					$cls = TbpolosPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbpolosPeer::addInstanceToPool($obj14, $key14);
				} // if obj14 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbpolos)
				$obj14->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbalunoracacor rows

			$key15 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol15);
			if ($key15 !== null) {
				$obj15 = TbalunoracacorPeer::getInstanceFromPool($key15);
				if (!$obj15) {

					$cls = TbalunoracacorPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbalunoracacorPeer::addInstanceToPool($obj15, $key15);
				} // if obj15 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbalunoracacor)
				$obj15->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbreligiao rows

			$key16 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
			if ($key16 !== null) {
				$obj16 = TbreligiaoPeer::getInstanceFromPool($key16);
				if (!$obj16) {

					$cls = TbreligiaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbreligiaoPeer::addInstanceToPool($obj16, $key16);
				} // if obj16 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbreligiao)
				$obj16->addTbalunobackup($obj1);
			} // if joined row not null

			// Add objects for joined Tbnivelinstrucao rows

			$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
			if ($key17 !== null) {
				$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
				if (!$obj17) {

					$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if obj17 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);
			} // if joined row not null

			// Add objects for joined Tbnivelinstrucao rows

			$key18 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol18);
			if ($key18 !== null) {
				$obj18 = TbnivelinstrucaoPeer::getInstanceFromPool($key18);
				if (!$obj18) {

					$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj18 = new $cls();
					$obj18->hydrate($row, $startcol18);
					TbnivelinstrucaoPeer::addInstanceToPool($obj18, $key18);
				} // if obj18 loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj18 (Tbnivelinstrucao)
				$obj18->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbnecesespecial table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbnecesespecial(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbcidade table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbcidade(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbpais table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbpais(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TblogradouroRelatedByCep table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTblogradouroRelatedByCep(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbcursoversao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbcursoversao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbtipoingresso table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbtipoingresso(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbalunosituacao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbalunosituacao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedByIdDestino table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbinstexternaRelatedByIdDestino(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedById2grau table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbinstexternaRelatedById2grau(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedById3grau table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbinstexternaRelatedById3grau(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbinstexternaRelatedByIdTrabalho table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbinstexternaRelatedByIdTrabalho(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TblogradouroRelatedByCepTrabalho table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTblogradouroRelatedByCepTrabalho(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbpolos table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbpolos(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbalunoracacor table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbalunoracacor(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Tbreligiao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbreligiao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbnivelinstrucaoRelatedByPaiIdNivelInstrucao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbnivelinstrucaoRelatedByPaiIdNivelInstrucao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TbnivelinstrucaoRelatedByMaeIdNivelInstrucao table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTbnivelinstrucaoRelatedByMaeIdNivelInstrucao(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(TbalunobackupPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			TbalunobackupPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbnecesespecial.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbnecesespecial(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbcidade rows

				$key2 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbcidadePeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbcidadePeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbcidade)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key3 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbpaisPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbpaisPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbpais)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key4 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TblogradouroPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TblogradouroPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tblogradouro)
				$obj4->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key5 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoversaoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoversaoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tbcursoversao)
				$obj5->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key6 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbtipoingressoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbtipoingressoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbtipoingresso)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key12 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TblogradouroPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TblogradouroPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tblogradouro)
				$obj12->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key13 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbpolosPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbpolosPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbpolos)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbcidade.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbcidade(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key3 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbpaisPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbpaisPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbpais)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key4 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TblogradouroPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TblogradouroPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tblogradouro)
				$obj4->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key5 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoversaoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoversaoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tbcursoversao)
				$obj5->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key6 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbtipoingressoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbtipoingressoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbtipoingresso)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key12 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TblogradouroPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TblogradouroPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tblogradouro)
				$obj12->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key13 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbpolosPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbpolosPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbpolos)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbpais.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbpais(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key4 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TblogradouroPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TblogradouroPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tblogradouro)
				$obj4->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key5 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoversaoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoversaoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tbcursoversao)
				$obj5->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key6 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbtipoingressoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbtipoingressoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbtipoingresso)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key12 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TblogradouroPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TblogradouroPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tblogradouro)
				$obj12->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key13 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbpolosPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbpolosPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbpolos)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TblogradouroRelatedByCep.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTblogradouroRelatedByCep(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key5 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoversaoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoversaoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tbcursoversao)
				$obj5->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key6 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbtipoingressoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbtipoingressoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbtipoingresso)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key12 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbpolosPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbpolosPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbpolos)
				$obj12->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key13 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbalunoracacorPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbalunoracacorPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbalunoracacor)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key14 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbreligiaoPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbreligiaoPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbreligiao)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key15 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbnivelinstrucaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbnivelinstrucaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbnivelinstrucao)
				$obj15->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbcursoversao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbcursoversao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key6 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbtipoingressoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbtipoingressoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbtipoingresso)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key12 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TblogradouroPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TblogradouroPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tblogradouro)
				$obj12->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key13 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbpolosPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbpolosPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbpolos)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbtipoingresso.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbtipoingresso(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key12 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TblogradouroPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TblogradouroPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tblogradouro)
				$obj12->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key13 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbpolosPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbpolosPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbpolos)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbalunosituacao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbalunosituacao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key12 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TblogradouroPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TblogradouroPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tblogradouro)
				$obj12->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key13 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbpolosPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbpolosPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbpolos)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TbinstexternaRelatedByIdDestino.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbinstexternaRelatedByIdDestino(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key9 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TblogradouroPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TblogradouroPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tblogradouro)
				$obj9->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbpolos)
				$obj10->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key11 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbalunoracacorPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbalunoracacorPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbalunoracacor)
				$obj11->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key12 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbreligiaoPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbreligiaoPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbreligiao)
				$obj12->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key13 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbnivelinstrucaoPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbnivelinstrucaoPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbnivelinstrucao)
				$obj13->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key14 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbnivelinstrucaoPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbnivelinstrucaoPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbnivelinstrucao)
				$obj14->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TbinstexternaRelatedById2grau.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbinstexternaRelatedById2grau(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key9 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TblogradouroPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TblogradouroPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tblogradouro)
				$obj9->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbpolos)
				$obj10->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key11 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbalunoracacorPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbalunoracacorPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbalunoracacor)
				$obj11->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key12 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbreligiaoPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbreligiaoPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbreligiao)
				$obj12->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key13 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbnivelinstrucaoPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbnivelinstrucaoPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbnivelinstrucao)
				$obj13->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key14 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbnivelinstrucaoPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbnivelinstrucaoPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbnivelinstrucao)
				$obj14->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TbinstexternaRelatedById3grau.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbinstexternaRelatedById3grau(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key9 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TblogradouroPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TblogradouroPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tblogradouro)
				$obj9->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbpolos)
				$obj10->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key11 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbalunoracacorPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbalunoracacorPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbalunoracacor)
				$obj11->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key12 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbreligiaoPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbreligiaoPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbreligiao)
				$obj12->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key13 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbnivelinstrucaoPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbnivelinstrucaoPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbnivelinstrucao)
				$obj13->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key14 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbnivelinstrucaoPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbnivelinstrucaoPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbnivelinstrucao)
				$obj14->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TbinstexternaRelatedByIdTrabalho.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbinstexternaRelatedByIdTrabalho(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key9 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TblogradouroPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TblogradouroPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tblogradouro)
				$obj9->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key10 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbpolosPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbpolosPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbpolos)
				$obj10->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key11 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbalunoracacorPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbalunoracacorPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbalunoracacor)
				$obj11->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key12 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbreligiaoPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbreligiaoPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbreligiao)
				$obj12->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key13 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbnivelinstrucaoPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbnivelinstrucaoPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbnivelinstrucao)
				$obj13->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key14 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbnivelinstrucaoPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbnivelinstrucaoPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbnivelinstrucao)
				$obj14->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TblogradouroRelatedByCepTrabalho.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTblogradouroRelatedByCepTrabalho(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key5 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TbcursoversaoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TbcursoversaoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tbcursoversao)
				$obj5->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key6 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbtipoingressoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbtipoingressoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbtipoingresso)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key7 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbalunosituacaoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbalunosituacaoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbalunosituacao)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key8 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbinstexternaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbinstexternaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbinstexterna)
				$obj8->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key12 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbpolosPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbpolosPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbpolos)
				$obj12->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key13 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TbalunoracacorPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TbalunoracacorPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tbalunoracacor)
				$obj13->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key14 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbreligiaoPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbreligiaoPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbreligiao)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key15 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbnivelinstrucaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbnivelinstrucaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbnivelinstrucao)
				$obj15->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbpolos.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbpolos(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key12 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbinstexternaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbinstexternaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbinstexterna)
				$obj12->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key13 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TblogradouroPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TblogradouroPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tblogradouro)
				$obj13->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key14 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbalunoracacorPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbalunoracacorPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbalunoracacor)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbalunoracacor.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbalunoracacor(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key12 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbinstexternaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbinstexternaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbinstexterna)
				$obj12->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key13 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TblogradouroPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TblogradouroPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tblogradouro)
				$obj13->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key14 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbpolosPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbpolosPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbpolos)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key15 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbreligiaoPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbreligiaoPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbreligiao)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except Tbreligiao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbreligiao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnivelinstrucaoPeer::addSelectColumns($criteria);
		$startcol18 = $startcol17 + (TbnivelinstrucaoPeer::NUM_COLUMNS - TbnivelinstrucaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::PAI_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::MAE_ID_NIVEL_INSTRUCAO, TbnivelinstrucaoPeer::ID_NIVEL_INSTRUCAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key12 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbinstexternaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbinstexternaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbinstexterna)
				$obj12->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key13 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TblogradouroPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TblogradouroPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tblogradouro)
				$obj13->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key14 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbpolosPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbpolosPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbpolos)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key15 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbalunoracacorPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbalunoracacorPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbalunoracacor)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key16 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbnivelinstrucaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbnivelinstrucaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbnivelinstrucao)
				$obj16->addTbalunobackupRelatedByPaiIdNivelInstrucao($obj1);

			} // if joined row is not null

				// Add objects for joined Tbnivelinstrucao rows

				$key17 = TbnivelinstrucaoPeer::getPrimaryKeyHashFromRow($row, $startcol17);
				if ($key17 !== null) {
					$obj17 = TbnivelinstrucaoPeer::getInstanceFromPool($key17);
					if (!$obj17) {
	
						$cls = TbnivelinstrucaoPeer::getOMClass(false);

					$obj17 = new $cls();
					$obj17->hydrate($row, $startcol17);
					TbnivelinstrucaoPeer::addInstanceToPool($obj17, $key17);
				} // if $obj17 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj17 (Tbnivelinstrucao)
				$obj17->addTbalunobackupRelatedByMaeIdNivelInstrucao($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TbnivelinstrucaoRelatedByPaiIdNivelInstrucao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbnivelinstrucaoRelatedByPaiIdNivelInstrucao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key12 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbinstexternaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbinstexternaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbinstexterna)
				$obj12->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key13 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TblogradouroPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TblogradouroPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tblogradouro)
				$obj13->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key14 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbpolosPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbpolosPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbpolos)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key15 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbalunoracacorPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbalunoracacorPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbalunoracacor)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key16 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbreligiaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbreligiaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbreligiao)
				$obj16->addTbalunobackup($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Tbalunobackup objects pre-filled with all related objects except TbnivelinstrucaoRelatedByMaeIdNivelInstrucao.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Tbalunobackup objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTbnivelinstrucaoRelatedByMaeIdNivelInstrucao(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		TbalunobackupPeer::addSelectColumns($criteria);
		$startcol2 = (TbalunobackupPeer::NUM_COLUMNS - TbalunobackupPeer::NUM_LAZY_LOAD_COLUMNS);

		TbnecesespecialPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (TbnecesespecialPeer::NUM_COLUMNS - TbnecesespecialPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcidadePeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (TbcidadePeer::NUM_COLUMNS - TbcidadePeer::NUM_LAZY_LOAD_COLUMNS);

		TbpaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (TbpaisPeer::NUM_COLUMNS - TbpaisPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbcursoversaoPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (TbcursoversaoPeer::NUM_COLUMNS - TbcursoversaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbtipoingressoPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (TbtipoingressoPeer::NUM_COLUMNS - TbtipoingressoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunosituacaoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (TbalunosituacaoPeer::NUM_COLUMNS - TbalunosituacaoPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol12 = $startcol11 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TbinstexternaPeer::addSelectColumns($criteria);
		$startcol13 = $startcol12 + (TbinstexternaPeer::NUM_COLUMNS - TbinstexternaPeer::NUM_LAZY_LOAD_COLUMNS);

		TblogradouroPeer::addSelectColumns($criteria);
		$startcol14 = $startcol13 + (TblogradouroPeer::NUM_COLUMNS - TblogradouroPeer::NUM_LAZY_LOAD_COLUMNS);

		TbpolosPeer::addSelectColumns($criteria);
		$startcol15 = $startcol14 + (TbpolosPeer::NUM_COLUMNS - TbpolosPeer::NUM_LAZY_LOAD_COLUMNS);

		TbalunoracacorPeer::addSelectColumns($criteria);
		$startcol16 = $startcol15 + (TbalunoracacorPeer::NUM_COLUMNS - TbalunoracacorPeer::NUM_LAZY_LOAD_COLUMNS);

		TbreligiaoPeer::addSelectColumns($criteria);
		$startcol17 = $startcol16 + (TbreligiaoPeer::NUM_COLUMNS - TbreligiaoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(TbalunobackupPeer::ID_NECES_ESPECIAL, TbnecesespecialPeer::ID_NECES_ESPECIAL, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NATURALIDADE, TbcidadePeer::ID_CIDADE, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::NACIONALIDADE, TbpaisPeer::ID_PAIS, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TIPO_INGRESSO, TbtipoingressoPeer::ID_TIPO_INGRESSO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_SITUACAO, TbalunosituacaoPeer::ID_SITUACAO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_DESTINO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_2GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_3GRAU, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_TRABALHO, TbinstexternaPeer::ID_INST_EXTERNA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::CEP_TRABALHO, TblogradouroPeer::CEP, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_POLO, TbpolosPeer::ID_POLO, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RACA, TbalunoracacorPeer::ID_RACA, $join_behavior);

		$criteria->addJoin(TbalunobackupPeer::ID_RELIGIAO, TbreligiaoPeer::ID_RELIGIAO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseTbalunobackupPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = TbalunobackupPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = TbalunobackupPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = TbalunobackupPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				TbalunobackupPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Tbnecesespecial rows

				$key2 = TbnecesespecialPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TbnecesespecialPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = TbnecesespecialPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TbnecesespecialPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj2 (Tbnecesespecial)
				$obj2->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcidade rows

				$key3 = TbcidadePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = TbcidadePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = TbcidadePeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					TbcidadePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj3 (Tbcidade)
				$obj3->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpais rows

				$key4 = TbpaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = TbpaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = TbpaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					TbpaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj4 (Tbpais)
				$obj4->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key5 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = TblogradouroPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					TblogradouroPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj5 (Tblogradouro)
				$obj5->addTbalunobackupRelatedByCep($obj1);

			} // if joined row is not null

				// Add objects for joined Tbcursoversao rows

				$key6 = TbcursoversaoPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = TbcursoversaoPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = TbcursoversaoPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					TbcursoversaoPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj6 (Tbcursoversao)
				$obj6->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbtipoingresso rows

				$key7 = TbtipoingressoPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = TbtipoingressoPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = TbtipoingressoPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					TbtipoingressoPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj7 (Tbtipoingresso)
				$obj7->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunosituacao rows

				$key8 = TbalunosituacaoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = TbalunosituacaoPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = TbalunosituacaoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					TbalunosituacaoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj8 (Tbalunosituacao)
				$obj8->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key9 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = TbinstexternaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					TbinstexternaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj9 (Tbinstexterna)
				$obj9->addTbalunobackupRelatedByIdDestino($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key10 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = TbinstexternaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					TbinstexternaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj10 (Tbinstexterna)
				$obj10->addTbalunobackupRelatedById2grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key11 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = TbinstexternaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					TbinstexternaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj11 (Tbinstexterna)
				$obj11->addTbalunobackupRelatedById3grau($obj1);

			} // if joined row is not null

				// Add objects for joined Tbinstexterna rows

				$key12 = TbinstexternaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = TbinstexternaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$cls = TbinstexternaPeer::getOMClass(false);

					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					TbinstexternaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj12 (Tbinstexterna)
				$obj12->addTbalunobackupRelatedByIdTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tblogradouro rows

				$key13 = TblogradouroPeer::getPrimaryKeyHashFromRow($row, $startcol13);
				if ($key13 !== null) {
					$obj13 = TblogradouroPeer::getInstanceFromPool($key13);
					if (!$obj13) {
	
						$cls = TblogradouroPeer::getOMClass(false);

					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					TblogradouroPeer::addInstanceToPool($obj13, $key13);
				} // if $obj13 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj13 (Tblogradouro)
				$obj13->addTbalunobackupRelatedByCepTrabalho($obj1);

			} // if joined row is not null

				// Add objects for joined Tbpolos rows

				$key14 = TbpolosPeer::getPrimaryKeyHashFromRow($row, $startcol14);
				if ($key14 !== null) {
					$obj14 = TbpolosPeer::getInstanceFromPool($key14);
					if (!$obj14) {
	
						$cls = TbpolosPeer::getOMClass(false);

					$obj14 = new $cls();
					$obj14->hydrate($row, $startcol14);
					TbpolosPeer::addInstanceToPool($obj14, $key14);
				} // if $obj14 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj14 (Tbpolos)
				$obj14->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbalunoracacor rows

				$key15 = TbalunoracacorPeer::getPrimaryKeyHashFromRow($row, $startcol15);
				if ($key15 !== null) {
					$obj15 = TbalunoracacorPeer::getInstanceFromPool($key15);
					if (!$obj15) {
	
						$cls = TbalunoracacorPeer::getOMClass(false);

					$obj15 = new $cls();
					$obj15->hydrate($row, $startcol15);
					TbalunoracacorPeer::addInstanceToPool($obj15, $key15);
				} // if $obj15 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj15 (Tbalunoracacor)
				$obj15->addTbalunobackup($obj1);

			} // if joined row is not null

				// Add objects for joined Tbreligiao rows

				$key16 = TbreligiaoPeer::getPrimaryKeyHashFromRow($row, $startcol16);
				if ($key16 !== null) {
					$obj16 = TbreligiaoPeer::getInstanceFromPool($key16);
					if (!$obj16) {
	
						$cls = TbreligiaoPeer::getOMClass(false);

					$obj16 = new $cls();
					$obj16->hydrate($row, $startcol16);
					TbreligiaoPeer::addInstanceToPool($obj16, $key16);
				} // if $obj16 already loaded

				// Add the $obj1 (Tbalunobackup) to the collection in $obj16 (Tbreligiao)
				$obj16->addTbalunobackup($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseTbalunobackupPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseTbalunobackupPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new TbalunobackupTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? TbalunobackupPeer::CLASS_DEFAULT : TbalunobackupPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a Tbalunobackup or Criteria object.
	 *
	 * @param      mixed $values Criteria or Tbalunobackup object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbalunobackupPeer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseTbalunobackupPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Tbalunobackup object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbalunobackupPeer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseTbalunobackupPeer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Tbalunobackup or Criteria object.
	 *
	 * @param      mixed $values Criteria or Tbalunobackup object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbalunobackupPeer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseTbalunobackupPeer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(TbalunobackupPeer::MATRICULA);
			$selectCriteria->add(TbalunobackupPeer::MATRICULA, $criteria->remove(TbalunobackupPeer::MATRICULA), $comparison);

		} else { // $values is Tbalunobackup object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseTbalunobackupPeer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseTbalunobackupPeer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the tbalunobackup table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(TbalunobackupPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			TbalunobackupPeer::clearInstancePool();
			TbalunobackupPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Tbalunobackup or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Tbalunobackup object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			TbalunobackupPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Tbalunobackup) {
			// invalidate the cache for this single object
			TbalunobackupPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(TbalunobackupPeer::MATRICULA, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				TbalunobackupPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			TbalunobackupPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Tbalunobackup object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Tbalunobackup $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Tbalunobackup $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(TbalunobackupPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(TbalunobackupPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(TbalunobackupPeer::DATABASE_NAME, TbalunobackupPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      string $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Tbalunobackup
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = TbalunobackupPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(TbalunobackupPeer::DATABASE_NAME);
		$criteria->add(TbalunobackupPeer::MATRICULA, $pk);

		$v = TbalunobackupPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(TbalunobackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(TbalunobackupPeer::DATABASE_NAME);
			$criteria->add(TbalunobackupPeer::MATRICULA, $pks, Criteria::IN);
			$objs = TbalunobackupPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseTbalunobackupPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseTbalunobackupPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseTbalunobackupPeer::buildTableMap();

