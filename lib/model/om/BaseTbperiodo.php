<?php

/**
 * Base class that represents a row from the 'tbperiodo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:54 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTbperiodo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbperiodoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_periodo field.
	 * @var        int
	 */
	protected $id_periodo;

	/**
	 * The value for the descricao field.
	 * @var        string
	 */
	protected $descricao;

	/**
	 * The value for the ano field.
	 * @var        int
	 */
	protected $ano;

	/**
	 * The value for the semestre field.
	 * @var        int
	 */
	protected $semestre;

	/**
	 * The value for the periodo field.
	 * @var        int
	 */
	protected $periodo;

	/**
	 * The value for the dt_inicio field.
	 * @var        string
	 */
	protected $dt_inicio;

	/**
	 * The value for the dt_fim field.
	 * @var        string
	 */
	protected $dt_fim;

	/**
	 * The value for the dt_fim_notas field.
	 * @var        string
	 */
	protected $dt_fim_notas;

	/**
	 * The value for the dt_inicio_oferta field.
	 * @var        string
	 */
	protected $dt_inicio_oferta;

	/**
	 * The value for the dt_fim_oferta field.
	 * @var        string
	 */
	protected $dt_fim_oferta;

	/**
	 * The value for the dt_inicio_fila field.
	 * @var        string
	 */
	protected $dt_inicio_fila;

	/**
	 * The value for the dt_fim_fila field.
	 * @var        string
	 */
	protected $dt_fim_fila;

	/**
	 * The value for the dt_inicio_resultado field.
	 * @var        string
	 */
	protected $dt_inicio_resultado;

	/**
	 * The value for the dt_fim_resultado field.
	 * @var        string
	 */
	protected $dt_fim_resultado;

	/**
	 * The value for the dt_inicio_oferta_cadastro field.
	 * @var        string
	 */
	protected $dt_inicio_oferta_cadastro;

	/**
	 * The value for the dt_fim_oferta_cadastro field.
	 * @var        string
	 */
	protected $dt_fim_oferta_cadastro;

	/**
	 * The value for the dt_inicio_cadastro field.
	 * @var        string
	 */
	protected $dt_inicio_cadastro;

	/**
	 * The value for the dt_fim_cadastro field.
	 * @var        string
	 */
	protected $dt_fim_cadastro;

	/**
	 * The value for the dt_inicio_ajuste field.
	 * @var        string
	 */
	protected $dt_inicio_ajuste;

	/**
	 * The value for the dt_fim_ajuste field.
	 * @var        string
	 */
	protected $dt_fim_ajuste;

	/**
	 * The value for the dt_inicio_ajuste_fila field.
	 * @var        string
	 */
	protected $dt_inicio_ajuste_fila;

	/**
	 * The value for the dt_fim_ajuste_fila field.
	 * @var        string
	 */
	protected $dt_fim_ajuste_fila;

	/**
	 * The value for the dt_inicio_ajuste_resultado field.
	 * @var        string
	 */
	protected $dt_inicio_ajuste_resultado;

	/**
	 * The value for the dt_fim_ajuste_resultado field.
	 * @var        string
	 */
	protected $dt_fim_ajuste_resultado;

	/**
	 * The value for the dt_inicio_trancamento field.
	 * @var        string
	 */
	protected $dt_inicio_trancamento;

	/**
	 * The value for the dt_fim_trancamento field.
	 * @var        string
	 */
	protected $dt_fim_trancamento;

	/**
	 * The value for the sucinto field.
	 * @var        string
	 */
	protected $sucinto;

	/**
	 * The value for the id_nivel field.
	 * @var        int
	 */
	protected $id_nivel;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbcursonivel
	 */
	protected $aTbcursonivel;

	/**
	 * @var        array Tbfilacalouros[] Collection to store aggregation of Tbfilacalouros objects.
	 */
	protected $collTbfilacalouross;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbfilacalouross.
	 */
	private $lastTbfilacalourosCriteria = null;

	/**
	 * @var        array Tbhistorico[] Collection to store aggregation of Tbhistorico objects.
	 */
	protected $collTbhistoricos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbhistoricos.
	 */
	private $lastTbhistoricoCriteria = null;

	/**
	 * @var        array Tboferta[] Collection to store aggregation of Tboferta objects.
	 */
	protected $collTbofertas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertas.
	 */
	private $lastTbofertaCriteria = null;

	/**
	 * @var        array Tbprofessorticket[] Collection to store aggregation of Tbprofessorticket objects.
	 */
	protected $collTbprofessortickets;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbprofessortickets.
	 */
	private $lastTbprofessorticketCriteria = null;

	/**
	 * @var        array Tbturma[] Collection to store aggregation of Tbturma objects.
	 */
	protected $collTbturmas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbturmas.
	 */
	private $lastTbturmaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbperiodoPeer';

	/**
	 * Get the [id_periodo] column value.
	 * 
	 * @return     int
	 */
	public function getIdPeriodo()
	{
		return $this->id_periodo;
	}

	/**
	 * Get the [descricao] column value.
	 * 
	 * @return     string
	 */
	public function getDescricao()
	{
		return $this->descricao;
	}

	/**
	 * Get the [ano] column value.
	 * 
	 * @return     int
	 */
	public function getAno()
	{
		return $this->ano;
	}

	/**
	 * Get the [semestre] column value.
	 * 
	 * @return     int
	 */
	public function getSemestre()
	{
		return $this->semestre;
	}

	/**
	 * Get the [periodo] column value.
	 * 
	 * @return     int
	 */
	public function getPeriodo()
	{
		return $this->periodo;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicio($format = 'Y-m-d')
	{
		if ($this->dt_inicio === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFim($format = 'Y-m-d')
	{
		if ($this->dt_fim === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_notas] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimNotas($format = 'Y-m-d')
	{
		if ($this->dt_fim_notas === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_notas);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_notas, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_oferta] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioOferta($format = 'Y-m-d')
	{
		if ($this->dt_inicio_oferta === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_oferta);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_oferta, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_oferta] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimOferta($format = 'Y-m-d')
	{
		if ($this->dt_fim_oferta === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_oferta);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_oferta, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_fila] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioFila($format = 'Y-m-d')
	{
		if ($this->dt_inicio_fila === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_fila);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_fila, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_fila] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimFila($format = 'Y-m-d')
	{
		if ($this->dt_fim_fila === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_fila);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_fila, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_resultado] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioResultado($format = 'Y-m-d')
	{
		if ($this->dt_inicio_resultado === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_resultado);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_resultado, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_resultado] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimResultado($format = 'Y-m-d')
	{
		if ($this->dt_fim_resultado === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_resultado);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_resultado, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_oferta_cadastro] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioOfertaCadastro($format = 'Y-m-d')
	{
		if ($this->dt_inicio_oferta_cadastro === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_oferta_cadastro);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_oferta_cadastro, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_oferta_cadastro] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimOfertaCadastro($format = 'Y-m-d')
	{
		if ($this->dt_fim_oferta_cadastro === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_oferta_cadastro);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_oferta_cadastro, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_cadastro] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioCadastro($format = 'Y-m-d')
	{
		if ($this->dt_inicio_cadastro === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_cadastro);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_cadastro, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_cadastro] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimCadastro($format = 'Y-m-d')
	{
		if ($this->dt_fim_cadastro === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_cadastro);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_cadastro, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_ajuste] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioAjuste($format = 'Y-m-d')
	{
		if ($this->dt_inicio_ajuste === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_ajuste);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_ajuste, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_ajuste] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimAjuste($format = 'Y-m-d')
	{
		if ($this->dt_fim_ajuste === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_ajuste);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_ajuste, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_ajuste_fila] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioAjusteFila($format = 'Y-m-d')
	{
		if ($this->dt_inicio_ajuste_fila === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_ajuste_fila);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_ajuste_fila, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_ajuste_fila] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimAjusteFila($format = 'Y-m-d')
	{
		if ($this->dt_fim_ajuste_fila === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_ajuste_fila);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_ajuste_fila, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_ajuste_resultado] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioAjusteResultado($format = 'Y-m-d')
	{
		if ($this->dt_inicio_ajuste_resultado === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_ajuste_resultado);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_ajuste_resultado, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_ajuste_resultado] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimAjusteResultado($format = 'Y-m-d')
	{
		if ($this->dt_fim_ajuste_resultado === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_ajuste_resultado);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_ajuste_resultado, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio_trancamento] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicioTrancamento($format = 'Y-m-d')
	{
		if ($this->dt_inicio_trancamento === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio_trancamento);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio_trancamento, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim_trancamento] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFimTrancamento($format = 'Y-m-d')
	{
		if ($this->dt_fim_trancamento === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim_trancamento);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim_trancamento, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [sucinto] column value.
	 * 
	 * @return     string
	 */
	public function getSucinto()
	{
		return $this->sucinto;
	}

	/**
	 * Get the [id_nivel] column value.
	 * 
	 * @return     int
	 */
	public function getIdNivel()
	{
		return $this->id_nivel;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [id_periodo] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setIdPeriodo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_periodo !== $v) {
			$this->id_periodo = $v;
			$this->modifiedColumns[] = TbperiodoPeer::ID_PERIODO;
		}

		return $this;
	} // setIdPeriodo()

	/**
	 * Set the value of [descricao] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDescricao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descricao !== $v) {
			$this->descricao = $v;
			$this->modifiedColumns[] = TbperiodoPeer::DESCRICAO;
		}

		return $this;
	} // setDescricao()

	/**
	 * Set the value of [ano] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setAno($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ano !== $v) {
			$this->ano = $v;
			$this->modifiedColumns[] = TbperiodoPeer::ANO;
		}

		return $this;
	} // setAno()

	/**
	 * Set the value of [semestre] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setSemestre($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->semestre !== $v) {
			$this->semestre = $v;
			$this->modifiedColumns[] = TbperiodoPeer::SEMESTRE;
		}

		return $this;
	} // setSemestre()

	/**
	 * Set the value of [periodo] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setPeriodo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->periodo !== $v) {
			$this->periodo = $v;
			$this->modifiedColumns[] = TbperiodoPeer::PERIODO;
		}

		return $this;
	} // setPeriodo()

	/**
	 * Sets the value of [dt_inicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio !== null && $tmpDt = new DateTime($this->dt_inicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO;
			}
		} // if either are not null

		return $this;
	} // setDtInicio()

	/**
	 * Sets the value of [dt_fim] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFim($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim !== null && $tmpDt = new DateTime($this->dt_fim)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM;
			}
		} // if either are not null

		return $this;
	} // setDtFim()

	/**
	 * Sets the value of [dt_fim_notas] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimNotas($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_notas !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_notas !== null && $tmpDt = new DateTime($this->dt_fim_notas)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_notas = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_NOTAS;
			}
		} // if either are not null

		return $this;
	} // setDtFimNotas()

	/**
	 * Sets the value of [dt_inicio_oferta] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioOferta($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_oferta !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_oferta !== null && $tmpDt = new DateTime($this->dt_inicio_oferta)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_oferta = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_OFERTA;
			}
		} // if either are not null

		return $this;
	} // setDtInicioOferta()

	/**
	 * Sets the value of [dt_fim_oferta] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimOferta($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_oferta !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_oferta !== null && $tmpDt = new DateTime($this->dt_fim_oferta)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_oferta = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_OFERTA;
			}
		} // if either are not null

		return $this;
	} // setDtFimOferta()

	/**
	 * Sets the value of [dt_inicio_fila] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioFila($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_fila !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_fila !== null && $tmpDt = new DateTime($this->dt_inicio_fila)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_fila = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_FILA;
			}
		} // if either are not null

		return $this;
	} // setDtInicioFila()

	/**
	 * Sets the value of [dt_fim_fila] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimFila($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_fila !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_fila !== null && $tmpDt = new DateTime($this->dt_fim_fila)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_fila = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_FILA;
			}
		} // if either are not null

		return $this;
	} // setDtFimFila()

	/**
	 * Sets the value of [dt_inicio_resultado] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioResultado($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_resultado !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_resultado !== null && $tmpDt = new DateTime($this->dt_inicio_resultado)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_resultado = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_RESULTADO;
			}
		} // if either are not null

		return $this;
	} // setDtInicioResultado()

	/**
	 * Sets the value of [dt_fim_resultado] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimResultado($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_resultado !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_resultado !== null && $tmpDt = new DateTime($this->dt_fim_resultado)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_resultado = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_RESULTADO;
			}
		} // if either are not null

		return $this;
	} // setDtFimResultado()

	/**
	 * Sets the value of [dt_inicio_oferta_cadastro] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioOfertaCadastro($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_oferta_cadastro !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_oferta_cadastro !== null && $tmpDt = new DateTime($this->dt_inicio_oferta_cadastro)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_oferta_cadastro = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO;
			}
		} // if either are not null

		return $this;
	} // setDtInicioOfertaCadastro()

	/**
	 * Sets the value of [dt_fim_oferta_cadastro] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimOfertaCadastro($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_oferta_cadastro !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_oferta_cadastro !== null && $tmpDt = new DateTime($this->dt_fim_oferta_cadastro)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_oferta_cadastro = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_OFERTA_CADASTRO;
			}
		} // if either are not null

		return $this;
	} // setDtFimOfertaCadastro()

	/**
	 * Sets the value of [dt_inicio_cadastro] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioCadastro($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_cadastro !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_cadastro !== null && $tmpDt = new DateTime($this->dt_inicio_cadastro)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_cadastro = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_CADASTRO;
			}
		} // if either are not null

		return $this;
	} // setDtInicioCadastro()

	/**
	 * Sets the value of [dt_fim_cadastro] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimCadastro($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_cadastro !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_cadastro !== null && $tmpDt = new DateTime($this->dt_fim_cadastro)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_cadastro = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_CADASTRO;
			}
		} // if either are not null

		return $this;
	} // setDtFimCadastro()

	/**
	 * Sets the value of [dt_inicio_ajuste] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioAjuste($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_ajuste !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_ajuste !== null && $tmpDt = new DateTime($this->dt_inicio_ajuste)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_ajuste = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_AJUSTE;
			}
		} // if either are not null

		return $this;
	} // setDtInicioAjuste()

	/**
	 * Sets the value of [dt_fim_ajuste] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimAjuste($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_ajuste !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_ajuste !== null && $tmpDt = new DateTime($this->dt_fim_ajuste)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_ajuste = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_AJUSTE;
			}
		} // if either are not null

		return $this;
	} // setDtFimAjuste()

	/**
	 * Sets the value of [dt_inicio_ajuste_fila] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioAjusteFila($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_ajuste_fila !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_ajuste_fila !== null && $tmpDt = new DateTime($this->dt_inicio_ajuste_fila)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_ajuste_fila = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_AJUSTE_FILA;
			}
		} // if either are not null

		return $this;
	} // setDtInicioAjusteFila()

	/**
	 * Sets the value of [dt_fim_ajuste_fila] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimAjusteFila($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_ajuste_fila !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_ajuste_fila !== null && $tmpDt = new DateTime($this->dt_fim_ajuste_fila)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_ajuste_fila = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_AJUSTE_FILA;
			}
		} // if either are not null

		return $this;
	} // setDtFimAjusteFila()

	/**
	 * Sets the value of [dt_inicio_ajuste_resultado] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioAjusteResultado($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_ajuste_resultado !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_ajuste_resultado !== null && $tmpDt = new DateTime($this->dt_inicio_ajuste_resultado)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_ajuste_resultado = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO;
			}
		} // if either are not null

		return $this;
	} // setDtInicioAjusteResultado()

	/**
	 * Sets the value of [dt_fim_ajuste_resultado] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimAjusteResultado($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_ajuste_resultado !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_ajuste_resultado !== null && $tmpDt = new DateTime($this->dt_fim_ajuste_resultado)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_ajuste_resultado = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO;
			}
		} // if either are not null

		return $this;
	} // setDtFimAjusteResultado()

	/**
	 * Sets the value of [dt_inicio_trancamento] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtInicioTrancamento($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio_trancamento !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio_trancamento !== null && $tmpDt = new DateTime($this->dt_inicio_trancamento)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio_trancamento = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_INICIO_TRANCAMENTO;
			}
		} // if either are not null

		return $this;
	} // setDtInicioTrancamento()

	/**
	 * Sets the value of [dt_fim_trancamento] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setDtFimTrancamento($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim_trancamento !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim_trancamento !== null && $tmpDt = new DateTime($this->dt_fim_trancamento)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim_trancamento = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::DT_FIM_TRANCAMENTO;
			}
		} // if either are not null

		return $this;
	} // setDtFimTrancamento()

	/**
	 * Set the value of [sucinto] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setSucinto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sucinto !== $v) {
			$this->sucinto = $v;
			$this->modifiedColumns[] = TbperiodoPeer::SUCINTO;
		}

		return $this;
	} // setSucinto()

	/**
	 * Set the value of [id_nivel] column.
	 * 
	 * @param      int $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setIdNivel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_nivel !== $v) {
			$this->id_nivel = $v;
			$this->modifiedColumns[] = TbperiodoPeer::ID_NIVEL;
		}

		if ($this->aTbcursonivel !== null && $this->aTbcursonivel->getIdNivel() !== $v) {
			$this->aTbcursonivel = null;
		}

		return $this;
	} // setIdNivel()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbperiodoPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbperiodoPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tbperiodo The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbperiodoPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_periodo = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->descricao = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->ano = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->semestre = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->periodo = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->dt_inicio = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->dt_fim = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->dt_fim_notas = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->dt_inicio_oferta = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->dt_fim_oferta = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->dt_inicio_fila = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->dt_fim_fila = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->dt_inicio_resultado = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->dt_fim_resultado = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->dt_inicio_oferta_cadastro = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->dt_fim_oferta_cadastro = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->dt_inicio_cadastro = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->dt_fim_cadastro = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->dt_inicio_ajuste = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->dt_fim_ajuste = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->dt_inicio_ajuste_fila = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->dt_fim_ajuste_fila = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->dt_inicio_ajuste_resultado = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->dt_fim_ajuste_resultado = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->dt_inicio_trancamento = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->dt_fim_trancamento = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->sucinto = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->id_nivel = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->created_at = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->updated_at = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->created_by = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->updated_by = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 32; // 32 = TbperiodoPeer::NUM_COLUMNS - TbperiodoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tbperiodo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbcursonivel !== null && $this->id_nivel !== $this->aTbcursonivel->getIdNivel()) {
			$this->aTbcursonivel = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbperiodoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbperiodoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbcursonivel = null;
			$this->collTbfilacalouross = null;
			$this->lastTbfilacalourosCriteria = null;

			$this->collTbhistoricos = null;
			$this->lastTbhistoricoCriteria = null;

			$this->collTbofertas = null;
			$this->lastTbofertaCriteria = null;

			$this->collTbprofessortickets = null;
			$this->lastTbprofessorticketCriteria = null;

			$this->collTbturmas = null;
			$this->lastTbturmaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbperiodoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbperiodo:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbperiodoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbperiodo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbperiodoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTbperiodo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbperiodoPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbperiodoPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTbperiodo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbperiodoPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbcursonivel !== null) {
				if ($this->aTbcursonivel->isModified() || $this->aTbcursonivel->isNew()) {
					$affectedRows += $this->aTbcursonivel->save($con);
				}
				$this->setTbcursonivel($this->aTbcursonivel);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TbperiodoPeer::ID_PERIODO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbperiodoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdPeriodo($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TbperiodoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTbfilacalouross !== null) {
				foreach ($this->collTbfilacalouross as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbhistoricos !== null) {
				foreach ($this->collTbhistoricos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertas !== null) {
				foreach ($this->collTbofertas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbprofessortickets !== null) {
				foreach ($this->collTbprofessortickets as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbturmas !== null) {
				foreach ($this->collTbturmas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbcursonivel !== null) {
				if (!$this->aTbcursonivel->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcursonivel->getValidationFailures());
				}
			}


			if (($retval = TbperiodoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTbfilacalouross !== null) {
					foreach ($this->collTbfilacalouross as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbhistoricos !== null) {
					foreach ($this->collTbhistoricos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertas !== null) {
					foreach ($this->collTbofertas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbprofessortickets !== null) {
					foreach ($this->collTbprofessortickets as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbturmas !== null) {
					foreach ($this->collTbturmas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbperiodoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdPeriodo();
				break;
			case 1:
				return $this->getDescricao();
				break;
			case 2:
				return $this->getAno();
				break;
			case 3:
				return $this->getSemestre();
				break;
			case 4:
				return $this->getPeriodo();
				break;
			case 5:
				return $this->getDtInicio();
				break;
			case 6:
				return $this->getDtFim();
				break;
			case 7:
				return $this->getDtFimNotas();
				break;
			case 8:
				return $this->getDtInicioOferta();
				break;
			case 9:
				return $this->getDtFimOferta();
				break;
			case 10:
				return $this->getDtInicioFila();
				break;
			case 11:
				return $this->getDtFimFila();
				break;
			case 12:
				return $this->getDtInicioResultado();
				break;
			case 13:
				return $this->getDtFimResultado();
				break;
			case 14:
				return $this->getDtInicioOfertaCadastro();
				break;
			case 15:
				return $this->getDtFimOfertaCadastro();
				break;
			case 16:
				return $this->getDtInicioCadastro();
				break;
			case 17:
				return $this->getDtFimCadastro();
				break;
			case 18:
				return $this->getDtInicioAjuste();
				break;
			case 19:
				return $this->getDtFimAjuste();
				break;
			case 20:
				return $this->getDtInicioAjusteFila();
				break;
			case 21:
				return $this->getDtFimAjusteFila();
				break;
			case 22:
				return $this->getDtInicioAjusteResultado();
				break;
			case 23:
				return $this->getDtFimAjusteResultado();
				break;
			case 24:
				return $this->getDtInicioTrancamento();
				break;
			case 25:
				return $this->getDtFimTrancamento();
				break;
			case 26:
				return $this->getSucinto();
				break;
			case 27:
				return $this->getIdNivel();
				break;
			case 28:
				return $this->getCreatedAt();
				break;
			case 29:
				return $this->getUpdatedAt();
				break;
			case 30:
				return $this->getCreatedBy();
				break;
			case 31:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbperiodoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdPeriodo(),
			$keys[1] => $this->getDescricao(),
			$keys[2] => $this->getAno(),
			$keys[3] => $this->getSemestre(),
			$keys[4] => $this->getPeriodo(),
			$keys[5] => $this->getDtInicio(),
			$keys[6] => $this->getDtFim(),
			$keys[7] => $this->getDtFimNotas(),
			$keys[8] => $this->getDtInicioOferta(),
			$keys[9] => $this->getDtFimOferta(),
			$keys[10] => $this->getDtInicioFila(),
			$keys[11] => $this->getDtFimFila(),
			$keys[12] => $this->getDtInicioResultado(),
			$keys[13] => $this->getDtFimResultado(),
			$keys[14] => $this->getDtInicioOfertaCadastro(),
			$keys[15] => $this->getDtFimOfertaCadastro(),
			$keys[16] => $this->getDtInicioCadastro(),
			$keys[17] => $this->getDtFimCadastro(),
			$keys[18] => $this->getDtInicioAjuste(),
			$keys[19] => $this->getDtFimAjuste(),
			$keys[20] => $this->getDtInicioAjusteFila(),
			$keys[21] => $this->getDtFimAjusteFila(),
			$keys[22] => $this->getDtInicioAjusteResultado(),
			$keys[23] => $this->getDtFimAjusteResultado(),
			$keys[24] => $this->getDtInicioTrancamento(),
			$keys[25] => $this->getDtFimTrancamento(),
			$keys[26] => $this->getSucinto(),
			$keys[27] => $this->getIdNivel(),
			$keys[28] => $this->getCreatedAt(),
			$keys[29] => $this->getUpdatedAt(),
			$keys[30] => $this->getCreatedBy(),
			$keys[31] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbperiodoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdPeriodo($value);
				break;
			case 1:
				$this->setDescricao($value);
				break;
			case 2:
				$this->setAno($value);
				break;
			case 3:
				$this->setSemestre($value);
				break;
			case 4:
				$this->setPeriodo($value);
				break;
			case 5:
				$this->setDtInicio($value);
				break;
			case 6:
				$this->setDtFim($value);
				break;
			case 7:
				$this->setDtFimNotas($value);
				break;
			case 8:
				$this->setDtInicioOferta($value);
				break;
			case 9:
				$this->setDtFimOferta($value);
				break;
			case 10:
				$this->setDtInicioFila($value);
				break;
			case 11:
				$this->setDtFimFila($value);
				break;
			case 12:
				$this->setDtInicioResultado($value);
				break;
			case 13:
				$this->setDtFimResultado($value);
				break;
			case 14:
				$this->setDtInicioOfertaCadastro($value);
				break;
			case 15:
				$this->setDtFimOfertaCadastro($value);
				break;
			case 16:
				$this->setDtInicioCadastro($value);
				break;
			case 17:
				$this->setDtFimCadastro($value);
				break;
			case 18:
				$this->setDtInicioAjuste($value);
				break;
			case 19:
				$this->setDtFimAjuste($value);
				break;
			case 20:
				$this->setDtInicioAjusteFila($value);
				break;
			case 21:
				$this->setDtFimAjusteFila($value);
				break;
			case 22:
				$this->setDtInicioAjusteResultado($value);
				break;
			case 23:
				$this->setDtFimAjusteResultado($value);
				break;
			case 24:
				$this->setDtInicioTrancamento($value);
				break;
			case 25:
				$this->setDtFimTrancamento($value);
				break;
			case 26:
				$this->setSucinto($value);
				break;
			case 27:
				$this->setIdNivel($value);
				break;
			case 28:
				$this->setCreatedAt($value);
				break;
			case 29:
				$this->setUpdatedAt($value);
				break;
			case 30:
				$this->setCreatedBy($value);
				break;
			case 31:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbperiodoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdPeriodo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDescricao($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAno($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSemestre($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPeriodo($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDtInicio($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDtFim($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDtFimNotas($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDtInicioOferta($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDtFimOferta($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDtInicioFila($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDtFimFila($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDtInicioResultado($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDtFimResultado($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDtInicioOfertaCadastro($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDtFimOfertaCadastro($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDtInicioCadastro($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDtFimCadastro($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDtInicioAjuste($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDtFimAjuste($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDtInicioAjusteFila($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDtFimAjusteFila($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setDtInicioAjusteResultado($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setDtFimAjusteResultado($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setDtInicioTrancamento($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setDtFimTrancamento($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setSucinto($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setIdNivel($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCreatedAt($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setUpdatedAt($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setCreatedBy($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setUpdatedBy($arr[$keys[31]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbperiodoPeer::ID_PERIODO)) $criteria->add(TbperiodoPeer::ID_PERIODO, $this->id_periodo);
		if ($this->isColumnModified(TbperiodoPeer::DESCRICAO)) $criteria->add(TbperiodoPeer::DESCRICAO, $this->descricao);
		if ($this->isColumnModified(TbperiodoPeer::ANO)) $criteria->add(TbperiodoPeer::ANO, $this->ano);
		if ($this->isColumnModified(TbperiodoPeer::SEMESTRE)) $criteria->add(TbperiodoPeer::SEMESTRE, $this->semestre);
		if ($this->isColumnModified(TbperiodoPeer::PERIODO)) $criteria->add(TbperiodoPeer::PERIODO, $this->periodo);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO)) $criteria->add(TbperiodoPeer::DT_INICIO, $this->dt_inicio);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM)) $criteria->add(TbperiodoPeer::DT_FIM, $this->dt_fim);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_NOTAS)) $criteria->add(TbperiodoPeer::DT_FIM_NOTAS, $this->dt_fim_notas);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_OFERTA)) $criteria->add(TbperiodoPeer::DT_INICIO_OFERTA, $this->dt_inicio_oferta);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_OFERTA)) $criteria->add(TbperiodoPeer::DT_FIM_OFERTA, $this->dt_fim_oferta);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_FILA)) $criteria->add(TbperiodoPeer::DT_INICIO_FILA, $this->dt_inicio_fila);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_FILA)) $criteria->add(TbperiodoPeer::DT_FIM_FILA, $this->dt_fim_fila);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_RESULTADO)) $criteria->add(TbperiodoPeer::DT_INICIO_RESULTADO, $this->dt_inicio_resultado);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_RESULTADO)) $criteria->add(TbperiodoPeer::DT_FIM_RESULTADO, $this->dt_fim_resultado);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO)) $criteria->add(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO, $this->dt_inicio_oferta_cadastro);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_OFERTA_CADASTRO)) $criteria->add(TbperiodoPeer::DT_FIM_OFERTA_CADASTRO, $this->dt_fim_oferta_cadastro);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_CADASTRO)) $criteria->add(TbperiodoPeer::DT_INICIO_CADASTRO, $this->dt_inicio_cadastro);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_CADASTRO)) $criteria->add(TbperiodoPeer::DT_FIM_CADASTRO, $this->dt_fim_cadastro);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_AJUSTE)) $criteria->add(TbperiodoPeer::DT_INICIO_AJUSTE, $this->dt_inicio_ajuste);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_AJUSTE)) $criteria->add(TbperiodoPeer::DT_FIM_AJUSTE, $this->dt_fim_ajuste);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_AJUSTE_FILA)) $criteria->add(TbperiodoPeer::DT_INICIO_AJUSTE_FILA, $this->dt_inicio_ajuste_fila);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_AJUSTE_FILA)) $criteria->add(TbperiodoPeer::DT_FIM_AJUSTE_FILA, $this->dt_fim_ajuste_fila);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO)) $criteria->add(TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO, $this->dt_inicio_ajuste_resultado);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO)) $criteria->add(TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO, $this->dt_fim_ajuste_resultado);
		if ($this->isColumnModified(TbperiodoPeer::DT_INICIO_TRANCAMENTO)) $criteria->add(TbperiodoPeer::DT_INICIO_TRANCAMENTO, $this->dt_inicio_trancamento);
		if ($this->isColumnModified(TbperiodoPeer::DT_FIM_TRANCAMENTO)) $criteria->add(TbperiodoPeer::DT_FIM_TRANCAMENTO, $this->dt_fim_trancamento);
		if ($this->isColumnModified(TbperiodoPeer::SUCINTO)) $criteria->add(TbperiodoPeer::SUCINTO, $this->sucinto);
		if ($this->isColumnModified(TbperiodoPeer::ID_NIVEL)) $criteria->add(TbperiodoPeer::ID_NIVEL, $this->id_nivel);
		if ($this->isColumnModified(TbperiodoPeer::CREATED_AT)) $criteria->add(TbperiodoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbperiodoPeer::UPDATED_AT)) $criteria->add(TbperiodoPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbperiodoPeer::CREATED_BY)) $criteria->add(TbperiodoPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbperiodoPeer::UPDATED_BY)) $criteria->add(TbperiodoPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);

		$criteria->add(TbperiodoPeer::ID_PERIODO, $this->id_periodo);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdPeriodo();
	}

	/**
	 * Generic method to set the primary key (id_periodo column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdPeriodo($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tbperiodo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setDescricao($this->descricao);

		$copyObj->setAno($this->ano);

		$copyObj->setSemestre($this->semestre);

		$copyObj->setPeriodo($this->periodo);

		$copyObj->setDtInicio($this->dt_inicio);

		$copyObj->setDtFim($this->dt_fim);

		$copyObj->setDtFimNotas($this->dt_fim_notas);

		$copyObj->setDtInicioOferta($this->dt_inicio_oferta);

		$copyObj->setDtFimOferta($this->dt_fim_oferta);

		$copyObj->setDtInicioFila($this->dt_inicio_fila);

		$copyObj->setDtFimFila($this->dt_fim_fila);

		$copyObj->setDtInicioResultado($this->dt_inicio_resultado);

		$copyObj->setDtFimResultado($this->dt_fim_resultado);

		$copyObj->setDtInicioOfertaCadastro($this->dt_inicio_oferta_cadastro);

		$copyObj->setDtFimOfertaCadastro($this->dt_fim_oferta_cadastro);

		$copyObj->setDtInicioCadastro($this->dt_inicio_cadastro);

		$copyObj->setDtFimCadastro($this->dt_fim_cadastro);

		$copyObj->setDtInicioAjuste($this->dt_inicio_ajuste);

		$copyObj->setDtFimAjuste($this->dt_fim_ajuste);

		$copyObj->setDtInicioAjusteFila($this->dt_inicio_ajuste_fila);

		$copyObj->setDtFimAjusteFila($this->dt_fim_ajuste_fila);

		$copyObj->setDtInicioAjusteResultado($this->dt_inicio_ajuste_resultado);

		$copyObj->setDtFimAjusteResultado($this->dt_fim_ajuste_resultado);

		$copyObj->setDtInicioTrancamento($this->dt_inicio_trancamento);

		$copyObj->setDtFimTrancamento($this->dt_fim_trancamento);

		$copyObj->setSucinto($this->sucinto);

		$copyObj->setIdNivel($this->id_nivel);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTbfilacalouross() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbfilacalouros($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbhistoricos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbhistorico($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTboferta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbprofessortickets() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbprofessorticket($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbturmas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbturma($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdPeriodo(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tbperiodo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbperiodoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbperiodoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbcursonivel object.
	 *
	 * @param      Tbcursonivel $v
	 * @return     Tbperiodo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcursonivel(Tbcursonivel $v = null)
	{
		if ($v === null) {
			$this->setIdNivel(NULL);
		} else {
			$this->setIdNivel($v->getIdNivel());
		}

		$this->aTbcursonivel = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcursonivel object, it will not be re-added.
		if ($v !== null) {
			$v->addTbperiodo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcursonivel object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcursonivel The associated Tbcursonivel object.
	 * @throws     PropelException
	 */
	public function getTbcursonivel(PropelPDO $con = null)
	{
		if ($this->aTbcursonivel === null && ($this->id_nivel !== null)) {
			$this->aTbcursonivel = TbcursonivelPeer::retrieveByPk($this->id_nivel);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcursonivel->addTbperiodos($this);
			 */
		}
		return $this->aTbcursonivel;
	}

	/**
	 * Clears out the collTbfilacalouross collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbfilacalouross()
	 */
	public function clearTbfilacalouross()
	{
		$this->collTbfilacalouross = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbfilacalouross collection (array).
	 *
	 * By default this just sets the collTbfilacalouross collection to an empty array (like clearcollTbfilacalouross());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbfilacalouross()
	{
		$this->collTbfilacalouross = array();
	}

	/**
	 * Gets an array of Tbfilacalouros objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbperiodo has previously been saved, it will retrieve
	 * related Tbfilacalouross from storage. If this Tbperiodo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbfilacalouros[]
	 * @throws     PropelException
	 */
	public function getTbfilacalouross($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
			   $this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

				TbfilacalourosPeer::addSelectColumns($criteria);
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

				TbfilacalourosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
					$this->collTbfilacalouross = TbfilacalourosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;
		return $this->collTbfilacalouross;
	}

	/**
	 * Returns the number of related Tbfilacalouros objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbfilacalouros objects.
	 * @throws     PropelException
	 */
	public function countTbfilacalouross(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

				$count = TbfilacalourosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

				if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
					$count = TbfilacalourosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbfilacalouross);
				}
			} else {
				$count = count($this->collTbfilacalouross);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbfilacalouros object to this object
	 * through the Tbfilacalouros foreign key attribute.
	 *
	 * @param      Tbfilacalouros $l Tbfilacalouros
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbfilacalouros(Tbfilacalouros $l)
	{
		if ($this->collTbfilacalouross === null) {
			$this->initTbfilacalouross();
		}
		if (!in_array($l, $this->collTbfilacalouross, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbfilacalouross, $l);
			$l->setTbperiodo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbfilacalouross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbfilacalourossJoinTboferta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;

		return $this->collTbfilacalouross;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbfilacalouross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbfilacalourossJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilacalourosPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;

		return $this->collTbfilacalouross;
	}

	/**
	 * Clears out the collTbhistoricos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbhistoricos()
	 */
	public function clearTbhistoricos()
	{
		$this->collTbhistoricos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbhistoricos collection (array).
	 *
	 * By default this just sets the collTbhistoricos collection to an empty array (like clearcollTbhistoricos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbhistoricos()
	{
		$this->collTbhistoricos = array();
	}

	/**
	 * Gets an array of Tbhistorico objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbperiodo has previously been saved, it will retrieve
	 * related Tbhistoricos from storage. If this Tbperiodo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbhistorico[]
	 * @throws     PropelException
	 */
	public function getTbhistoricos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
			   $this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				TbhistoricoPeer::addSelectColumns($criteria);
				$this->collTbhistoricos = TbhistoricoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				TbhistoricoPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
					$this->collTbhistoricos = TbhistoricoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;
		return $this->collTbhistoricos;
	}

	/**
	 * Returns the number of related Tbhistorico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbhistorico objects.
	 * @throws     PropelException
	 */
	public function countTbhistoricos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				$count = TbhistoricoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
					$count = TbhistoricoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbhistoricos);
				}
			} else {
				$count = count($this->collTbhistoricos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbhistorico object to this object
	 * through the Tbhistorico foreign key attribute.
	 *
	 * @param      Tbhistorico $l Tbhistorico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbhistorico(Tbhistorico $l)
	{
		if ($this->collTbhistoricos === null) {
			$this->initTbhistoricos();
		}
		if (!in_array($l, $this->collTbhistoricos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbhistoricos, $l);
			$l->setTbperiodo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbhistoricos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbhistoricosJoinTbaluno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbaluno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbaluno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;

		return $this->collTbhistoricos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbhistoricos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbhistoricosJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;

		return $this->collTbhistoricos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbhistoricos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbhistoricosJoinTbconceito($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbhistoricos === null) {
			if ($this->isNew()) {
				$this->collTbhistoricos = array();
			} else {

				$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbconceito($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbhistoricoPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbhistoricoCriteria) || !$this->lastTbhistoricoCriteria->equals($criteria)) {
				$this->collTbhistoricos = TbhistoricoPeer::doSelectJoinTbconceito($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbhistoricoCriteria = $criteria;

		return $this->collTbhistoricos;
	}

	/**
	 * Clears out the collTbofertas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertas()
	 */
	public function clearTbofertas()
	{
		$this->collTbofertas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertas collection (array).
	 *
	 * By default this just sets the collTbofertas collection to an empty array (like clearcollTbofertas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertas()
	{
		$this->collTbofertas = array();
	}

	/**
	 * Gets an array of Tboferta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbperiodo has previously been saved, it will retrieve
	 * related Tbofertas from storage. If this Tbperiodo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tboferta[]
	 * @throws     PropelException
	 */
	public function getTbofertas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
			   $this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				TbofertaPeer::addSelectColumns($criteria);
				$this->collTbofertas = TbofertaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				TbofertaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
					$this->collTbofertas = TbofertaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertaCriteria = $criteria;
		return $this->collTbofertas;
	}

	/**
	 * Returns the number of related Tboferta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tboferta objects.
	 * @throws     PropelException
	 */
	public function countTbofertas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$count = TbofertaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
					$count = TbofertaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertas);
				}
			} else {
				$count = count($this->collTbofertas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tboferta object to this object
	 * through the Tboferta foreign key attribute.
	 *
	 * @param      Tboferta $l Tboferta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTboferta(Tboferta $l)
	{
		if ($this->collTbofertas === null) {
			$this->initTbofertas();
		}
		if (!in_array($l, $this->collTbofertas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertas, $l);
			$l->setTbperiodo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbturno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbturno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbcursoRelatedByCodCurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbcursoRelatedByCodCursoDestino($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbcursoRelatedByCodCursoDestino($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbsala($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsala($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbprofessorRelatedByIdMatriculaProf($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbprofessorRelatedByIdMatriculaProf2($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbprofessorRelatedByIdMatriculaProf2($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbsetor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbsetor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbofertasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbofertasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbofertas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbofertasJoinTbpolos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertas === null) {
			if ($this->isNew()) {
				$this->collTbofertas = array();
			} else {

				$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbofertas = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbofertaCriteria) || !$this->lastTbofertaCriteria->equals($criteria)) {
				$this->collTbofertas = TbofertaPeer::doSelectJoinTbpolos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertaCriteria = $criteria;

		return $this->collTbofertas;
	}

	/**
	 * Clears out the collTbprofessortickets collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbprofessortickets()
	 */
	public function clearTbprofessortickets()
	{
		$this->collTbprofessortickets = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbprofessortickets collection (array).
	 *
	 * By default this just sets the collTbprofessortickets collection to an empty array (like clearcollTbprofessortickets());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbprofessortickets()
	{
		$this->collTbprofessortickets = array();
	}

	/**
	 * Gets an array of Tbprofessorticket objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbperiodo has previously been saved, it will retrieve
	 * related Tbprofessortickets from storage. If this Tbperiodo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbprofessorticket[]
	 * @throws     PropelException
	 */
	public function getTbprofessortickets($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessortickets === null) {
			if ($this->isNew()) {
			   $this->collTbprofessortickets = array();
			} else {

				$criteria->add(TbprofessorticketPeer::ID_PERIODO, $this->id_periodo);

				TbprofessorticketPeer::addSelectColumns($criteria);
				$this->collTbprofessortickets = TbprofessorticketPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbprofessorticketPeer::ID_PERIODO, $this->id_periodo);

				TbprofessorticketPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbprofessorticketCriteria) || !$this->lastTbprofessorticketCriteria->equals($criteria)) {
					$this->collTbprofessortickets = TbprofessorticketPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbprofessorticketCriteria = $criteria;
		return $this->collTbprofessortickets;
	}

	/**
	 * Returns the number of related Tbprofessorticket objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbprofessorticket objects.
	 * @throws     PropelException
	 */
	public function countTbprofessortickets(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbprofessortickets === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbprofessorticketPeer::ID_PERIODO, $this->id_periodo);

				$count = TbprofessorticketPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbprofessorticketPeer::ID_PERIODO, $this->id_periodo);

				if (!isset($this->lastTbprofessorticketCriteria) || !$this->lastTbprofessorticketCriteria->equals($criteria)) {
					$count = TbprofessorticketPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbprofessortickets);
				}
			} else {
				$count = count($this->collTbprofessortickets);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbprofessorticket object to this object
	 * through the Tbprofessorticket foreign key attribute.
	 *
	 * @param      Tbprofessorticket $l Tbprofessorticket
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbprofessorticket(Tbprofessorticket $l)
	{
		if ($this->collTbprofessortickets === null) {
			$this->initTbprofessortickets();
		}
		if (!in_array($l, $this->collTbprofessortickets, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbprofessortickets, $l);
			$l->setTbperiodo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbprofessortickets from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbprofessorticketsJoinTbprofessor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbprofessortickets === null) {
			if ($this->isNew()) {
				$this->collTbprofessortickets = array();
			} else {

				$criteria->add(TbprofessorticketPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbprofessortickets = TbprofessorticketPeer::doSelectJoinTbprofessor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbprofessorticketPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbprofessorticketCriteria) || !$this->lastTbprofessorticketCriteria->equals($criteria)) {
				$this->collTbprofessortickets = TbprofessorticketPeer::doSelectJoinTbprofessor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbprofessorticketCriteria = $criteria;

		return $this->collTbprofessortickets;
	}

	/**
	 * Clears out the collTbturmas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbturmas()
	 */
	public function clearTbturmas()
	{
		$this->collTbturmas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbturmas collection (array).
	 *
	 * By default this just sets the collTbturmas collection to an empty array (like clearcollTbturmas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbturmas()
	{
		$this->collTbturmas = array();
	}

	/**
	 * Gets an array of Tbturma objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tbperiodo has previously been saved, it will retrieve
	 * related Tbturmas from storage. If this Tbperiodo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbturma[]
	 * @throws     PropelException
	 */
	public function getTbturmas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
			   $this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

				TbturmaPeer::addSelectColumns($criteria);
				$this->collTbturmas = TbturmaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

				TbturmaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
					$this->collTbturmas = TbturmaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbturmaCriteria = $criteria;
		return $this->collTbturmas;
	}

	/**
	 * Returns the number of related Tbturma objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbturma objects.
	 * @throws     PropelException
	 */
	public function countTbturmas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

				$count = TbturmaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

				if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
					$count = TbturmaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbturmas);
				}
			} else {
				$count = count($this->collTbturmas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbturma object to this object
	 * through the Tbturma foreign key attribute.
	 *
	 * @param      Tbturma $l Tbturma
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbturma(Tbturma $l)
	{
		if ($this->collTbturmas === null) {
			$this->initTbturmas();
		}
		if (!in_array($l, $this->collTbturmas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbturmas, $l);
			$l->setTbperiodo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbturmas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbturmasJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbturmas = TbturmaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
				$this->collTbturmas = TbturmaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaCriteria = $criteria;

		return $this->collTbturmas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tbperiodo is new, it will return
	 * an empty collection; or if this Tbperiodo has previously
	 * been saved, it will retrieve related Tbturmas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tbperiodo.
	 */
	public function getTbturmasJoinTboferta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbperiodoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

				$this->collTbturmas = TbturmaPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaPeer::ID_PERIODO, $this->id_periodo);

			if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
				$this->collTbturmas = TbturmaPeer::doSelectJoinTboferta($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaCriteria = $criteria;

		return $this->collTbturmas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTbfilacalouross) {
				foreach ((array) $this->collTbfilacalouross as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbhistoricos) {
				foreach ((array) $this->collTbhistoricos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertas) {
				foreach ((array) $this->collTbofertas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbprofessortickets) {
				foreach ((array) $this->collTbprofessortickets as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbturmas) {
				foreach ((array) $this->collTbturmas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTbfilacalouross = null;
		$this->collTbhistoricos = null;
		$this->collTbofertas = null;
		$this->collTbprofessortickets = null;
		$this->collTbturmas = null;
			$this->aTbcursonivel = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTbperiodo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTbperiodo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTbperiodo
