<?php


/**
 * Base class that represents a query for the 'tbalunoperiodo' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue Apr 23 17:54:38 2013
 *
 * @method TbalunoperiodoQuery orderByIdAlunoPeriodo($order = Criteria::ASC) Order by the id_aluno_periodo column
 * @method TbalunoperiodoQuery orderByMatricula($order = Criteria::ASC) Order by the matricula column
 * @method TbalunoperiodoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method TbalunoperiodoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method TbalunoperiodoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method TbalunoperiodoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 * @method TbalunoperiodoQuery orderByIdPeriodo($order = Criteria::ASC) Order by the id_periodo column
 *
 * @method TbalunoperiodoQuery groupByIdAlunoPeriodo() Group by the id_aluno_periodo column
 * @method TbalunoperiodoQuery groupByMatricula() Group by the matricula column
 * @method TbalunoperiodoQuery groupByCreatedAt() Group by the created_at column
 * @method TbalunoperiodoQuery groupByUpdatedAt() Group by the updated_at column
 * @method TbalunoperiodoQuery groupByCreatedBy() Group by the created_by column
 * @method TbalunoperiodoQuery groupByUpdatedBy() Group by the updated_by column
 * @method TbalunoperiodoQuery groupByIdPeriodo() Group by the id_periodo column
 *
 * @method TbalunoperiodoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method TbalunoperiodoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method TbalunoperiodoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method Tbalunoperiodo findOne(PropelPDO $con = null) Return the first Tbalunoperiodo matching the query
 * @method Tbalunoperiodo findOneOrCreate(PropelPDO $con = null) Return the first Tbalunoperiodo matching the query, or a new Tbalunoperiodo object populated from the query conditions when no match is found
 *
 * @method Tbalunoperiodo findOneByIdAlunoPeriodo(int $id_aluno_periodo) Return the first Tbalunoperiodo filtered by the id_aluno_periodo column
 * @method Tbalunoperiodo findOneByMatricula(string $matricula) Return the first Tbalunoperiodo filtered by the matricula column
 * @method Tbalunoperiodo findOneByCreatedAt(string $created_at) Return the first Tbalunoperiodo filtered by the created_at column
 * @method Tbalunoperiodo findOneByUpdatedAt(string $updated_at) Return the first Tbalunoperiodo filtered by the updated_at column
 * @method Tbalunoperiodo findOneByCreatedBy(string $created_by) Return the first Tbalunoperiodo filtered by the created_by column
 * @method Tbalunoperiodo findOneByUpdatedBy(string $updated_by) Return the first Tbalunoperiodo filtered by the updated_by column
 * @method Tbalunoperiodo findOneByIdPeriodo(string $id_periodo) Return the first Tbalunoperiodo filtered by the id_periodo column
 *
 * @method array findByIdAlunoPeriodo(int $id_aluno_periodo) Return Tbalunoperiodo objects filtered by the id_aluno_periodo column
 * @method array findByMatricula(string $matricula) Return Tbalunoperiodo objects filtered by the matricula column
 * @method array findByCreatedAt(string $created_at) Return Tbalunoperiodo objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Tbalunoperiodo objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Tbalunoperiodo objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Tbalunoperiodo objects filtered by the updated_by column
 * @method array findByIdPeriodo(string $id_periodo) Return Tbalunoperiodo objects filtered by the id_periodo column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTbalunoperiodoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseTbalunoperiodoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Tbalunoperiodo', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new TbalunoperiodoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     TbalunoperiodoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return TbalunoperiodoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof TbalunoperiodoQuery) {
            return $criteria;
        }
        $query = new TbalunoperiodoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Tbalunoperiodo|Tbalunoperiodo[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = TbalunoperiodoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(TbalunoperiodoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Tbalunoperiodo A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT ID_ALUNO_PERIODO, MATRICULA, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY, ID_PERIODO FROM tbalunoperiodo WHERE ID_ALUNO_PERIODO = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Tbalunoperiodo();
            $obj->hydrate($row);
            TbalunoperiodoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Tbalunoperiodo|Tbalunoperiodo[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Tbalunoperiodo[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(TbalunoperiodoPeer::ID_ALUNO_PERIODO, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(TbalunoperiodoPeer::ID_ALUNO_PERIODO, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id_aluno_periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdAlunoPeriodo(1234); // WHERE id_aluno_periodo = 1234
     * $query->filterByIdAlunoPeriodo(array(12, 34)); // WHERE id_aluno_periodo IN (12, 34)
     * $query->filterByIdAlunoPeriodo(array('min' => 12)); // WHERE id_aluno_periodo > 12
     * </code>
     *
     * @param     mixed $idAlunoPeriodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByIdAlunoPeriodo($idAlunoPeriodo = null, $comparison = null)
    {
        if (is_array($idAlunoPeriodo) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::ID_ALUNO_PERIODO, $idAlunoPeriodo, $comparison);
    }

    /**
     * Filter the query on the matricula column
     *
     * Example usage:
     * <code>
     * $query->filterByMatricula(1234); // WHERE matricula = 1234
     * $query->filterByMatricula(array(12, 34)); // WHERE matricula IN (12, 34)
     * $query->filterByMatricula(array('min' => 12)); // WHERE matricula > 12
     * </code>
     *
     * @param     mixed $matricula The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByMatricula($matricula = null, $comparison = null)
    {
        if (is_array($matricula)) {
            $useMinMax = false;
            if (isset($matricula['min'])) {
                $this->addUsingAlias(TbalunoperiodoPeer::MATRICULA, $matricula['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($matricula['max'])) {
                $this->addUsingAlias(TbalunoperiodoPeer::MATRICULA, $matricula['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::MATRICULA, $matricula, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(TbalunoperiodoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(TbalunoperiodoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(TbalunoperiodoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(TbalunoperiodoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query on the id_periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByIdPeriodo('fooValue');   // WHERE id_periodo = 'fooValue'
     * $query->filterByIdPeriodo('%fooValue%'); // WHERE id_periodo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $idPeriodo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function filterByIdPeriodo($idPeriodo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($idPeriodo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $idPeriodo)) {
                $idPeriodo = str_replace('*', '%', $idPeriodo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(TbalunoperiodoPeer::ID_PERIODO, $idPeriodo, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   Tbalunoperiodo $tbalunoperiodo Object to remove from the list of results
     *
     * @return TbalunoperiodoQuery The current query, for fluid interface
     */
    public function prune($tbalunoperiodo = null)
    {
        if ($tbalunoperiodo) {
            $this->addUsingAlias(TbalunoperiodoPeer::ID_ALUNO_PERIODO, $tbalunoperiodo->getIdAlunoPeriodo(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
