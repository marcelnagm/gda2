<?php

/**
 * Base static class for performing query and update operations on the 'censo2009' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:56 2015
 *
 * @package    lib.model.om
 */
abstract class BaseCenso2009Peer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'censo2009';

	/** the related Propel class for this table */
	const OM_CLASS = 'Censo2009';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Censo2009';

	/** the related TableMap class for this table */
	const TM_CLASS = 'Censo2009TableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 94;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ALUNO_C1 field */
	const ALUNO_C1 = 'censo2009.ALUNO_C1';

	/** the column name for the ALUNO_C2 field */
	const ALUNO_C2 = 'censo2009.ALUNO_C2';

	/** the column name for the ALUNO_C3 field */
	const ALUNO_C3 = 'censo2009.ALUNO_C3';

	/** the column name for the ALUNO_C4_NOME field */
	const ALUNO_C4_NOME = 'censo2009.ALUNO_C4_NOME';

	/** the column name for the ALUNO_C5_CPF field */
	const ALUNO_C5_CPF = 'censo2009.ALUNO_C5_CPF';

	/** the column name for the ALUNO_C6_DOC_ESTRANGEIRO field */
	const ALUNO_C6_DOC_ESTRANGEIRO = 'censo2009.ALUNO_C6_DOC_ESTRANGEIRO';

	/** the column name for the ALUNO_C7_NASCIMENTO field */
	const ALUNO_C7_NASCIMENTO = 'censo2009.ALUNO_C7_NASCIMENTO';

	/** the column name for the ALUNO_C8_SEXO field */
	const ALUNO_C8_SEXO = 'censo2009.ALUNO_C8_SEXO';

	/** the column name for the ALUNO_C9_COR_RACA field */
	const ALUNO_C9_COR_RACA = 'censo2009.ALUNO_C9_COR_RACA';

	/** the column name for the ALUNO_C10_MAE field */
	const ALUNO_C10_MAE = 'censo2009.ALUNO_C10_MAE';

	/** the column name for the ALUNO_C11_NACIONALIDADE field */
	const ALUNO_C11_NACIONALIDADE = 'censo2009.ALUNO_C11_NACIONALIDADE';

	/** the column name for the ALUNO_C12_UF_NASCIMENTO field */
	const ALUNO_C12_UF_NASCIMENTO = 'censo2009.ALUNO_C12_UF_NASCIMENTO';

	/** the column name for the ALUNO_C13_CIDADE_NASCIMENTO field */
	const ALUNO_C13_CIDADE_NASCIMENTO = 'censo2009.ALUNO_C13_CIDADE_NASCIMENTO';

	/** the column name for the ALUNO_C14_PAIS_ORIGEM field */
	const ALUNO_C14_PAIS_ORIGEM = 'censo2009.ALUNO_C14_PAIS_ORIGEM';

	/** the column name for the ALUNO_C15_DEFICIENCIA field */
	const ALUNO_C15_DEFICIENCIA = 'censo2009.ALUNO_C15_DEFICIENCIA';

	/** the column name for the ALUNO_C16_DEF_CEGUERIA field */
	const ALUNO_C16_DEF_CEGUERIA = 'censo2009.ALUNO_C16_DEF_CEGUERIA';

	/** the column name for the ALUNO_C17_DEF_BAIXA_VISAO field */
	const ALUNO_C17_DEF_BAIXA_VISAO = 'censo2009.ALUNO_C17_DEF_BAIXA_VISAO';

	/** the column name for the ALUNO_C18_DEF_SURDEZ field */
	const ALUNO_C18_DEF_SURDEZ = 'censo2009.ALUNO_C18_DEF_SURDEZ';

	/** the column name for the ALUNO_C19_DEF_AUDITIVA field */
	const ALUNO_C19_DEF_AUDITIVA = 'censo2009.ALUNO_C19_DEF_AUDITIVA';

	/** the column name for the ALUNO_C20_DEF_FISICA field */
	const ALUNO_C20_DEF_FISICA = 'censo2009.ALUNO_C20_DEF_FISICA';

	/** the column name for the ALUNO_C21_DEF_SURDOCEGUEIRA field */
	const ALUNO_C21_DEF_SURDOCEGUEIRA = 'censo2009.ALUNO_C21_DEF_SURDOCEGUEIRA';

	/** the column name for the ALUNO_C22_DEF_MULTIPLA field */
	const ALUNO_C22_DEF_MULTIPLA = 'censo2009.ALUNO_C22_DEF_MULTIPLA';

	/** the column name for the ALUNO_C23_DEF_MENTAL field */
	const ALUNO_C23_DEF_MENTAL = 'censo2009.ALUNO_C23_DEF_MENTAL';

	/** the column name for the CURSO_C1_TIPO_REG2 field */
	const CURSO_C1_TIPO_REG2 = 'censo2009.CURSO_C1_TIPO_REG2';

	/** the column name for the CURSO_C2_ID_INEP_CURSO field */
	const CURSO_C2_ID_INEP_CURSO = 'censo2009.CURSO_C2_ID_INEP_CURSO';

	/** the column name for the CURSO_C3_COD_POLO_INEP field */
	const CURSO_C3_COD_POLO_INEP = 'censo2009.CURSO_C3_COD_POLO_INEP';

	/** the column name for the CURSO_C4_TURNO_ALUNO field */
	const CURSO_C4_TURNO_ALUNO = 'censo2009.CURSO_C4_TURNO_ALUNO';

	/** the column name for the CURSO_C5_SITUACAO_VINCULO field */
	const CURSO_C5_SITUACAO_VINCULO = 'censo2009.CURSO_C5_SITUACAO_VINCULO';

	/** the column name for the CURSO_C6_DATA_INGRESSO field */
	const CURSO_C6_DATA_INGRESSO = 'censo2009.CURSO_C6_DATA_INGRESSO';

	/** the column name for the CURSO_C7_ALUNO_PUBLICA field */
	const CURSO_C7_ALUNO_PUBLICA = 'censo2009.CURSO_C7_ALUNO_PUBLICA';

	/** the column name for the CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR field */
	const CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR = 'censo2009.CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR';

	/** the column name for the CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM field */
	const CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM = 'censo2009.CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM';

	/** the column name for the CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS field */
	const CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS = 'censo2009.CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS';

	/** the column name for the CURSO_C11_FORMA_INGRESSO_SELECAO_PECG field */
	const CURSO_C11_FORMA_INGRESSO_SELECAO_PECG = 'censo2009.CURSO_C11_FORMA_INGRESSO_SELECAO_PECG';

	/** the column name for the CURSO_C12_FORMA_INGRESSO_OUTRAS field */
	const CURSO_C12_FORMA_INGRESSO_OUTRAS = 'censo2009.CURSO_C12_FORMA_INGRESSO_OUTRAS';

	/** the column name for the CURSO_C13_PROGRAMA_RESERVA_VAGAS field */
	const CURSO_C13_PROGRAMA_RESERVA_VAGAS = 'censo2009.CURSO_C13_PROGRAMA_RESERVA_VAGAS';

	/** the column name for the CURSO_C14_PROGRAMA_RESERVA_VAGAS field */
	const CURSO_C14_PROGRAMA_RESERVA_VAGAS = 'censo2009.CURSO_C14_PROGRAMA_RESERVA_VAGAS';

	/** the column name for the CURSO_C15_PROGRAMA_RESERVA_VAGAS field */
	const CURSO_C15_PROGRAMA_RESERVA_VAGAS = 'censo2009.CURSO_C15_PROGRAMA_RESERVA_VAGAS';

	/** the column name for the CURSO_C16_PROGRAMA_RESERVA_VAGAS field */
	const CURSO_C16_PROGRAMA_RESERVA_VAGAS = 'censo2009.CURSO_C16_PROGRAMA_RESERVA_VAGAS';

	/** the column name for the CURSO_C17_PROGRAMA_RESERVA_VAGAS field */
	const CURSO_C17_PROGRAMA_RESERVA_VAGAS = 'censo2009.CURSO_C17_PROGRAMA_RESERVA_VAGAS';

	/** the column name for the CURSO_C18_PROGRAMA_RESERVA_VAGAS field */
	const CURSO_C18_PROGRAMA_RESERVA_VAGAS = 'censo2009.CURSO_C18_PROGRAMA_RESERVA_VAGAS';

	/** the column name for the CURSO_C19_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C19_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C19_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C20_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C20_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C20_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C21_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C21_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C21_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C22_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C22_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C22_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C23_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C23_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C23_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C24_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C24_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C24_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C25_FINANCIAMENTO_ESTUDANTIL field */
	const CURSO_C25_FINANCIAMENTO_ESTUDANTIL = 'censo2009.CURSO_C25_FINANCIAMENTO_ESTUDANTIL';

	/** the column name for the CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB field */
	const CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB = 'censo2009.CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB';

	/** the column name for the CURSO_C33_APOIO_SOCIAL field */
	const CURSO_C33_APOIO_SOCIAL = 'censo2009.CURSO_C33_APOIO_SOCIAL';

	/** the column name for the CURSO_C34_TIPO_APOIO_SOCIAL field */
	const CURSO_C34_TIPO_APOIO_SOCIAL = 'censo2009.CURSO_C34_TIPO_APOIO_SOCIAL';

	/** the column name for the CURSO_C35_TIPO_APOIO_SOCIAL field */
	const CURSO_C35_TIPO_APOIO_SOCIAL = 'censo2009.CURSO_C35_TIPO_APOIO_SOCIAL';

	/** the column name for the CURSO_C36_TIPO_APOIO_SOCIAL field */
	const CURSO_C36_TIPO_APOIO_SOCIAL = 'censo2009.CURSO_C36_TIPO_APOIO_SOCIAL';

	/** the column name for the CURSO_C37_TIPO_APOIO_SOCIAL field */
	const CURSO_C37_TIPO_APOIO_SOCIAL = 'censo2009.CURSO_C37_TIPO_APOIO_SOCIAL';

	/** the column name for the CURSO_C38_TIPO_APOIO_SOCIAL field */
	const CURSO_C38_TIPO_APOIO_SOCIAL = 'censo2009.CURSO_C38_TIPO_APOIO_SOCIAL';

	/** the column name for the CURSO_C39_TIPO_APOIO_SOCIAL field */
	const CURSO_C39_TIPO_APOIO_SOCIAL = 'censo2009.CURSO_C39_TIPO_APOIO_SOCIAL';

	/** the column name for the CURSO_C40_ATIVIDADE_COMPLEMENTAR field */
	const CURSO_C40_ATIVIDADE_COMPLEMENTAR = 'censo2009.CURSO_C40_ATIVIDADE_COMPLEMENTAR';

	/** the column name for the CURSO_C41_ATIVIDADE_COMPLEMENTAR field */
	const CURSO_C41_ATIVIDADE_COMPLEMENTAR = 'censo2009.CURSO_C41_ATIVIDADE_COMPLEMENTAR';

	/** the column name for the CURSO_C42_BOLSA field */
	const CURSO_C42_BOLSA = 'censo2009.CURSO_C42_BOLSA';

	/** the column name for the CURSO_C43_ATIVIDADE_COMPLEMENTAR field */
	const CURSO_C43_ATIVIDADE_COMPLEMENTAR = 'censo2009.CURSO_C43_ATIVIDADE_COMPLEMENTAR';

	/** the column name for the CURSO_C44_BOLSA field */
	const CURSO_C44_BOLSA = 'censo2009.CURSO_C44_BOLSA';

	/** the column name for the CURSO_C45_ATIVIDADE_COMPLEMENTAR field */
	const CURSO_C45_ATIVIDADE_COMPLEMENTAR = 'censo2009.CURSO_C45_ATIVIDADE_COMPLEMENTAR';

	/** the column name for the CURSO_C46_BOLSA field */
	const CURSO_C46_BOLSA = 'censo2009.CURSO_C46_BOLSA';

	/** the column name for the CURSO_C47_ATIVIDADE_COMPLEMENTAR field */
	const CURSO_C47_ATIVIDADE_COMPLEMENTAR = 'censo2009.CURSO_C47_ATIVIDADE_COMPLEMENTAR';

	/** the column name for the CURSO_C48_BOLSA field */
	const CURSO_C48_BOLSA = 'censo2009.CURSO_C48_BOLSA';

	/** the column name for the CURSO_C49_SEMESTRE_CONCLUSAO field */
	const CURSO_C49_SEMESTRE_CONCLUSAO = 'censo2009.CURSO_C49_SEMESTRE_CONCLUSAO';

	/** the column name for the CURSO_C50_ALUNO_PARFOR field */
	const CURSO_C50_ALUNO_PARFOR = 'censo2009.CURSO_C50_ALUNO_PARFOR';

	/** the column name for the ALUNO_C24_DEF_AUTISMO field */
	const ALUNO_C24_DEF_AUTISMO = 'censo2009.ALUNO_C24_DEF_AUTISMO';

	/** the column name for the ALUNO_C25_DEF_ASPERGER field */
	const ALUNO_C25_DEF_ASPERGER = 'censo2009.ALUNO_C25_DEF_ASPERGER';

	/** the column name for the ALUNO_C26_DEF_RETT field */
	const ALUNO_C26_DEF_RETT = 'censo2009.ALUNO_C26_DEF_RETT';

	/** the column name for the ALUNO_C27_DEF_TDI field */
	const ALUNO_C27_DEF_TDI = 'censo2009.ALUNO_C27_DEF_TDI';

	/** the column name for the ALUNO_C28_DEF_SUPERDOTADO field */
	const ALUNO_C28_DEF_SUPERDOTADO = 'censo2009.ALUNO_C28_DEF_SUPERDOTADO';

	/** the column name for the CURSO_C51_SEMESTRE_REFERENCIA field */
	const CURSO_C51_SEMESTRE_REFERENCIA = 'censo2009.CURSO_C51_SEMESTRE_REFERENCIA';

	/** the column name for the CURSO_C52_CURSO_ORIGEM_TRANSFERENCIA field */
	const CURSO_C52_CURSO_ORIGEM_TRANSFERENCIA = 'censo2009.CURSO_C52_CURSO_ORIGEM_TRANSFERENCIA';

	/** the column name for the CURSO_C53_FORMA_INGRESSO_SERIADA field */
	const CURSO_C53_FORMA_INGRESSO_SERIADA = 'censo2009.CURSO_C53_FORMA_INGRESSO_SERIADA';

	/** the column name for the CURSO_C54_FORMA_INGRESSO_EXOFFICIO field */
	const CURSO_C54_FORMA_INGRESSO_EXOFFICIO = 'censo2009.CURSO_C54_FORMA_INGRESSO_EXOFFICIO';

	/** the column name for the CURSO_C55_FORMA_INGRESSO_JUDICIAL field */
	const CURSO_C55_FORMA_INGRESSO_JUDICIAL = 'censo2009.CURSO_C55_FORMA_INGRESSO_JUDICIAL';

	/** the column name for the CURSO_C56_MOBILIDADE_ACADEMICA field */
	const CURSO_C56_MOBILIDADE_ACADEMICA = 'censo2009.CURSO_C56_MOBILIDADE_ACADEMICA';

	/** the column name for the CURSO_C57_MOBILIDADE_TIPO field */
	const CURSO_C57_MOBILIDADE_TIPO = 'censo2009.CURSO_C57_MOBILIDADE_TIPO';

	/** the column name for the CURSO_C58_MOBILIDADE_IES_DESTINO field */
	const CURSO_C58_MOBILIDADE_IES_DESTINO = 'censo2009.CURSO_C58_MOBILIDADE_IES_DESTINO';

	/** the column name for the CURSO_C59_MOBILIDADE_TIPO_INTERNACIONAL field */
	const CURSO_C59_MOBILIDADE_TIPO_INTERNACIONAL = 'censo2009.CURSO_C59_MOBILIDADE_TIPO_INTERNACIONAL';

	/** the column name for the CURSO_C60_MOBILIDADE_PAIS_DESTINO field */
	const CURSO_C60_MOBILIDADE_PAIS_DESTINO = 'censo2009.CURSO_C60_MOBILIDADE_PAIS_DESTINO';

	/** the column name for the CURSO_C61_SEMESTRE_INGRESSO_CURSO field */
	const CURSO_C61_SEMESTRE_INGRESSO_CURSO = 'censo2009.CURSO_C61_SEMESTRE_INGRESSO_CURSO';

	/** the column name for the CURSO_C62_FORMA_INGRESSO_SELECAO_SIMPLES field */
	const CURSO_C62_FORMA_INGRESSO_SELECAO_SIMPLES = 'censo2009.CURSO_C62_FORMA_INGRESSO_SELECAO_SIMPLES';

	/** the column name for the CURSO_C63_FORMA_INGRESSO_SELECAO_REMANESCENTES field */
	const CURSO_C63_FORMA_INGRESSO_SELECAO_REMANESCENTES = 'censo2009.CURSO_C63_FORMA_INGRESSO_SELECAO_REMANESCENTES';

	/** the column name for the CURSO_C64_FORMA_INGRESSO_SELECAO_ESPECIAIS field */
	const CURSO_C64_FORMA_INGRESSO_SELECAO_ESPECIAIS = 'censo2009.CURSO_C64_FORMA_INGRESSO_SELECAO_ESPECIAIS';

	/** the column name for the EXPORTADO field */
	const EXPORTADO = 'censo2009.EXPORTADO';

	/** the column name for the ID field */
	const ID = 'censo2009.ID';

	/**
	 * An identiy map to hold any loaded instances of Censo2009 objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Censo2009[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('AlunoC1', 'AlunoC2', 'AlunoC3', 'AlunoC4Nome', 'AlunoC5Cpf', 'AlunoC6DocEstrangeiro', 'AlunoC7Nascimento', 'AlunoC8Sexo', 'AlunoC9CorRaca', 'AlunoC10Mae', 'AlunoC11Nacionalidade', 'AlunoC12UfNascimento', 'AlunoC13CidadeNascimento', 'AlunoC14PaisOrigem', 'AlunoC15Deficiencia', 'AlunoC16DefCegueria', 'AlunoC17DefBaixaVisao', 'AlunoC18DefSurdez', 'AlunoC19DefAuditiva', 'AlunoC20DefFisica', 'AlunoC21DefSurdocegueira', 'AlunoC22DefMultipla', 'AlunoC23DefMental', 'CursoC1TipoReg2', 'CursoC2IdInepCurso', 'CursoC3CodPoloInep', 'CursoC4TurnoAluno', 'CursoC5SituacaoVinculo', 'CursoC6DataIngresso', 'CursoC7AlunoPublica', 'CursoC8FormaIngressoSelecaoVestibular', 'CursoC9FormaIngressoSelecaoEnem', 'CursoC10FormaIngressoSelecaoOutros', 'CursoC11FormaIngressoSelecaoPecg', 'CursoC12FormaIngressoOutras', 'CursoC13ProgramaReservaVagas', 'CursoC14ProgramaReservaVagas', 'CursoC15ProgramaReservaVagas', 'CursoC16ProgramaReservaVagas', 'CursoC17ProgramaReservaVagas', 'CursoC18ProgramaReservaVagas', 'CursoC19FinanciamentoEstudantil', 'CursoC20FinanciamentoEstudantil', 'CursoC21FinanciamentoEstudantil', 'CursoC22FinanciamentoEstudantil', 'CursoC23FinanciamentoEstudantil', 'CursoC24FinanciamentoEstudantil', 'CursoC25FinanciamentoEstudantil', 'CursoC26FinanciamentoEstudantilNReemb', 'CursoC27FinanciamentoEstudantilNReemb', 'CursoC28FinanciamentoEstudantilNReemb', 'CursoC29FinanciamentoEstudantilNReemb', 'CursoC30FinanciamentoEstudantilNReemb', 'CursoC31FinanciamentoEstudantilNReemb', 'CursoC32FinanciamentoEstudantilNReemb', 'CursoC33ApoioSocial', 'CursoC34TipoApoioSocial', 'CursoC35TipoApoioSocial', 'CursoC36TipoApoioSocial', 'CursoC37TipoApoioSocial', 'CursoC38TipoApoioSocial', 'CursoC39TipoApoioSocial', 'CursoC40AtividadeComplementar', 'CursoC41AtividadeComplementar', 'CursoC42Bolsa', 'CursoC43AtividadeComplementar', 'CursoC44Bolsa', 'CursoC45AtividadeComplementar', 'CursoC46Bolsa', 'CursoC47AtividadeComplementar', 'CursoC48Bolsa', 'CursoC49SemestreConclusao', 'CursoC50AlunoParfor', 'AlunoC24', 'AlunoC25', 'AlunoC26', 'AlunoC27', 'AlunoC28', 'CursoC51', 'CursoC52', 'CursoC53', 'CursoC54', 'CursoC55', 'CursoC56', 'CursoC57', 'CursoC58', 'CursoC59', 'CursoC60', 'CursoC61', 'CursoC62', 'CursoC63', 'CursoC64', 'Exportado', 'Id', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('alunoC1', 'alunoC2', 'alunoC3', 'alunoC4Nome', 'alunoC5Cpf', 'alunoC6DocEstrangeiro', 'alunoC7Nascimento', 'alunoC8Sexo', 'alunoC9CorRaca', 'alunoC10Mae', 'alunoC11Nacionalidade', 'alunoC12UfNascimento', 'alunoC13CidadeNascimento', 'alunoC14PaisOrigem', 'alunoC15Deficiencia', 'alunoC16DefCegueria', 'alunoC17DefBaixaVisao', 'alunoC18DefSurdez', 'alunoC19DefAuditiva', 'alunoC20DefFisica', 'alunoC21DefSurdocegueira', 'alunoC22DefMultipla', 'alunoC23DefMental', 'cursoC1TipoReg2', 'cursoC2IdInepCurso', 'cursoC3CodPoloInep', 'cursoC4TurnoAluno', 'cursoC5SituacaoVinculo', 'cursoC6DataIngresso', 'cursoC7AlunoPublica', 'cursoC8FormaIngressoSelecaoVestibular', 'cursoC9FormaIngressoSelecaoEnem', 'cursoC10FormaIngressoSelecaoOutros', 'cursoC11FormaIngressoSelecaoPecg', 'cursoC12FormaIngressoOutras', 'cursoC13ProgramaReservaVagas', 'cursoC14ProgramaReservaVagas', 'cursoC15ProgramaReservaVagas', 'cursoC16ProgramaReservaVagas', 'cursoC17ProgramaReservaVagas', 'cursoC18ProgramaReservaVagas', 'cursoC19FinanciamentoEstudantil', 'cursoC20FinanciamentoEstudantil', 'cursoC21FinanciamentoEstudantil', 'cursoC22FinanciamentoEstudantil', 'cursoC23FinanciamentoEstudantil', 'cursoC24FinanciamentoEstudantil', 'cursoC25FinanciamentoEstudantil', 'cursoC26FinanciamentoEstudantilNReemb', 'cursoC27FinanciamentoEstudantilNReemb', 'cursoC28FinanciamentoEstudantilNReemb', 'cursoC29FinanciamentoEstudantilNReemb', 'cursoC30FinanciamentoEstudantilNReemb', 'cursoC31FinanciamentoEstudantilNReemb', 'cursoC32FinanciamentoEstudantilNReemb', 'cursoC33ApoioSocial', 'cursoC34TipoApoioSocial', 'cursoC35TipoApoioSocial', 'cursoC36TipoApoioSocial', 'cursoC37TipoApoioSocial', 'cursoC38TipoApoioSocial', 'cursoC39TipoApoioSocial', 'cursoC40AtividadeComplementar', 'cursoC41AtividadeComplementar', 'cursoC42Bolsa', 'cursoC43AtividadeComplementar', 'cursoC44Bolsa', 'cursoC45AtividadeComplementar', 'cursoC46Bolsa', 'cursoC47AtividadeComplementar', 'cursoC48Bolsa', 'cursoC49SemestreConclusao', 'cursoC50AlunoParfor', 'alunoC24', 'alunoC25', 'alunoC26', 'alunoC27', 'alunoC28', 'cursoC51', 'cursoC52', 'cursoC53', 'cursoC54', 'cursoC55', 'cursoC56', 'cursoC57', 'cursoC58', 'cursoC59', 'cursoC60', 'cursoC61', 'cursoC62', 'cursoC63', 'cursoC64', 'exportado', 'id', ),
		BasePeer::TYPE_COLNAME => array (self::ALUNO_C1, self::ALUNO_C2, self::ALUNO_C3, self::ALUNO_C4_NOME, self::ALUNO_C5_CPF, self::ALUNO_C6_DOC_ESTRANGEIRO, self::ALUNO_C7_NASCIMENTO, self::ALUNO_C8_SEXO, self::ALUNO_C9_COR_RACA, self::ALUNO_C10_MAE, self::ALUNO_C11_NACIONALIDADE, self::ALUNO_C12_UF_NASCIMENTO, self::ALUNO_C13_CIDADE_NASCIMENTO, self::ALUNO_C14_PAIS_ORIGEM, self::ALUNO_C15_DEFICIENCIA, self::ALUNO_C16_DEF_CEGUERIA, self::ALUNO_C17_DEF_BAIXA_VISAO, self::ALUNO_C18_DEF_SURDEZ, self::ALUNO_C19_DEF_AUDITIVA, self::ALUNO_C20_DEF_FISICA, self::ALUNO_C21_DEF_SURDOCEGUEIRA, self::ALUNO_C22_DEF_MULTIPLA, self::ALUNO_C23_DEF_MENTAL, self::CURSO_C1_TIPO_REG2, self::CURSO_C2_ID_INEP_CURSO, self::CURSO_C3_COD_POLO_INEP, self::CURSO_C4_TURNO_ALUNO, self::CURSO_C5_SITUACAO_VINCULO, self::CURSO_C6_DATA_INGRESSO, self::CURSO_C7_ALUNO_PUBLICA, self::CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR, self::CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM, self::CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS, self::CURSO_C11_FORMA_INGRESSO_SELECAO_PECG, self::CURSO_C12_FORMA_INGRESSO_OUTRAS, self::CURSO_C13_PROGRAMA_RESERVA_VAGAS, self::CURSO_C14_PROGRAMA_RESERVA_VAGAS, self::CURSO_C15_PROGRAMA_RESERVA_VAGAS, self::CURSO_C16_PROGRAMA_RESERVA_VAGAS, self::CURSO_C17_PROGRAMA_RESERVA_VAGAS, self::CURSO_C18_PROGRAMA_RESERVA_VAGAS, self::CURSO_C19_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C20_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C21_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C22_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C23_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C24_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C25_FINANCIAMENTO_ESTUDANTIL, self::CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB, self::CURSO_C33_APOIO_SOCIAL, self::CURSO_C34_TIPO_APOIO_SOCIAL, self::CURSO_C35_TIPO_APOIO_SOCIAL, self::CURSO_C36_TIPO_APOIO_SOCIAL, self::CURSO_C37_TIPO_APOIO_SOCIAL, self::CURSO_C38_TIPO_APOIO_SOCIAL, self::CURSO_C39_TIPO_APOIO_SOCIAL, self::CURSO_C40_ATIVIDADE_COMPLEMENTAR, self::CURSO_C41_ATIVIDADE_COMPLEMENTAR, self::CURSO_C42_BOLSA, self::CURSO_C43_ATIVIDADE_COMPLEMENTAR, self::CURSO_C44_BOLSA, self::CURSO_C45_ATIVIDADE_COMPLEMENTAR, self::CURSO_C46_BOLSA, self::CURSO_C47_ATIVIDADE_COMPLEMENTAR, self::CURSO_C48_BOLSA, self::CURSO_C49_SEMESTRE_CONCLUSAO, self::CURSO_C50_ALUNO_PARFOR, self::ALUNO_C24_DEF_AUTISMO, self::ALUNO_C25_DEF_ASPERGER, self::ALUNO_C26_DEF_RETT, self::ALUNO_C27_DEF_TDI, self::ALUNO_C28_DEF_SUPERDOTADO, self::CURSO_C51_SEMESTRE_REFERENCIA, self::CURSO_C52_CURSO_ORIGEM_TRANSFERENCIA, self::CURSO_C53_FORMA_INGRESSO_SERIADA, self::CURSO_C54_FORMA_INGRESSO_EXOFFICIO, self::CURSO_C55_FORMA_INGRESSO_JUDICIAL, self::CURSO_C56_MOBILIDADE_ACADEMICA, self::CURSO_C57_MOBILIDADE_TIPO, self::CURSO_C58_MOBILIDADE_IES_DESTINO, self::CURSO_C59_MOBILIDADE_TIPO_INTERNACIONAL, self::CURSO_C60_MOBILIDADE_PAIS_DESTINO, self::CURSO_C61_SEMESTRE_INGRESSO_CURSO, self::CURSO_C62_FORMA_INGRESSO_SELECAO_SIMPLES, self::CURSO_C63_FORMA_INGRESSO_SELECAO_REMANESCENTES, self::CURSO_C64_FORMA_INGRESSO_SELECAO_ESPECIAIS, self::EXPORTADO, self::ID, ),
		BasePeer::TYPE_FIELDNAME => array ('aluno_c1', 'aluno_c2', 'aluno_c3', 'aluno_c4_nome', 'aluno_c5_cpf', 'aluno_c6_doc_estrangeiro', 'aluno_c7_nascimento', 'aluno_c8_sexo', 'aluno_c9_cor_raca', 'aluno_c10_mae', 'aluno_c11_nacionalidade', 'aluno_c12_uf_nascimento', 'aluno_c13_cidade_nascimento', 'aluno_c14_pais_origem', 'aluno_c15_deficiencia', 'aluno_c16_def_cegueria', 'aluno_c17_def_baixa_visao', 'aluno_c18_def_surdez', 'aluno_c19_def_auditiva', 'aluno_c20_def_fisica', 'aluno_c21_def_surdocegueira', 'aluno_c22_def_multipla', 'aluno_c23_def_mental', 'curso_c1_tipo_reg2', 'curso_c2_id_inep_curso', 'curso_c3_cod_polo_inep', 'curso_c4_turno_aluno', 'curso_c5_situacao_vinculo', 'curso_c6_data_ingresso', 'curso_c7_aluno_publica', 'curso_c8_forma_ingresso_selecao_vestibular', 'curso_c9_forma_ingresso_selecao_enem', 'curso_c10_forma_ingresso_selecao_outros', 'curso_c11_forma_ingresso_selecao_pecg', 'curso_c12_forma_ingresso_outras', 'curso_c13_programa_reserva_vagas', 'curso_c14_programa_reserva_vagas', 'curso_c15_programa_reserva_vagas', 'curso_c16_programa_reserva_vagas', 'curso_c17_programa_reserva_vagas', 'curso_c18_programa_reserva_vagas', 'curso_c19_financiamento_estudantil', 'curso_c20_financiamento_estudantil', 'curso_c21_financiamento_estudantil', 'curso_c22_financiamento_estudantil', 'curso_c23_financiamento_estudantil', 'curso_c24_financiamento_estudantil', 'curso_c25_financiamento_estudantil', 'curso_c26_financiamento_estudantil_n_reemb', 'curso_c27_financiamento_estudantil_n_reemb', 'curso_c28_financiamento_estudantil_n_reemb', 'curso_c29_financiamento_estudantil_n_reemb', 'curso_c30_financiamento_estudantil_n_reemb', 'curso_c31_financiamento_estudantil_n_reemb', 'curso_c32_financiamento_estudantil_n_reemb', 'curso_c33_apoio_social', 'curso_c34_tipo_apoio_social', 'curso_c35_tipo_apoio_social', 'curso_c36_tipo_apoio_social', 'curso_c37_tipo_apoio_social', 'curso_c38_tipo_apoio_social', 'curso_c39_tipo_apoio_social', 'curso_c40_atividade_complementar', 'curso_c41_atividade_complementar', 'curso_c42_bolsa', 'curso_c43_atividade_complementar', 'curso_c44_bolsa', 'curso_c45_atividade_complementar', 'curso_c46_bolsa', 'curso_c47_atividade_complementar', 'curso_c48_bolsa', 'curso_c49_semestre_conclusao', 'curso_c50_aluno_parfor', 'aluno_c24_def_autismo', 'aluno_c25_def_asperger', 'aluno_c26_def_rett', 'aluno_c27_def_tdi', 'aluno_c28_def_superdotado', 'curso_c51_semestre_referencia', 'curso_c52_curso_origem_transferencia', 'curso_c53_forma_ingresso_seriada', 'curso_c54_forma_ingresso_exofficio', 'curso_c55_forma_ingresso_judicial', 'curso_c56_mobilidade_academica', 'curso_c57_mobilidade_tipo', 'curso_c58_mobilidade_ies_destino', 'curso_c59_mobilidade_tipo_internacional', 'curso_c60_mobilidade_pais_destino', 'curso_c61_semestre_ingresso_curso', 'curso_c62_forma_ingresso_selecao_simples', 'curso_c63_forma_ingresso_selecao_remanescentes', 'curso_c64_forma_ingresso_selecao_especiais', 'exportado', 'id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('AlunoC1' => 0, 'AlunoC2' => 1, 'AlunoC3' => 2, 'AlunoC4Nome' => 3, 'AlunoC5Cpf' => 4, 'AlunoC6DocEstrangeiro' => 5, 'AlunoC7Nascimento' => 6, 'AlunoC8Sexo' => 7, 'AlunoC9CorRaca' => 8, 'AlunoC10Mae' => 9, 'AlunoC11Nacionalidade' => 10, 'AlunoC12UfNascimento' => 11, 'AlunoC13CidadeNascimento' => 12, 'AlunoC14PaisOrigem' => 13, 'AlunoC15Deficiencia' => 14, 'AlunoC16DefCegueria' => 15, 'AlunoC17DefBaixaVisao' => 16, 'AlunoC18DefSurdez' => 17, 'AlunoC19DefAuditiva' => 18, 'AlunoC20DefFisica' => 19, 'AlunoC21DefSurdocegueira' => 20, 'AlunoC22DefMultipla' => 21, 'AlunoC23DefMental' => 22, 'CursoC1TipoReg2' => 23, 'CursoC2IdInepCurso' => 24, 'CursoC3CodPoloInep' => 25, 'CursoC4TurnoAluno' => 26, 'CursoC5SituacaoVinculo' => 27, 'CursoC6DataIngresso' => 28, 'CursoC7AlunoPublica' => 29, 'CursoC8FormaIngressoSelecaoVestibular' => 30, 'CursoC9FormaIngressoSelecaoEnem' => 31, 'CursoC10FormaIngressoSelecaoOutros' => 32, 'CursoC11FormaIngressoSelecaoPecg' => 33, 'CursoC12FormaIngressoOutras' => 34, 'CursoC13ProgramaReservaVagas' => 35, 'CursoC14ProgramaReservaVagas' => 36, 'CursoC15ProgramaReservaVagas' => 37, 'CursoC16ProgramaReservaVagas' => 38, 'CursoC17ProgramaReservaVagas' => 39, 'CursoC18ProgramaReservaVagas' => 40, 'CursoC19FinanciamentoEstudantil' => 41, 'CursoC20FinanciamentoEstudantil' => 42, 'CursoC21FinanciamentoEstudantil' => 43, 'CursoC22FinanciamentoEstudantil' => 44, 'CursoC23FinanciamentoEstudantil' => 45, 'CursoC24FinanciamentoEstudantil' => 46, 'CursoC25FinanciamentoEstudantil' => 47, 'CursoC26FinanciamentoEstudantilNReemb' => 48, 'CursoC27FinanciamentoEstudantilNReemb' => 49, 'CursoC28FinanciamentoEstudantilNReemb' => 50, 'CursoC29FinanciamentoEstudantilNReemb' => 51, 'CursoC30FinanciamentoEstudantilNReemb' => 52, 'CursoC31FinanciamentoEstudantilNReemb' => 53, 'CursoC32FinanciamentoEstudantilNReemb' => 54, 'CursoC33ApoioSocial' => 55, 'CursoC34TipoApoioSocial' => 56, 'CursoC35TipoApoioSocial' => 57, 'CursoC36TipoApoioSocial' => 58, 'CursoC37TipoApoioSocial' => 59, 'CursoC38TipoApoioSocial' => 60, 'CursoC39TipoApoioSocial' => 61, 'CursoC40AtividadeComplementar' => 62, 'CursoC41AtividadeComplementar' => 63, 'CursoC42Bolsa' => 64, 'CursoC43AtividadeComplementar' => 65, 'CursoC44Bolsa' => 66, 'CursoC45AtividadeComplementar' => 67, 'CursoC46Bolsa' => 68, 'CursoC47AtividadeComplementar' => 69, 'CursoC48Bolsa' => 70, 'CursoC49SemestreConclusao' => 71, 'CursoC50AlunoParfor' => 72, 'AlunoC24' => 73, 'AlunoC25' => 74, 'AlunoC26' => 75, 'AlunoC27' => 76, 'AlunoC28' => 77, 'CursoC51' => 78, 'CursoC52' => 79, 'CursoC53' => 80, 'CursoC54' => 81, 'CursoC55' => 82, 'CursoC56' => 83, 'CursoC57' => 84, 'CursoC58' => 85, 'CursoC59' => 86, 'CursoC60' => 87, 'CursoC61' => 88, 'CursoC62' => 89, 'CursoC63' => 90, 'CursoC64' => 91, 'Exportado' => 92, 'Id' => 93, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('alunoC1' => 0, 'alunoC2' => 1, 'alunoC3' => 2, 'alunoC4Nome' => 3, 'alunoC5Cpf' => 4, 'alunoC6DocEstrangeiro' => 5, 'alunoC7Nascimento' => 6, 'alunoC8Sexo' => 7, 'alunoC9CorRaca' => 8, 'alunoC10Mae' => 9, 'alunoC11Nacionalidade' => 10, 'alunoC12UfNascimento' => 11, 'alunoC13CidadeNascimento' => 12, 'alunoC14PaisOrigem' => 13, 'alunoC15Deficiencia' => 14, 'alunoC16DefCegueria' => 15, 'alunoC17DefBaixaVisao' => 16, 'alunoC18DefSurdez' => 17, 'alunoC19DefAuditiva' => 18, 'alunoC20DefFisica' => 19, 'alunoC21DefSurdocegueira' => 20, 'alunoC22DefMultipla' => 21, 'alunoC23DefMental' => 22, 'cursoC1TipoReg2' => 23, 'cursoC2IdInepCurso' => 24, 'cursoC3CodPoloInep' => 25, 'cursoC4TurnoAluno' => 26, 'cursoC5SituacaoVinculo' => 27, 'cursoC6DataIngresso' => 28, 'cursoC7AlunoPublica' => 29, 'cursoC8FormaIngressoSelecaoVestibular' => 30, 'cursoC9FormaIngressoSelecaoEnem' => 31, 'cursoC10FormaIngressoSelecaoOutros' => 32, 'cursoC11FormaIngressoSelecaoPecg' => 33, 'cursoC12FormaIngressoOutras' => 34, 'cursoC13ProgramaReservaVagas' => 35, 'cursoC14ProgramaReservaVagas' => 36, 'cursoC15ProgramaReservaVagas' => 37, 'cursoC16ProgramaReservaVagas' => 38, 'cursoC17ProgramaReservaVagas' => 39, 'cursoC18ProgramaReservaVagas' => 40, 'cursoC19FinanciamentoEstudantil' => 41, 'cursoC20FinanciamentoEstudantil' => 42, 'cursoC21FinanciamentoEstudantil' => 43, 'cursoC22FinanciamentoEstudantil' => 44, 'cursoC23FinanciamentoEstudantil' => 45, 'cursoC24FinanciamentoEstudantil' => 46, 'cursoC25FinanciamentoEstudantil' => 47, 'cursoC26FinanciamentoEstudantilNReemb' => 48, 'cursoC27FinanciamentoEstudantilNReemb' => 49, 'cursoC28FinanciamentoEstudantilNReemb' => 50, 'cursoC29FinanciamentoEstudantilNReemb' => 51, 'cursoC30FinanciamentoEstudantilNReemb' => 52, 'cursoC31FinanciamentoEstudantilNReemb' => 53, 'cursoC32FinanciamentoEstudantilNReemb' => 54, 'cursoC33ApoioSocial' => 55, 'cursoC34TipoApoioSocial' => 56, 'cursoC35TipoApoioSocial' => 57, 'cursoC36TipoApoioSocial' => 58, 'cursoC37TipoApoioSocial' => 59, 'cursoC38TipoApoioSocial' => 60, 'cursoC39TipoApoioSocial' => 61, 'cursoC40AtividadeComplementar' => 62, 'cursoC41AtividadeComplementar' => 63, 'cursoC42Bolsa' => 64, 'cursoC43AtividadeComplementar' => 65, 'cursoC44Bolsa' => 66, 'cursoC45AtividadeComplementar' => 67, 'cursoC46Bolsa' => 68, 'cursoC47AtividadeComplementar' => 69, 'cursoC48Bolsa' => 70, 'cursoC49SemestreConclusao' => 71, 'cursoC50AlunoParfor' => 72, 'alunoC24' => 73, 'alunoC25' => 74, 'alunoC26' => 75, 'alunoC27' => 76, 'alunoC28' => 77, 'cursoC51' => 78, 'cursoC52' => 79, 'cursoC53' => 80, 'cursoC54' => 81, 'cursoC55' => 82, 'cursoC56' => 83, 'cursoC57' => 84, 'cursoC58' => 85, 'cursoC59' => 86, 'cursoC60' => 87, 'cursoC61' => 88, 'cursoC62' => 89, 'cursoC63' => 90, 'cursoC64' => 91, 'exportado' => 92, 'id' => 93, ),
		BasePeer::TYPE_COLNAME => array (self::ALUNO_C1 => 0, self::ALUNO_C2 => 1, self::ALUNO_C3 => 2, self::ALUNO_C4_NOME => 3, self::ALUNO_C5_CPF => 4, self::ALUNO_C6_DOC_ESTRANGEIRO => 5, self::ALUNO_C7_NASCIMENTO => 6, self::ALUNO_C8_SEXO => 7, self::ALUNO_C9_COR_RACA => 8, self::ALUNO_C10_MAE => 9, self::ALUNO_C11_NACIONALIDADE => 10, self::ALUNO_C12_UF_NASCIMENTO => 11, self::ALUNO_C13_CIDADE_NASCIMENTO => 12, self::ALUNO_C14_PAIS_ORIGEM => 13, self::ALUNO_C15_DEFICIENCIA => 14, self::ALUNO_C16_DEF_CEGUERIA => 15, self::ALUNO_C17_DEF_BAIXA_VISAO => 16, self::ALUNO_C18_DEF_SURDEZ => 17, self::ALUNO_C19_DEF_AUDITIVA => 18, self::ALUNO_C20_DEF_FISICA => 19, self::ALUNO_C21_DEF_SURDOCEGUEIRA => 20, self::ALUNO_C22_DEF_MULTIPLA => 21, self::ALUNO_C23_DEF_MENTAL => 22, self::CURSO_C1_TIPO_REG2 => 23, self::CURSO_C2_ID_INEP_CURSO => 24, self::CURSO_C3_COD_POLO_INEP => 25, self::CURSO_C4_TURNO_ALUNO => 26, self::CURSO_C5_SITUACAO_VINCULO => 27, self::CURSO_C6_DATA_INGRESSO => 28, self::CURSO_C7_ALUNO_PUBLICA => 29, self::CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR => 30, self::CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM => 31, self::CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS => 32, self::CURSO_C11_FORMA_INGRESSO_SELECAO_PECG => 33, self::CURSO_C12_FORMA_INGRESSO_OUTRAS => 34, self::CURSO_C13_PROGRAMA_RESERVA_VAGAS => 35, self::CURSO_C14_PROGRAMA_RESERVA_VAGAS => 36, self::CURSO_C15_PROGRAMA_RESERVA_VAGAS => 37, self::CURSO_C16_PROGRAMA_RESERVA_VAGAS => 38, self::CURSO_C17_PROGRAMA_RESERVA_VAGAS => 39, self::CURSO_C18_PROGRAMA_RESERVA_VAGAS => 40, self::CURSO_C19_FINANCIAMENTO_ESTUDANTIL => 41, self::CURSO_C20_FINANCIAMENTO_ESTUDANTIL => 42, self::CURSO_C21_FINANCIAMENTO_ESTUDANTIL => 43, self::CURSO_C22_FINANCIAMENTO_ESTUDANTIL => 44, self::CURSO_C23_FINANCIAMENTO_ESTUDANTIL => 45, self::CURSO_C24_FINANCIAMENTO_ESTUDANTIL => 46, self::CURSO_C25_FINANCIAMENTO_ESTUDANTIL => 47, self::CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 48, self::CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 49, self::CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 50, self::CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 51, self::CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 52, self::CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 53, self::CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB => 54, self::CURSO_C33_APOIO_SOCIAL => 55, self::CURSO_C34_TIPO_APOIO_SOCIAL => 56, self::CURSO_C35_TIPO_APOIO_SOCIAL => 57, self::CURSO_C36_TIPO_APOIO_SOCIAL => 58, self::CURSO_C37_TIPO_APOIO_SOCIAL => 59, self::CURSO_C38_TIPO_APOIO_SOCIAL => 60, self::CURSO_C39_TIPO_APOIO_SOCIAL => 61, self::CURSO_C40_ATIVIDADE_COMPLEMENTAR => 62, self::CURSO_C41_ATIVIDADE_COMPLEMENTAR => 63, self::CURSO_C42_BOLSA => 64, self::CURSO_C43_ATIVIDADE_COMPLEMENTAR => 65, self::CURSO_C44_BOLSA => 66, self::CURSO_C45_ATIVIDADE_COMPLEMENTAR => 67, self::CURSO_C46_BOLSA => 68, self::CURSO_C47_ATIVIDADE_COMPLEMENTAR => 69, self::CURSO_C48_BOLSA => 70, self::CURSO_C49_SEMESTRE_CONCLUSAO => 71, self::CURSO_C50_ALUNO_PARFOR => 72, self::ALUNO_C24_DEF_AUTISMO => 73, self::ALUNO_C25_DEF_ASPERGER => 74, self::ALUNO_C26_DEF_RETT => 75, self::ALUNO_C27_DEF_TDI => 76, self::ALUNO_C28_DEF_SUPERDOTADO => 77, self::CURSO_C51_SEMESTRE_REFERENCIA => 78, self::CURSO_C52_CURSO_ORIGEM_TRANSFERENCIA => 79, self::CURSO_C53_FORMA_INGRESSO_SERIADA => 80, self::CURSO_C54_FORMA_INGRESSO_EXOFFICIO => 81, self::CURSO_C55_FORMA_INGRESSO_JUDICIAL => 82, self::CURSO_C56_MOBILIDADE_ACADEMICA => 83, self::CURSO_C57_MOBILIDADE_TIPO => 84, self::CURSO_C58_MOBILIDADE_IES_DESTINO => 85, self::CURSO_C59_MOBILIDADE_TIPO_INTERNACIONAL => 86, self::CURSO_C60_MOBILIDADE_PAIS_DESTINO => 87, self::CURSO_C61_SEMESTRE_INGRESSO_CURSO => 88, self::CURSO_C62_FORMA_INGRESSO_SELECAO_SIMPLES => 89, self::CURSO_C63_FORMA_INGRESSO_SELECAO_REMANESCENTES => 90, self::CURSO_C64_FORMA_INGRESSO_SELECAO_ESPECIAIS => 91, self::EXPORTADO => 92, self::ID => 93, ),
		BasePeer::TYPE_FIELDNAME => array ('aluno_c1' => 0, 'aluno_c2' => 1, 'aluno_c3' => 2, 'aluno_c4_nome' => 3, 'aluno_c5_cpf' => 4, 'aluno_c6_doc_estrangeiro' => 5, 'aluno_c7_nascimento' => 6, 'aluno_c8_sexo' => 7, 'aluno_c9_cor_raca' => 8, 'aluno_c10_mae' => 9, 'aluno_c11_nacionalidade' => 10, 'aluno_c12_uf_nascimento' => 11, 'aluno_c13_cidade_nascimento' => 12, 'aluno_c14_pais_origem' => 13, 'aluno_c15_deficiencia' => 14, 'aluno_c16_def_cegueria' => 15, 'aluno_c17_def_baixa_visao' => 16, 'aluno_c18_def_surdez' => 17, 'aluno_c19_def_auditiva' => 18, 'aluno_c20_def_fisica' => 19, 'aluno_c21_def_surdocegueira' => 20, 'aluno_c22_def_multipla' => 21, 'aluno_c23_def_mental' => 22, 'curso_c1_tipo_reg2' => 23, 'curso_c2_id_inep_curso' => 24, 'curso_c3_cod_polo_inep' => 25, 'curso_c4_turno_aluno' => 26, 'curso_c5_situacao_vinculo' => 27, 'curso_c6_data_ingresso' => 28, 'curso_c7_aluno_publica' => 29, 'curso_c8_forma_ingresso_selecao_vestibular' => 30, 'curso_c9_forma_ingresso_selecao_enem' => 31, 'curso_c10_forma_ingresso_selecao_outros' => 32, 'curso_c11_forma_ingresso_selecao_pecg' => 33, 'curso_c12_forma_ingresso_outras' => 34, 'curso_c13_programa_reserva_vagas' => 35, 'curso_c14_programa_reserva_vagas' => 36, 'curso_c15_programa_reserva_vagas' => 37, 'curso_c16_programa_reserva_vagas' => 38, 'curso_c17_programa_reserva_vagas' => 39, 'curso_c18_programa_reserva_vagas' => 40, 'curso_c19_financiamento_estudantil' => 41, 'curso_c20_financiamento_estudantil' => 42, 'curso_c21_financiamento_estudantil' => 43, 'curso_c22_financiamento_estudantil' => 44, 'curso_c23_financiamento_estudantil' => 45, 'curso_c24_financiamento_estudantil' => 46, 'curso_c25_financiamento_estudantil' => 47, 'curso_c26_financiamento_estudantil_n_reemb' => 48, 'curso_c27_financiamento_estudantil_n_reemb' => 49, 'curso_c28_financiamento_estudantil_n_reemb' => 50, 'curso_c29_financiamento_estudantil_n_reemb' => 51, 'curso_c30_financiamento_estudantil_n_reemb' => 52, 'curso_c31_financiamento_estudantil_n_reemb' => 53, 'curso_c32_financiamento_estudantil_n_reemb' => 54, 'curso_c33_apoio_social' => 55, 'curso_c34_tipo_apoio_social' => 56, 'curso_c35_tipo_apoio_social' => 57, 'curso_c36_tipo_apoio_social' => 58, 'curso_c37_tipo_apoio_social' => 59, 'curso_c38_tipo_apoio_social' => 60, 'curso_c39_tipo_apoio_social' => 61, 'curso_c40_atividade_complementar' => 62, 'curso_c41_atividade_complementar' => 63, 'curso_c42_bolsa' => 64, 'curso_c43_atividade_complementar' => 65, 'curso_c44_bolsa' => 66, 'curso_c45_atividade_complementar' => 67, 'curso_c46_bolsa' => 68, 'curso_c47_atividade_complementar' => 69, 'curso_c48_bolsa' => 70, 'curso_c49_semestre_conclusao' => 71, 'curso_c50_aluno_parfor' => 72, 'aluno_c24_def_autismo' => 73, 'aluno_c25_def_asperger' => 74, 'aluno_c26_def_rett' => 75, 'aluno_c27_def_tdi' => 76, 'aluno_c28_def_superdotado' => 77, 'curso_c51_semestre_referencia' => 78, 'curso_c52_curso_origem_transferencia' => 79, 'curso_c53_forma_ingresso_seriada' => 80, 'curso_c54_forma_ingresso_exofficio' => 81, 'curso_c55_forma_ingresso_judicial' => 82, 'curso_c56_mobilidade_academica' => 83, 'curso_c57_mobilidade_tipo' => 84, 'curso_c58_mobilidade_ies_destino' => 85, 'curso_c59_mobilidade_tipo_internacional' => 86, 'curso_c60_mobilidade_pais_destino' => 87, 'curso_c61_semestre_ingresso_curso' => 88, 'curso_c62_forma_ingresso_selecao_simples' => 89, 'curso_c63_forma_ingresso_selecao_remanescentes' => 90, 'curso_c64_forma_ingresso_selecao_especiais' => 91, 'exportado' => 92, 'id' => 93, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. Censo2009Peer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(Censo2009Peer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C1);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C2);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C3);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C4_NOME);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C5_CPF);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C6_DOC_ESTRANGEIRO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C7_NASCIMENTO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C8_SEXO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C9_COR_RACA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C10_MAE);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C11_NACIONALIDADE);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C12_UF_NASCIMENTO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C13_CIDADE_NASCIMENTO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C14_PAIS_ORIGEM);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C15_DEFICIENCIA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C16_DEF_CEGUERIA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C17_DEF_BAIXA_VISAO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C18_DEF_SURDEZ);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C19_DEF_AUDITIVA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C20_DEF_FISICA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C21_DEF_SURDOCEGUEIRA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C22_DEF_MULTIPLA);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C23_DEF_MENTAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C1_TIPO_REG2);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C2_ID_INEP_CURSO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C3_COD_POLO_INEP);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C4_TURNO_ALUNO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C5_SITUACAO_VINCULO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C6_DATA_INGRESSO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C7_ALUNO_PUBLICA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C8_FORMA_INGRESSO_SELECAO_VESTIBULAR);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C9_FORMA_INGRESSO_SELECAO_ENEM);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C10_FORMA_INGRESSO_SELECAO_OUTROS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C11_FORMA_INGRESSO_SELECAO_PECG);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C12_FORMA_INGRESSO_OUTRAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C13_PROGRAMA_RESERVA_VAGAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C14_PROGRAMA_RESERVA_VAGAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C15_PROGRAMA_RESERVA_VAGAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C16_PROGRAMA_RESERVA_VAGAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C17_PROGRAMA_RESERVA_VAGAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C18_PROGRAMA_RESERVA_VAGAS);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C19_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C20_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C21_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C22_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C23_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C24_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C25_FINANCIAMENTO_ESTUDANTIL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C26_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C27_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C28_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C29_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C30_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C31_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C32_FINANCIAMENTO_ESTUDANTIL_N_REEMB);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C33_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C34_TIPO_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C35_TIPO_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C36_TIPO_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C37_TIPO_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C38_TIPO_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C39_TIPO_APOIO_SOCIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C40_ATIVIDADE_COMPLEMENTAR);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C41_ATIVIDADE_COMPLEMENTAR);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C42_BOLSA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C43_ATIVIDADE_COMPLEMENTAR);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C44_BOLSA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C45_ATIVIDADE_COMPLEMENTAR);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C46_BOLSA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C47_ATIVIDADE_COMPLEMENTAR);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C48_BOLSA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C49_SEMESTRE_CONCLUSAO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C50_ALUNO_PARFOR);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C24_DEF_AUTISMO);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C25_DEF_ASPERGER);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C26_DEF_RETT);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C27_DEF_TDI);
		$criteria->addSelectColumn(Censo2009Peer::ALUNO_C28_DEF_SUPERDOTADO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C51_SEMESTRE_REFERENCIA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C52_CURSO_ORIGEM_TRANSFERENCIA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C53_FORMA_INGRESSO_SERIADA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C54_FORMA_INGRESSO_EXOFFICIO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C55_FORMA_INGRESSO_JUDICIAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C56_MOBILIDADE_ACADEMICA);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C57_MOBILIDADE_TIPO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C58_MOBILIDADE_IES_DESTINO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C59_MOBILIDADE_TIPO_INTERNACIONAL);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C60_MOBILIDADE_PAIS_DESTINO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C61_SEMESTRE_INGRESSO_CURSO);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C62_FORMA_INGRESSO_SELECAO_SIMPLES);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C63_FORMA_INGRESSO_SELECAO_REMANESCENTES);
		$criteria->addSelectColumn(Censo2009Peer::CURSO_C64_FORMA_INGRESSO_SELECAO_ESPECIAIS);
		$criteria->addSelectColumn(Censo2009Peer::EXPORTADO);
		$criteria->addSelectColumn(Censo2009Peer::ID);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(Censo2009Peer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			Censo2009Peer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseCenso2009Peer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Censo2009
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = Censo2009Peer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return Censo2009Peer::populateObjects(Censo2009Peer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			Censo2009Peer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Censo2009 $value A Censo2009 object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Censo2009 $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Censo2009 object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Censo2009) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Censo2009 object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Censo2009 Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to censo2009
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 93] === null) {
			return null;
		}
		return (string) $row[$startcol + 93];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = Censo2009Peer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = Censo2009Peer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = Censo2009Peer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				Censo2009Peer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseCenso2009Peer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseCenso2009Peer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new Censo2009TableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name 
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? Censo2009Peer::CLASS_DEFAULT : Censo2009Peer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a Censo2009 or Criteria object.
	 *
	 * @param      mixed $values Criteria or Censo2009 object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseCenso2009Peer:doInsert:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseCenso2009Peer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Censo2009 object
		}

		if ($criteria->containsKey(Censo2009Peer::ID) && $criteria->keyContainsValue(Censo2009Peer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.Censo2009Peer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseCenso2009Peer:doInsert:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseCenso2009Peer', $values, $con, $pk);
    }

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Censo2009 or Criteria object.
	 *
	 * @param      mixed $values Criteria or Censo2009 object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseCenso2009Peer:doUpdate:pre') as $sf_hook)
    {
      if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseCenso2009Peer', $values, $con))
      {
        return $sf_hook_retval;
      }
    }

		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(Censo2009Peer::ID);
			$selectCriteria->add(Censo2009Peer::ID, $criteria->remove(Censo2009Peer::ID), $comparison);

		} else { // $values is Censo2009 object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables('BaseCenso2009Peer:doUpdate:post') as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseCenso2009Peer', $values, $con, $ret);
    }

    return $ret;
	}

	/**
	 * Method to DELETE all rows from the censo2009 table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(Censo2009Peer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			Censo2009Peer::clearInstancePool();
			Censo2009Peer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Censo2009 or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Censo2009 object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			Censo2009Peer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Censo2009) {
			// invalidate the cache for this single object
			Censo2009Peer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(Censo2009Peer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				Censo2009Peer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			Censo2009Peer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Censo2009 object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Censo2009 $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Censo2009 $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(Censo2009Peer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(Censo2009Peer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(Censo2009Peer::DATABASE_NAME, Censo2009Peer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Censo2009
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = Censo2009Peer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(Censo2009Peer::DATABASE_NAME);
		$criteria->add(Censo2009Peer::ID, $pk);

		$v = Censo2009Peer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(Censo2009Peer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(Censo2009Peer::DATABASE_NAME);
			$criteria->add(Censo2009Peer::ID, $pks, Criteria::IN);
			$objs = Censo2009Peer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseCenso2009Peer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseCenso2009Peer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseCenso2009Peer::buildTableMap();

