<?php

/**
 * Base class that represents a row from the 'tboferta' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:54 2015
 *
 * @package    lib.model.om
 */
abstract class BaseTboferta extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TbofertaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_oferta field.
	 * @var        int
	 */
	protected $id_oferta;

	/**
	 * The value for the id_periodo field.
	 * @var        int
	 */
	protected $id_periodo;

	/**
	 * The value for the id_turno field.
	 * @var        int
	 */
	protected $id_turno;

	/**
	 * The value for the cod_curso field.
	 * @var        int
	 */
	protected $cod_curso;

	/**
	 * The value for the cod_curso_destino field.
	 * @var        int
	 */
	protected $cod_curso_destino;

	/**
	 * The value for the cod_disciplina field.
	 * @var        string
	 */
	protected $cod_disciplina;

	/**
	 * The value for the turma field.
	 * @var        string
	 */
	protected $turma;

	/**
	 * The value for the id_sala field.
	 * @var        int
	 */
	protected $id_sala;

	/**
	 * The value for the vagas field.
	 * @var        int
	 */
	protected $vagas;

	/**
	 * The value for the matriculados field.
	 * @var        int
	 */
	protected $matriculados;

	/**
	 * The value for the excesso field.
	 * @var        int
	 */
	protected $excesso;

	/**
	 * The value for the cancelados field.
	 * @var        int
	 */
	protected $cancelados;

	/**
	 * The value for the trancados field.
	 * @var        int
	 */
	protected $trancados;

	/**
	 * The value for the id_matricula_prof field.
	 * @var        int
	 */
	protected $id_matricula_prof;

	/**
	 * The value for the id_matricula_prof2 field.
	 * @var        int
	 */
	protected $id_matricula_prof2;

	/**
	 * The value for the id_setor field.
	 * @var        int
	 */
	protected $id_setor;

	/**
	 * The value for the dt_inicio field.
	 * @var        string
	 */
	protected $dt_inicio;

	/**
	 * The value for the dt_fim field.
	 * @var        string
	 */
	protected $dt_fim;

	/**
	 * The value for the id_situacao field.
	 * @var        int
	 */
	protected $id_situacao;

	/**
	 * The value for the id_polo field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $id_polo;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_by field.
	 * @var        string
	 */
	protected $created_by;

	/**
	 * The value for the updated_by field.
	 * @var        string
	 */
	protected $updated_by;

	/**
	 * @var        Tbperiodo
	 */
	protected $aTbperiodo;

	/**
	 * @var        Tbturno
	 */
	protected $aTbturno;

	/**
	 * @var        Tbcurso
	 */
	protected $aTbcursoRelatedByCodCurso;

	/**
	 * @var        Tbcurso
	 */
	protected $aTbcursoRelatedByCodCursoDestino;

	/**
	 * @var        Tbdisciplina
	 */
	protected $aTbdisciplina;

	/**
	 * @var        Tbsala
	 */
	protected $aTbsala;

	/**
	 * @var        Tbprofessor
	 */
	protected $aTbprofessorRelatedByIdMatriculaProf;

	/**
	 * @var        Tbprofessor
	 */
	protected $aTbprofessorRelatedByIdMatriculaProf2;

	/**
	 * @var        Tbsetor
	 */
	protected $aTbsetor;

	/**
	 * @var        Tbofertasituacao
	 */
	protected $aTbofertasituacao;

	/**
	 * @var        Tbpolos
	 */
	protected $aTbpolos;

	/**
	 * @var        array Tbfilacalouros[] Collection to store aggregation of Tbfilacalouros objects.
	 */
	protected $collTbfilacalouross;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbfilacalouross.
	 */
	private $lastTbfilacalourosCriteria = null;

	/**
	 * @var        array Tbfila[] Collection to store aggregation of Tbfila objects.
	 */
	protected $collTbfilas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbfilas.
	 */
	private $lastTbfilaCriteria = null;

	/**
	 * @var        array Tbofertacoordenador[] Collection to store aggregation of Tbofertacoordenador objects.
	 */
	protected $collTbofertacoordenadors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertacoordenadors.
	 */
	private $lastTbofertacoordenadorCriteria = null;

	/**
	 * @var        array Tbofertahorario[] Collection to store aggregation of Tbofertahorario objects.
	 */
	protected $collTbofertahorarios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbofertahorarios.
	 */
	private $lastTbofertahorarioCriteria = null;

	/**
	 * @var        array Tbturma[] Collection to store aggregation of Tbturma objects.
	 */
	protected $collTbturmas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTbturmas.
	 */
	private $lastTbturmaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TbofertaPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->id_polo = 0;
	}

	/**
	 * Initializes internal state of BaseTboferta object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id_oferta] column value.
	 * 
	 * @return     int
	 */
	public function getIdOferta()
	{
		return $this->id_oferta;
	}

	/**
	 * Get the [id_periodo] column value.
	 * 
	 * @return     int
	 */
	public function getIdPeriodo()
	{
		return $this->id_periodo;
	}

	/**
	 * Get the [id_turno] column value.
	 * 
	 * @return     int
	 */
	public function getIdTurno()
	{
		return $this->id_turno;
	}

	/**
	 * Get the [cod_curso] column value.
	 * 
	 * @return     int
	 */
	public function getCodCurso()
	{
		return $this->cod_curso;
	}

	/**
	 * Get the [cod_curso_destino] column value.
	 * 
	 * @return     int
	 */
	public function getCodCursoDestino()
	{
		return $this->cod_curso_destino;
	}

	/**
	 * Get the [cod_disciplina] column value.
	 * 
	 * @return     string
	 */
	public function getCodDisciplina()
	{
		return $this->cod_disciplina;
	}

	/**
	 * Get the [turma] column value.
	 * 
	 * @return     string
	 */
	public function getTurma()
	{
		return $this->turma;
	}

	/**
	 * Get the [id_sala] column value.
	 * 
	 * @return     int
	 */
	public function getIdSala()
	{
		return $this->id_sala;
	}

	/**
	 * Get the [vagas] column value.
	 * 
	 * @return     int
	 */
	public function getVagas()
	{
		return $this->vagas;
	}

	/**
	 * Get the [matriculados] column value.
	 * 
	 * @return     int
	 */
	public function getMatriculados()
	{
		return $this->matriculados;
	}

	/**
	 * Get the [excesso] column value.
	 * 
	 * @return     int
	 */
	public function getExcesso()
	{
		return $this->excesso;
	}

	/**
	 * Get the [cancelados] column value.
	 * 
	 * @return     int
	 */
	public function getCancelados()
	{
		return $this->cancelados;
	}

	/**
	 * Get the [trancados] column value.
	 * 
	 * @return     int
	 */
	public function getTrancados()
	{
		return $this->trancados;
	}

	/**
	 * Get the [id_matricula_prof] column value.
	 * 
	 * @return     int
	 */
	public function getIdMatriculaProf()
	{
		return $this->id_matricula_prof;
	}

	/**
	 * Get the [id_matricula_prof2] column value.
	 * 
	 * @return     int
	 */
	public function getIdMatriculaProf2()
	{
		return $this->id_matricula_prof2;
	}

	/**
	 * Get the [id_setor] column value.
	 * 
	 * @return     int
	 */
	public function getIdSetor()
	{
		return $this->id_setor;
	}

	/**
	 * Get the [optionally formatted] temporal [dt_inicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtInicio($format = 'Y-m-d')
	{
		if ($this->dt_inicio === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_inicio);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_inicio, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dt_fim] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDtFim($format = 'Y-m-d')
	{
		if ($this->dt_fim === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->dt_fim);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dt_fim, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id_situacao] column value.
	 * 
	 * @return     int
	 */
	public function getIdSituacao()
	{
		return $this->id_situacao;
	}

	/**
	 * Get the [id_polo] column value.
	 * 
	 * @return     int
	 */
	public function getIdPolo()
	{
		return $this->id_polo;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     string
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     string
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Set the value of [id_oferta] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdOferta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_oferta !== $v) {
			$this->id_oferta = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_OFERTA;
		}

		return $this;
	} // setIdOferta()

	/**
	 * Set the value of [id_periodo] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdPeriodo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_periodo !== $v) {
			$this->id_periodo = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_PERIODO;
		}

		if ($this->aTbperiodo !== null && $this->aTbperiodo->getIdPeriodo() !== $v) {
			$this->aTbperiodo = null;
		}

		return $this;
	} // setIdPeriodo()

	/**
	 * Set the value of [id_turno] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdTurno($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_turno !== $v) {
			$this->id_turno = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_TURNO;
		}

		if ($this->aTbturno !== null && $this->aTbturno->getIdTurno() !== $v) {
			$this->aTbturno = null;
		}

		return $this;
	} // setIdTurno()

	/**
	 * Set the value of [cod_curso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setCodCurso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cod_curso !== $v) {
			$this->cod_curso = $v;
			$this->modifiedColumns[] = TbofertaPeer::COD_CURSO;
		}

		if ($this->aTbcursoRelatedByCodCurso !== null && $this->aTbcursoRelatedByCodCurso->getCodCurso() !== $v) {
			$this->aTbcursoRelatedByCodCurso = null;
		}

		return $this;
	} // setCodCurso()

	/**
	 * Set the value of [cod_curso_destino] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setCodCursoDestino($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cod_curso_destino !== $v) {
			$this->cod_curso_destino = $v;
			$this->modifiedColumns[] = TbofertaPeer::COD_CURSO_DESTINO;
		}

		if ($this->aTbcursoRelatedByCodCursoDestino !== null && $this->aTbcursoRelatedByCodCursoDestino->getCodCurso() !== $v) {
			$this->aTbcursoRelatedByCodCursoDestino = null;
		}

		return $this;
	} // setCodCursoDestino()

	/**
	 * Set the value of [cod_disciplina] column.
	 * 
	 * @param      string $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setCodDisciplina($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cod_disciplina !== $v) {
			$this->cod_disciplina = $v;
			$this->modifiedColumns[] = TbofertaPeer::COD_DISCIPLINA;
		}

		if ($this->aTbdisciplina !== null && $this->aTbdisciplina->getCodDisciplina() !== $v) {
			$this->aTbdisciplina = null;
		}

		return $this;
	} // setCodDisciplina()

	/**
	 * Set the value of [turma] column.
	 * 
	 * @param      string $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setTurma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->turma !== $v) {
			$this->turma = $v;
			$this->modifiedColumns[] = TbofertaPeer::TURMA;
		}

		return $this;
	} // setTurma()

	/**
	 * Set the value of [id_sala] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdSala($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_sala !== $v) {
			$this->id_sala = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_SALA;
		}

		if ($this->aTbsala !== null && $this->aTbsala->getIdSala() !== $v) {
			$this->aTbsala = null;
		}

		return $this;
	} // setIdSala()

	/**
	 * Set the value of [vagas] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setVagas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->vagas !== $v) {
			$this->vagas = $v;
			$this->modifiedColumns[] = TbofertaPeer::VAGAS;
		}

		return $this;
	} // setVagas()

	/**
	 * Set the value of [matriculados] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setMatriculados($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->matriculados !== $v) {
			$this->matriculados = $v;
			$this->modifiedColumns[] = TbofertaPeer::MATRICULADOS;
		}

		return $this;
	} // setMatriculados()

	/**
	 * Set the value of [excesso] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setExcesso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->excesso !== $v) {
			$this->excesso = $v;
			$this->modifiedColumns[] = TbofertaPeer::EXCESSO;
		}

		return $this;
	} // setExcesso()

	/**
	 * Set the value of [cancelados] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setCancelados($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cancelados !== $v) {
			$this->cancelados = $v;
			$this->modifiedColumns[] = TbofertaPeer::CANCELADOS;
		}

		return $this;
	} // setCancelados()

	/**
	 * Set the value of [trancados] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setTrancados($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->trancados !== $v) {
			$this->trancados = $v;
			$this->modifiedColumns[] = TbofertaPeer::TRANCADOS;
		}

		return $this;
	} // setTrancados()

	/**
	 * Set the value of [id_matricula_prof] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdMatriculaProf($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_matricula_prof !== $v) {
			$this->id_matricula_prof = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_MATRICULA_PROF;
		}

		if ($this->aTbprofessorRelatedByIdMatriculaProf !== null && $this->aTbprofessorRelatedByIdMatriculaProf->getMatriculaProf() !== $v) {
			$this->aTbprofessorRelatedByIdMatriculaProf = null;
		}

		return $this;
	} // setIdMatriculaProf()

	/**
	 * Set the value of [id_matricula_prof2] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdMatriculaProf2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_matricula_prof2 !== $v) {
			$this->id_matricula_prof2 = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_MATRICULA_PROF2;
		}

		if ($this->aTbprofessorRelatedByIdMatriculaProf2 !== null && $this->aTbprofessorRelatedByIdMatriculaProf2->getMatriculaProf() !== $v) {
			$this->aTbprofessorRelatedByIdMatriculaProf2 = null;
		}

		return $this;
	} // setIdMatriculaProf2()

	/**
	 * Set the value of [id_setor] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdSetor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_setor !== $v) {
			$this->id_setor = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_SETOR;
		}

		if ($this->aTbsetor !== null && $this->aTbsetor->getIdSetor() !== $v) {
			$this->aTbsetor = null;
		}

		return $this;
	} // setIdSetor()

	/**
	 * Sets the value of [dt_inicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setDtInicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_inicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_inicio !== null && $tmpDt = new DateTime($this->dt_inicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_inicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbofertaPeer::DT_INICIO;
			}
		} // if either are not null

		return $this;
	} // setDtInicio()

	/**
	 * Sets the value of [dt_fim] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setDtFim($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dt_fim !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dt_fim !== null && $tmpDt = new DateTime($this->dt_fim)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dt_fim = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbofertaPeer::DT_FIM;
			}
		} // if either are not null

		return $this;
	} // setDtFim()

	/**
	 * Set the value of [id_situacao] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdSituacao($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_situacao !== $v) {
			$this->id_situacao = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_SITUACAO;
		}

		if ($this->aTbofertasituacao !== null && $this->aTbofertasituacao->getIdSituacao() !== $v) {
			$this->aTbofertasituacao = null;
		}

		return $this;
	} // setIdSituacao()

	/**
	 * Set the value of [id_polo] column.
	 * 
	 * @param      int $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setIdPolo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_polo !== $v || $this->isNew()) {
			$this->id_polo = $v;
			$this->modifiedColumns[] = TbofertaPeer::ID_POLO;
		}

		if ($this->aTbpolos !== null && $this->aTbpolos->getIdPolo() !== $v) {
			$this->aTbpolos = null;
		}

		return $this;
	} // setIdPolo()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbofertaPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TbofertaPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = TbofertaPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Tboferta The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = TbofertaPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->id_polo !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_oferta = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_periodo = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_turno = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->cod_curso = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->cod_curso_destino = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->cod_disciplina = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->turma = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->id_sala = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->vagas = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->matriculados = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->excesso = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->cancelados = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->trancados = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->id_matricula_prof = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->id_matricula_prof2 = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->id_setor = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->dt_inicio = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->dt_fim = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->id_situacao = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->id_polo = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->created_at = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->updated_at = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->created_by = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->updated_by = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 24; // 24 = TbofertaPeer::NUM_COLUMNS - TbofertaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tboferta object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTbperiodo !== null && $this->id_periodo !== $this->aTbperiodo->getIdPeriodo()) {
			$this->aTbperiodo = null;
		}
		if ($this->aTbturno !== null && $this->id_turno !== $this->aTbturno->getIdTurno()) {
			$this->aTbturno = null;
		}
		if ($this->aTbcursoRelatedByCodCurso !== null && $this->cod_curso !== $this->aTbcursoRelatedByCodCurso->getCodCurso()) {
			$this->aTbcursoRelatedByCodCurso = null;
		}
		if ($this->aTbcursoRelatedByCodCursoDestino !== null && $this->cod_curso_destino !== $this->aTbcursoRelatedByCodCursoDestino->getCodCurso()) {
			$this->aTbcursoRelatedByCodCursoDestino = null;
		}
		if ($this->aTbdisciplina !== null && $this->cod_disciplina !== $this->aTbdisciplina->getCodDisciplina()) {
			$this->aTbdisciplina = null;
		}
		if ($this->aTbsala !== null && $this->id_sala !== $this->aTbsala->getIdSala()) {
			$this->aTbsala = null;
		}
		if ($this->aTbprofessorRelatedByIdMatriculaProf !== null && $this->id_matricula_prof !== $this->aTbprofessorRelatedByIdMatriculaProf->getMatriculaProf()) {
			$this->aTbprofessorRelatedByIdMatriculaProf = null;
		}
		if ($this->aTbprofessorRelatedByIdMatriculaProf2 !== null && $this->id_matricula_prof2 !== $this->aTbprofessorRelatedByIdMatriculaProf2->getMatriculaProf()) {
			$this->aTbprofessorRelatedByIdMatriculaProf2 = null;
		}
		if ($this->aTbsetor !== null && $this->id_setor !== $this->aTbsetor->getIdSetor()) {
			$this->aTbsetor = null;
		}
		if ($this->aTbofertasituacao !== null && $this->id_situacao !== $this->aTbofertasituacao->getIdSituacao()) {
			$this->aTbofertasituacao = null;
		}
		if ($this->aTbpolos !== null && $this->id_polo !== $this->aTbpolos->getIdPolo()) {
			$this->aTbpolos = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TbofertaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTbperiodo = null;
			$this->aTbturno = null;
			$this->aTbcursoRelatedByCodCurso = null;
			$this->aTbcursoRelatedByCodCursoDestino = null;
			$this->aTbdisciplina = null;
			$this->aTbsala = null;
			$this->aTbprofessorRelatedByIdMatriculaProf = null;
			$this->aTbprofessorRelatedByIdMatriculaProf2 = null;
			$this->aTbsetor = null;
			$this->aTbofertasituacao = null;
			$this->aTbpolos = null;
			$this->collTbfilacalouross = null;
			$this->lastTbfilacalourosCriteria = null;

			$this->collTbfilas = null;
			$this->lastTbfilaCriteria = null;

			$this->collTbofertacoordenadors = null;
			$this->lastTbofertacoordenadorCriteria = null;

			$this->collTbofertahorarios = null;
			$this->lastTbofertahorarioCriteria = null;

			$this->collTbturmas = null;
			$this->lastTbturmaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTboferta:delete:pre') as $callable)
			{
			  if ($ret = call_user_func($callable, $this, $con))
			  {
			    return;
			  }
			}

			if ($ret) {
				TbofertaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTboferta:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TbofertaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTboferta:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(TbofertaPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(TbofertaPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTboferta:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				$con->commit();
				TbofertaPeer::addInstanceToPool($this);
				return $affectedRows;
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbperiodo !== null) {
				if ($this->aTbperiodo->isModified() || $this->aTbperiodo->isNew()) {
					$affectedRows += $this->aTbperiodo->save($con);
				}
				$this->setTbperiodo($this->aTbperiodo);
			}

			if ($this->aTbturno !== null) {
				if ($this->aTbturno->isModified() || $this->aTbturno->isNew()) {
					$affectedRows += $this->aTbturno->save($con);
				}
				$this->setTbturno($this->aTbturno);
			}

			if ($this->aTbcursoRelatedByCodCurso !== null) {
				if ($this->aTbcursoRelatedByCodCurso->isModified() || $this->aTbcursoRelatedByCodCurso->isNew()) {
					$affectedRows += $this->aTbcursoRelatedByCodCurso->save($con);
				}
				$this->setTbcursoRelatedByCodCurso($this->aTbcursoRelatedByCodCurso);
			}

			if ($this->aTbcursoRelatedByCodCursoDestino !== null) {
				if ($this->aTbcursoRelatedByCodCursoDestino->isModified() || $this->aTbcursoRelatedByCodCursoDestino->isNew()) {
					$affectedRows += $this->aTbcursoRelatedByCodCursoDestino->save($con);
				}
				$this->setTbcursoRelatedByCodCursoDestino($this->aTbcursoRelatedByCodCursoDestino);
			}

			if ($this->aTbdisciplina !== null) {
				if ($this->aTbdisciplina->isModified() || $this->aTbdisciplina->isNew()) {
					$affectedRows += $this->aTbdisciplina->save($con);
				}
				$this->setTbdisciplina($this->aTbdisciplina);
			}

			if ($this->aTbsala !== null) {
				if ($this->aTbsala->isModified() || $this->aTbsala->isNew()) {
					$affectedRows += $this->aTbsala->save($con);
				}
				$this->setTbsala($this->aTbsala);
			}

			if ($this->aTbprofessorRelatedByIdMatriculaProf !== null) {
				if ($this->aTbprofessorRelatedByIdMatriculaProf->isModified() || $this->aTbprofessorRelatedByIdMatriculaProf->isNew()) {
					$affectedRows += $this->aTbprofessorRelatedByIdMatriculaProf->save($con);
				}
				$this->setTbprofessorRelatedByIdMatriculaProf($this->aTbprofessorRelatedByIdMatriculaProf);
			}

			if ($this->aTbprofessorRelatedByIdMatriculaProf2 !== null) {
				if ($this->aTbprofessorRelatedByIdMatriculaProf2->isModified() || $this->aTbprofessorRelatedByIdMatriculaProf2->isNew()) {
					$affectedRows += $this->aTbprofessorRelatedByIdMatriculaProf2->save($con);
				}
				$this->setTbprofessorRelatedByIdMatriculaProf2($this->aTbprofessorRelatedByIdMatriculaProf2);
			}

			if ($this->aTbsetor !== null) {
				if ($this->aTbsetor->isModified() || $this->aTbsetor->isNew()) {
					$affectedRows += $this->aTbsetor->save($con);
				}
				$this->setTbsetor($this->aTbsetor);
			}

			if ($this->aTbofertasituacao !== null) {
				if ($this->aTbofertasituacao->isModified() || $this->aTbofertasituacao->isNew()) {
					$affectedRows += $this->aTbofertasituacao->save($con);
				}
				$this->setTbofertasituacao($this->aTbofertasituacao);
			}

			if ($this->aTbpolos !== null) {
				if ($this->aTbpolos->isModified() || $this->aTbpolos->isNew()) {
					$affectedRows += $this->aTbpolos->save($con);
				}
				$this->setTbpolos($this->aTbpolos);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TbofertaPeer::ID_OFERTA;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TbofertaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdOferta($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TbofertaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTbfilacalouross !== null) {
				foreach ($this->collTbfilacalouross as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbfilas !== null) {
				foreach ($this->collTbfilas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertacoordenadors !== null) {
				foreach ($this->collTbofertacoordenadors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbofertahorarios !== null) {
				foreach ($this->collTbofertahorarios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTbturmas !== null) {
				foreach ($this->collTbturmas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTbperiodo !== null) {
				if (!$this->aTbperiodo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbperiodo->getValidationFailures());
				}
			}

			if ($this->aTbturno !== null) {
				if (!$this->aTbturno->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbturno->getValidationFailures());
				}
			}

			if ($this->aTbcursoRelatedByCodCurso !== null) {
				if (!$this->aTbcursoRelatedByCodCurso->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcursoRelatedByCodCurso->getValidationFailures());
				}
			}

			if ($this->aTbcursoRelatedByCodCursoDestino !== null) {
				if (!$this->aTbcursoRelatedByCodCursoDestino->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbcursoRelatedByCodCursoDestino->getValidationFailures());
				}
			}

			if ($this->aTbdisciplina !== null) {
				if (!$this->aTbdisciplina->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbdisciplina->getValidationFailures());
				}
			}

			if ($this->aTbsala !== null) {
				if (!$this->aTbsala->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbsala->getValidationFailures());
				}
			}

			if ($this->aTbprofessorRelatedByIdMatriculaProf !== null) {
				if (!$this->aTbprofessorRelatedByIdMatriculaProf->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbprofessorRelatedByIdMatriculaProf->getValidationFailures());
				}
			}

			if ($this->aTbprofessorRelatedByIdMatriculaProf2 !== null) {
				if (!$this->aTbprofessorRelatedByIdMatriculaProf2->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbprofessorRelatedByIdMatriculaProf2->getValidationFailures());
				}
			}

			if ($this->aTbsetor !== null) {
				if (!$this->aTbsetor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbsetor->getValidationFailures());
				}
			}

			if ($this->aTbofertasituacao !== null) {
				if (!$this->aTbofertasituacao->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbofertasituacao->getValidationFailures());
				}
			}

			if ($this->aTbpolos !== null) {
				if (!$this->aTbpolos->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTbpolos->getValidationFailures());
				}
			}


			if (($retval = TbofertaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTbfilacalouross !== null) {
					foreach ($this->collTbfilacalouross as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbfilas !== null) {
					foreach ($this->collTbfilas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertacoordenadors !== null) {
					foreach ($this->collTbofertacoordenadors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbofertahorarios !== null) {
					foreach ($this->collTbofertahorarios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTbturmas !== null) {
					foreach ($this->collTbturmas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbofertaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdOferta();
				break;
			case 1:
				return $this->getIdPeriodo();
				break;
			case 2:
				return $this->getIdTurno();
				break;
			case 3:
				return $this->getCodCurso();
				break;
			case 4:
				return $this->getCodCursoDestino();
				break;
			case 5:
				return $this->getCodDisciplina();
				break;
			case 6:
				return $this->getTurma();
				break;
			case 7:
				return $this->getIdSala();
				break;
			case 8:
				return $this->getVagas();
				break;
			case 9:
				return $this->getMatriculados();
				break;
			case 10:
				return $this->getExcesso();
				break;
			case 11:
				return $this->getCancelados();
				break;
			case 12:
				return $this->getTrancados();
				break;
			case 13:
				return $this->getIdMatriculaProf();
				break;
			case 14:
				return $this->getIdMatriculaProf2();
				break;
			case 15:
				return $this->getIdSetor();
				break;
			case 16:
				return $this->getDtInicio();
				break;
			case 17:
				return $this->getDtFim();
				break;
			case 18:
				return $this->getIdSituacao();
				break;
			case 19:
				return $this->getIdPolo();
				break;
			case 20:
				return $this->getCreatedAt();
				break;
			case 21:
				return $this->getUpdatedAt();
				break;
			case 22:
				return $this->getCreatedBy();
				break;
			case 23:
				return $this->getUpdatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TbofertaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdOferta(),
			$keys[1] => $this->getIdPeriodo(),
			$keys[2] => $this->getIdTurno(),
			$keys[3] => $this->getCodCurso(),
			$keys[4] => $this->getCodCursoDestino(),
			$keys[5] => $this->getCodDisciplina(),
			$keys[6] => $this->getTurma(),
			$keys[7] => $this->getIdSala(),
			$keys[8] => $this->getVagas(),
			$keys[9] => $this->getMatriculados(),
			$keys[10] => $this->getExcesso(),
			$keys[11] => $this->getCancelados(),
			$keys[12] => $this->getTrancados(),
			$keys[13] => $this->getIdMatriculaProf(),
			$keys[14] => $this->getIdMatriculaProf2(),
			$keys[15] => $this->getIdSetor(),
			$keys[16] => $this->getDtInicio(),
			$keys[17] => $this->getDtFim(),
			$keys[18] => $this->getIdSituacao(),
			$keys[19] => $this->getIdPolo(),
			$keys[20] => $this->getCreatedAt(),
			$keys[21] => $this->getUpdatedAt(),
			$keys[22] => $this->getCreatedBy(),
			$keys[23] => $this->getUpdatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TbofertaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdOferta($value);
				break;
			case 1:
				$this->setIdPeriodo($value);
				break;
			case 2:
				$this->setIdTurno($value);
				break;
			case 3:
				$this->setCodCurso($value);
				break;
			case 4:
				$this->setCodCursoDestino($value);
				break;
			case 5:
				$this->setCodDisciplina($value);
				break;
			case 6:
				$this->setTurma($value);
				break;
			case 7:
				$this->setIdSala($value);
				break;
			case 8:
				$this->setVagas($value);
				break;
			case 9:
				$this->setMatriculados($value);
				break;
			case 10:
				$this->setExcesso($value);
				break;
			case 11:
				$this->setCancelados($value);
				break;
			case 12:
				$this->setTrancados($value);
				break;
			case 13:
				$this->setIdMatriculaProf($value);
				break;
			case 14:
				$this->setIdMatriculaProf2($value);
				break;
			case 15:
				$this->setIdSetor($value);
				break;
			case 16:
				$this->setDtInicio($value);
				break;
			case 17:
				$this->setDtFim($value);
				break;
			case 18:
				$this->setIdSituacao($value);
				break;
			case 19:
				$this->setIdPolo($value);
				break;
			case 20:
				$this->setCreatedAt($value);
				break;
			case 21:
				$this->setUpdatedAt($value);
				break;
			case 22:
				$this->setCreatedBy($value);
				break;
			case 23:
				$this->setUpdatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TbofertaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdOferta($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdPeriodo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdTurno($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCodCurso($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCodCursoDestino($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCodDisciplina($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTurma($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdSala($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setVagas($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setMatriculados($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setExcesso($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCancelados($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTrancados($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIdMatriculaProf($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setIdMatriculaProf2($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIdSetor($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDtInicio($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDtFim($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIdSituacao($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIdPolo($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCreatedAt($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setUpdatedAt($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCreatedBy($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setUpdatedBy($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);

		if ($this->isColumnModified(TbofertaPeer::ID_OFERTA)) $criteria->add(TbofertaPeer::ID_OFERTA, $this->id_oferta);
		if ($this->isColumnModified(TbofertaPeer::ID_PERIODO)) $criteria->add(TbofertaPeer::ID_PERIODO, $this->id_periodo);
		if ($this->isColumnModified(TbofertaPeer::ID_TURNO)) $criteria->add(TbofertaPeer::ID_TURNO, $this->id_turno);
		if ($this->isColumnModified(TbofertaPeer::COD_CURSO)) $criteria->add(TbofertaPeer::COD_CURSO, $this->cod_curso);
		if ($this->isColumnModified(TbofertaPeer::COD_CURSO_DESTINO)) $criteria->add(TbofertaPeer::COD_CURSO_DESTINO, $this->cod_curso_destino);
		if ($this->isColumnModified(TbofertaPeer::COD_DISCIPLINA)) $criteria->add(TbofertaPeer::COD_DISCIPLINA, $this->cod_disciplina);
		if ($this->isColumnModified(TbofertaPeer::TURMA)) $criteria->add(TbofertaPeer::TURMA, $this->turma);
		if ($this->isColumnModified(TbofertaPeer::ID_SALA)) $criteria->add(TbofertaPeer::ID_SALA, $this->id_sala);
		if ($this->isColumnModified(TbofertaPeer::VAGAS)) $criteria->add(TbofertaPeer::VAGAS, $this->vagas);
		if ($this->isColumnModified(TbofertaPeer::MATRICULADOS)) $criteria->add(TbofertaPeer::MATRICULADOS, $this->matriculados);
		if ($this->isColumnModified(TbofertaPeer::EXCESSO)) $criteria->add(TbofertaPeer::EXCESSO, $this->excesso);
		if ($this->isColumnModified(TbofertaPeer::CANCELADOS)) $criteria->add(TbofertaPeer::CANCELADOS, $this->cancelados);
		if ($this->isColumnModified(TbofertaPeer::TRANCADOS)) $criteria->add(TbofertaPeer::TRANCADOS, $this->trancados);
		if ($this->isColumnModified(TbofertaPeer::ID_MATRICULA_PROF)) $criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->id_matricula_prof);
		if ($this->isColumnModified(TbofertaPeer::ID_MATRICULA_PROF2)) $criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->id_matricula_prof2);
		if ($this->isColumnModified(TbofertaPeer::ID_SETOR)) $criteria->add(TbofertaPeer::ID_SETOR, $this->id_setor);
		if ($this->isColumnModified(TbofertaPeer::DT_INICIO)) $criteria->add(TbofertaPeer::DT_INICIO, $this->dt_inicio);
		if ($this->isColumnModified(TbofertaPeer::DT_FIM)) $criteria->add(TbofertaPeer::DT_FIM, $this->dt_fim);
		if ($this->isColumnModified(TbofertaPeer::ID_SITUACAO)) $criteria->add(TbofertaPeer::ID_SITUACAO, $this->id_situacao);
		if ($this->isColumnModified(TbofertaPeer::ID_POLO)) $criteria->add(TbofertaPeer::ID_POLO, $this->id_polo);
		if ($this->isColumnModified(TbofertaPeer::CREATED_AT)) $criteria->add(TbofertaPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TbofertaPeer::UPDATED_AT)) $criteria->add(TbofertaPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(TbofertaPeer::CREATED_BY)) $criteria->add(TbofertaPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(TbofertaPeer::UPDATED_BY)) $criteria->add(TbofertaPeer::UPDATED_BY, $this->updated_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);

		$criteria->add(TbofertaPeer::ID_OFERTA, $this->id_oferta);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdOferta();
	}

	/**
	 * Generic method to set the primary key (id_oferta column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdOferta($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tboferta (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdPeriodo($this->id_periodo);

		$copyObj->setIdTurno($this->id_turno);

		$copyObj->setCodCurso($this->cod_curso);

		$copyObj->setCodCursoDestino($this->cod_curso_destino);

		$copyObj->setCodDisciplina($this->cod_disciplina);

		$copyObj->setTurma($this->turma);

		$copyObj->setIdSala($this->id_sala);

		$copyObj->setVagas($this->vagas);

		$copyObj->setMatriculados($this->matriculados);

		$copyObj->setExcesso($this->excesso);

		$copyObj->setCancelados($this->cancelados);

		$copyObj->setTrancados($this->trancados);

		$copyObj->setIdMatriculaProf($this->id_matricula_prof);

		$copyObj->setIdMatriculaProf2($this->id_matricula_prof2);

		$copyObj->setIdSetor($this->id_setor);

		$copyObj->setDtInicio($this->dt_inicio);

		$copyObj->setDtFim($this->dt_fim);

		$copyObj->setIdSituacao($this->id_situacao);

		$copyObj->setIdPolo($this->id_polo);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedBy($this->updated_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTbfilacalouross() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbfilacalouros($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbfilas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbfila($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertacoordenadors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertacoordenador($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbofertahorarios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbofertahorario($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTbturmas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTbturma($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdOferta(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tboferta Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TbofertaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TbofertaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Tbperiodo object.
	 *
	 * @param      Tbperiodo $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbperiodo(Tbperiodo $v = null)
	{
		if ($v === null) {
			$this->setIdPeriodo(NULL);
		} else {
			$this->setIdPeriodo($v->getIdPeriodo());
		}

		$this->aTbperiodo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbperiodo object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbperiodo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbperiodo The associated Tbperiodo object.
	 * @throws     PropelException
	 */
	public function getTbperiodo(PropelPDO $con = null)
	{
		if ($this->aTbperiodo === null && ($this->id_periodo !== null)) {
			$this->aTbperiodo = TbperiodoPeer::retrieveByPk($this->id_periodo);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbperiodo->addTbofertas($this);
			 */
		}
		return $this->aTbperiodo;
	}

	/**
	 * Declares an association between this object and a Tbturno object.
	 *
	 * @param      Tbturno $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbturno(Tbturno $v = null)
	{
		if ($v === null) {
			$this->setIdTurno(NULL);
		} else {
			$this->setIdTurno($v->getIdTurno());
		}

		$this->aTbturno = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbturno object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbturno object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbturno The associated Tbturno object.
	 * @throws     PropelException
	 */
	public function getTbturno(PropelPDO $con = null)
	{
		if ($this->aTbturno === null && ($this->id_turno !== null)) {
			$this->aTbturno = TbturnoPeer::retrieveByPk($this->id_turno);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbturno->addTbofertas($this);
			 */
		}
		return $this->aTbturno;
	}

	/**
	 * Declares an association between this object and a Tbcurso object.
	 *
	 * @param      Tbcurso $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcursoRelatedByCodCurso(Tbcurso $v = null)
	{
		if ($v === null) {
			$this->setCodCurso(NULL);
		} else {
			$this->setCodCurso($v->getCodCurso());
		}

		$this->aTbcursoRelatedByCodCurso = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcurso object, it will not be re-added.
		if ($v !== null) {
			$v->addTbofertaRelatedByCodCurso($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcurso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcurso The associated Tbcurso object.
	 * @throws     PropelException
	 */
	public function getTbcursoRelatedByCodCurso(PropelPDO $con = null)
	{
		if ($this->aTbcursoRelatedByCodCurso === null && ($this->cod_curso !== null)) {
			$this->aTbcursoRelatedByCodCurso = TbcursoPeer::retrieveByPk($this->cod_curso);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcursoRelatedByCodCurso->addTbofertasRelatedByCodCurso($this);
			 */
		}
		return $this->aTbcursoRelatedByCodCurso;
	}

	/**
	 * Declares an association between this object and a Tbcurso object.
	 *
	 * @param      Tbcurso $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbcursoRelatedByCodCursoDestino(Tbcurso $v = null)
	{
		if ($v === null) {
			$this->setCodCursoDestino(NULL);
		} else {
			$this->setCodCursoDestino($v->getCodCurso());
		}

		$this->aTbcursoRelatedByCodCursoDestino = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbcurso object, it will not be re-added.
		if ($v !== null) {
			$v->addTbofertaRelatedByCodCursoDestino($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbcurso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbcurso The associated Tbcurso object.
	 * @throws     PropelException
	 */
	public function getTbcursoRelatedByCodCursoDestino(PropelPDO $con = null)
	{
		if ($this->aTbcursoRelatedByCodCursoDestino === null && ($this->cod_curso_destino !== null)) {
			$this->aTbcursoRelatedByCodCursoDestino = TbcursoPeer::retrieveByPk($this->cod_curso_destino);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbcursoRelatedByCodCursoDestino->addTbofertasRelatedByCodCursoDestino($this);
			 */
		}
		return $this->aTbcursoRelatedByCodCursoDestino;
	}

	/**
	 * Declares an association between this object and a Tbdisciplina object.
	 *
	 * @param      Tbdisciplina $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbdisciplina(Tbdisciplina $v = null)
	{
		if ($v === null) {
			$this->setCodDisciplina(NULL);
		} else {
			$this->setCodDisciplina($v->getCodDisciplina());
		}

		$this->aTbdisciplina = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbdisciplina object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbdisciplina object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbdisciplina The associated Tbdisciplina object.
	 * @throws     PropelException
	 */
	public function getTbdisciplina(PropelPDO $con = null)
	{
		if ($this->aTbdisciplina === null && (($this->cod_disciplina !== "" && $this->cod_disciplina !== null))) {
			$this->aTbdisciplina = TbdisciplinaPeer::retrieveByPk($this->cod_disciplina);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbdisciplina->addTbofertas($this);
			 */
		}
		return $this->aTbdisciplina;
	}

	/**
	 * Declares an association between this object and a Tbsala object.
	 *
	 * @param      Tbsala $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbsala(Tbsala $v = null)
	{
		if ($v === null) {
			$this->setIdSala(NULL);
		} else {
			$this->setIdSala($v->getIdSala());
		}

		$this->aTbsala = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbsala object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbsala object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbsala The associated Tbsala object.
	 * @throws     PropelException
	 */
	public function getTbsala(PropelPDO $con = null)
	{
		if ($this->aTbsala === null && ($this->id_sala !== null)) {
			$this->aTbsala = TbsalaPeer::retrieveByPk($this->id_sala);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbsala->addTbofertas($this);
			 */
		}
		return $this->aTbsala;
	}

	/**
	 * Declares an association between this object and a Tbprofessor object.
	 *
	 * @param      Tbprofessor $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbprofessorRelatedByIdMatriculaProf(Tbprofessor $v = null)
	{
		if ($v === null) {
			$this->setIdMatriculaProf(NULL);
		} else {
			$this->setIdMatriculaProf($v->getMatriculaProf());
		}

		$this->aTbprofessorRelatedByIdMatriculaProf = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbprofessor object, it will not be re-added.
		if ($v !== null) {
			$v->addTbofertaRelatedByIdMatriculaProf($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbprofessor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbprofessor The associated Tbprofessor object.
	 * @throws     PropelException
	 */
	public function getTbprofessorRelatedByIdMatriculaProf(PropelPDO $con = null)
	{
		if ($this->aTbprofessorRelatedByIdMatriculaProf === null && ($this->id_matricula_prof !== null)) {
			$this->aTbprofessorRelatedByIdMatriculaProf = TbprofessorPeer::retrieveByPk($this->id_matricula_prof);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbprofessorRelatedByIdMatriculaProf->addTbofertasRelatedByIdMatriculaProf($this);
			 */
		}
		return $this->aTbprofessorRelatedByIdMatriculaProf;
	}

	/**
	 * Declares an association between this object and a Tbprofessor object.
	 *
	 * @param      Tbprofessor $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbprofessorRelatedByIdMatriculaProf2(Tbprofessor $v = null)
	{
		if ($v === null) {
			$this->setIdMatriculaProf2(NULL);
		} else {
			$this->setIdMatriculaProf2($v->getMatriculaProf());
		}

		$this->aTbprofessorRelatedByIdMatriculaProf2 = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbprofessor object, it will not be re-added.
		if ($v !== null) {
			$v->addTbofertaRelatedByIdMatriculaProf2($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbprofessor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbprofessor The associated Tbprofessor object.
	 * @throws     PropelException
	 */
	public function getTbprofessorRelatedByIdMatriculaProf2(PropelPDO $con = null)
	{
		if ($this->aTbprofessorRelatedByIdMatriculaProf2 === null && ($this->id_matricula_prof2 !== null)) {
			$this->aTbprofessorRelatedByIdMatriculaProf2 = TbprofessorPeer::retrieveByPk($this->id_matricula_prof2);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbprofessorRelatedByIdMatriculaProf2->addTbofertasRelatedByIdMatriculaProf2($this);
			 */
		}
		return $this->aTbprofessorRelatedByIdMatriculaProf2;
	}

	/**
	 * Declares an association between this object and a Tbsetor object.
	 *
	 * @param      Tbsetor $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbsetor(Tbsetor $v = null)
	{
		if ($v === null) {
			$this->setIdSetor(NULL);
		} else {
			$this->setIdSetor($v->getIdSetor());
		}

		$this->aTbsetor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbsetor object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbsetor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbsetor The associated Tbsetor object.
	 * @throws     PropelException
	 */
	public function getTbsetor(PropelPDO $con = null)
	{
		if ($this->aTbsetor === null && ($this->id_setor !== null)) {
			$this->aTbsetor = TbsetorPeer::retrieveByPk($this->id_setor);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbsetor->addTbofertas($this);
			 */
		}
		return $this->aTbsetor;
	}

	/**
	 * Declares an association between this object and a Tbofertasituacao object.
	 *
	 * @param      Tbofertasituacao $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbofertasituacao(Tbofertasituacao $v = null)
	{
		if ($v === null) {
			$this->setIdSituacao(NULL);
		} else {
			$this->setIdSituacao($v->getIdSituacao());
		}

		$this->aTbofertasituacao = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbofertasituacao object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbofertasituacao object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbofertasituacao The associated Tbofertasituacao object.
	 * @throws     PropelException
	 */
	public function getTbofertasituacao(PropelPDO $con = null)
	{
		if ($this->aTbofertasituacao === null && ($this->id_situacao !== null)) {
			$this->aTbofertasituacao = TbofertasituacaoPeer::retrieveByPk($this->id_situacao);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbofertasituacao->addTbofertas($this);
			 */
		}
		return $this->aTbofertasituacao;
	}

	/**
	 * Declares an association between this object and a Tbpolos object.
	 *
	 * @param      Tbpolos $v
	 * @return     Tboferta The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTbpolos(Tbpolos $v = null)
	{
		if ($v === null) {
			$this->setIdPolo(0);
		} else {
			$this->setIdPolo($v->getIdPolo());
		}

		$this->aTbpolos = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tbpolos object, it will not be re-added.
		if ($v !== null) {
			$v->addTboferta($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tbpolos object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tbpolos The associated Tbpolos object.
	 * @throws     PropelException
	 */
	public function getTbpolos(PropelPDO $con = null)
	{
		if ($this->aTbpolos === null && ($this->id_polo !== null)) {
			$this->aTbpolos = TbpolosPeer::retrieveByPk($this->id_polo);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTbpolos->addTbofertas($this);
			 */
		}
		return $this->aTbpolos;
	}

	/**
	 * Clears out the collTbfilacalouross collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbfilacalouross()
	 */
	public function clearTbfilacalouross()
	{
		$this->collTbfilacalouross = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbfilacalouross collection (array).
	 *
	 * By default this just sets the collTbfilacalouross collection to an empty array (like clearcollTbfilacalouross());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbfilacalouross()
	{
		$this->collTbfilacalouross = array();
	}

	/**
	 * Gets an array of Tbfilacalouros objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tboferta has previously been saved, it will retrieve
	 * related Tbfilacalouross from storage. If this Tboferta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbfilacalouros[]
	 * @throws     PropelException
	 */
	public function getTbfilacalouross($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
			   $this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

				TbfilacalourosPeer::addSelectColumns($criteria);
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

				TbfilacalourosPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
					$this->collTbfilacalouross = TbfilacalourosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;
		return $this->collTbfilacalouross;
	}

	/**
	 * Returns the number of related Tbfilacalouros objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbfilacalouros objects.
	 * @throws     PropelException
	 */
	public function countTbfilacalouross(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

				$count = TbfilacalourosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

				if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
					$count = TbfilacalourosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbfilacalouross);
				}
			} else {
				$count = count($this->collTbfilacalouross);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbfilacalouros object to this object
	 * through the Tbfilacalouros foreign key attribute.
	 *
	 * @param      Tbfilacalouros $l Tbfilacalouros
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbfilacalouros(Tbfilacalouros $l)
	{
		if ($this->collTbfilacalouross === null) {
			$this->initTbfilacalouross();
		}
		if (!in_array($l, $this->collTbfilacalouross, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbfilacalouross, $l);
			$l->setTboferta($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbfilacalouross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbfilacalourossJoinTbcursoversao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbcursoversao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;

		return $this->collTbfilacalouross;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbfilacalouross from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbfilacalourossJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilacalouross === null) {
			if ($this->isNew()) {
				$this->collTbfilacalouross = array();
			} else {

				$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilacalourosPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbfilacalourosCriteria) || !$this->lastTbfilacalourosCriteria->equals($criteria)) {
				$this->collTbfilacalouross = TbfilacalourosPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilacalourosCriteria = $criteria;

		return $this->collTbfilacalouross;
	}

	/**
	 * Clears out the collTbfilas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbfilas()
	 */
	public function clearTbfilas()
	{
		$this->collTbfilas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbfilas collection (array).
	 *
	 * By default this just sets the collTbfilas collection to an empty array (like clearcollTbfilas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbfilas()
	{
		$this->collTbfilas = array();
	}

	/**
	 * Gets an array of Tbfila objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tboferta has previously been saved, it will retrieve
	 * related Tbfilas from storage. If this Tboferta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbfila[]
	 * @throws     PropelException
	 */
	public function getTbfilas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilas === null) {
			if ($this->isNew()) {
			   $this->collTbfilas = array();
			} else {

				$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

				TbfilaPeer::addSelectColumns($criteria);
				$this->collTbfilas = TbfilaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

				TbfilaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbfilaCriteria) || !$this->lastTbfilaCriteria->equals($criteria)) {
					$this->collTbfilas = TbfilaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbfilaCriteria = $criteria;
		return $this->collTbfilas;
	}

	/**
	 * Returns the number of related Tbfila objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbfila objects.
	 * @throws     PropelException
	 */
	public function countTbfilas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbfilas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

				$count = TbfilaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

				if (!isset($this->lastTbfilaCriteria) || !$this->lastTbfilaCriteria->equals($criteria)) {
					$count = TbfilaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbfilas);
				}
			} else {
				$count = count($this->collTbfilas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbfila object to this object
	 * through the Tbfila foreign key attribute.
	 *
	 * @param      Tbfila $l Tbfila
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbfila(Tbfila $l)
	{
		if ($this->collTbfilas === null) {
			$this->initTbfilas();
		}
		if (!in_array($l, $this->collTbfilas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbfilas, $l);
			$l->setTboferta($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbfilas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbfilasJoinTbaluno($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilas === null) {
			if ($this->isNew()) {
				$this->collTbfilas = array();
			} else {

				$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbfilas = TbfilaPeer::doSelectJoinTbaluno($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbfilaCriteria) || !$this->lastTbfilaCriteria->equals($criteria)) {
				$this->collTbfilas = TbfilaPeer::doSelectJoinTbaluno($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilaCriteria = $criteria;

		return $this->collTbfilas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbfilas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbfilasJoinTbfilasituacao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbfilas === null) {
			if ($this->isNew()) {
				$this->collTbfilas = array();
			} else {

				$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbfilas = TbfilaPeer::doSelectJoinTbfilasituacao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbfilaPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbfilaCriteria) || !$this->lastTbfilaCriteria->equals($criteria)) {
				$this->collTbfilas = TbfilaPeer::doSelectJoinTbfilasituacao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbfilaCriteria = $criteria;

		return $this->collTbfilas;
	}

	/**
	 * Clears out the collTbofertacoordenadors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertacoordenadors()
	 */
	public function clearTbofertacoordenadors()
	{
		$this->collTbofertacoordenadors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertacoordenadors collection (array).
	 *
	 * By default this just sets the collTbofertacoordenadors collection to an empty array (like clearcollTbofertacoordenadors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertacoordenadors()
	{
		$this->collTbofertacoordenadors = array();
	}

	/**
	 * Gets an array of Tbofertacoordenador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tboferta has previously been saved, it will retrieve
	 * related Tbofertacoordenadors from storage. If this Tboferta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbofertacoordenador[]
	 * @throws     PropelException
	 */
	public function getTbofertacoordenadors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertacoordenadors === null) {
			if ($this->isNew()) {
			   $this->collTbofertacoordenadors = array();
			} else {

				$criteria->add(TbofertacoordenadorPeer::ID_OFERTA, $this->id_oferta);

				TbofertacoordenadorPeer::addSelectColumns($criteria);
				$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertacoordenadorPeer::ID_OFERTA, $this->id_oferta);

				TbofertacoordenadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertacoordenadorCriteria) || !$this->lastTbofertacoordenadorCriteria->equals($criteria)) {
					$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertacoordenadorCriteria = $criteria;
		return $this->collTbofertacoordenadors;
	}

	/**
	 * Returns the number of related Tbofertacoordenador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbofertacoordenador objects.
	 * @throws     PropelException
	 */
	public function countTbofertacoordenadors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertacoordenadors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertacoordenadorPeer::ID_OFERTA, $this->id_oferta);

				$count = TbofertacoordenadorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertacoordenadorPeer::ID_OFERTA, $this->id_oferta);

				if (!isset($this->lastTbofertacoordenadorCriteria) || !$this->lastTbofertacoordenadorCriteria->equals($criteria)) {
					$count = TbofertacoordenadorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertacoordenadors);
				}
			} else {
				$count = count($this->collTbofertacoordenadors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbofertacoordenador object to this object
	 * through the Tbofertacoordenador foreign key attribute.
	 *
	 * @param      Tbofertacoordenador $l Tbofertacoordenador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertacoordenador(Tbofertacoordenador $l)
	{
		if ($this->collTbofertacoordenadors === null) {
			$this->initTbofertacoordenadors();
		}
		if (!in_array($l, $this->collTbofertacoordenadors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertacoordenadors, $l);
			$l->setTboferta($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbofertacoordenadors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbofertacoordenadorsJoinTbprofessor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertacoordenadors === null) {
			if ($this->isNew()) {
				$this->collTbofertacoordenadors = array();
			} else {

				$criteria->add(TbofertacoordenadorPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelectJoinTbprofessor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbofertacoordenadorPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbofertacoordenadorCriteria) || !$this->lastTbofertacoordenadorCriteria->equals($criteria)) {
				$this->collTbofertacoordenadors = TbofertacoordenadorPeer::doSelectJoinTbprofessor($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbofertacoordenadorCriteria = $criteria;

		return $this->collTbofertacoordenadors;
	}

	/**
	 * Clears out the collTbofertahorarios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbofertahorarios()
	 */
	public function clearTbofertahorarios()
	{
		$this->collTbofertahorarios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbofertahorarios collection (array).
	 *
	 * By default this just sets the collTbofertahorarios collection to an empty array (like clearcollTbofertahorarios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbofertahorarios()
	{
		$this->collTbofertahorarios = array();
	}

	/**
	 * Gets an array of Tbofertahorario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tboferta has previously been saved, it will retrieve
	 * related Tbofertahorarios from storage. If this Tboferta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbofertahorario[]
	 * @throws     PropelException
	 */
	public function getTbofertahorarios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbofertahorarios === null) {
			if ($this->isNew()) {
			   $this->collTbofertahorarios = array();
			} else {

				$criteria->add(TbofertahorarioPeer::ID_OFERTA, $this->id_oferta);

				TbofertahorarioPeer::addSelectColumns($criteria);
				$this->collTbofertahorarios = TbofertahorarioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbofertahorarioPeer::ID_OFERTA, $this->id_oferta);

				TbofertahorarioPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbofertahorarioCriteria) || !$this->lastTbofertahorarioCriteria->equals($criteria)) {
					$this->collTbofertahorarios = TbofertahorarioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbofertahorarioCriteria = $criteria;
		return $this->collTbofertahorarios;
	}

	/**
	 * Returns the number of related Tbofertahorario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbofertahorario objects.
	 * @throws     PropelException
	 */
	public function countTbofertahorarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbofertahorarios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbofertahorarioPeer::ID_OFERTA, $this->id_oferta);

				$count = TbofertahorarioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbofertahorarioPeer::ID_OFERTA, $this->id_oferta);

				if (!isset($this->lastTbofertahorarioCriteria) || !$this->lastTbofertahorarioCriteria->equals($criteria)) {
					$count = TbofertahorarioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbofertahorarios);
				}
			} else {
				$count = count($this->collTbofertahorarios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbofertahorario object to this object
	 * through the Tbofertahorario foreign key attribute.
	 *
	 * @param      Tbofertahorario $l Tbofertahorario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbofertahorario(Tbofertahorario $l)
	{
		if ($this->collTbofertahorarios === null) {
			$this->initTbofertahorarios();
		}
		if (!in_array($l, $this->collTbofertahorarios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbofertahorarios, $l);
			$l->setTboferta($this);
		}
	}

	/**
	 * Clears out the collTbturmas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTbturmas()
	 */
	public function clearTbturmas()
	{
		$this->collTbturmas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTbturmas collection (array).
	 *
	 * By default this just sets the collTbturmas collection to an empty array (like clearcollTbturmas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTbturmas()
	{
		$this->collTbturmas = array();
	}

	/**
	 * Gets an array of Tbturma objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tboferta has previously been saved, it will retrieve
	 * related Tbturmas from storage. If this Tboferta is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tbturma[]
	 * @throws     PropelException
	 */
	public function getTbturmas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
			   $this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

				TbturmaPeer::addSelectColumns($criteria);
				$this->collTbturmas = TbturmaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

				TbturmaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
					$this->collTbturmas = TbturmaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTbturmaCriteria = $criteria;
		return $this->collTbturmas;
	}

	/**
	 * Returns the number of related Tbturma objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tbturma objects.
	 * @throws     PropelException
	 */
	public function countTbturmas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

				$count = TbturmaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

				if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
					$count = TbturmaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTbturmas);
				}
			} else {
				$count = count($this->collTbturmas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tbturma object to this object
	 * through the Tbturma foreign key attribute.
	 *
	 * @param      Tbturma $l Tbturma
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTbturma(Tbturma $l)
	{
		if ($this->collTbturmas === null) {
			$this->initTbturmas();
		}
		if (!in_array($l, $this->collTbturmas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTbturmas, $l);
			$l->setTboferta($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbturmas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbturmasJoinTbperiodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbturmas = TbturmaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
				$this->collTbturmas = TbturmaPeer::doSelectJoinTbperiodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaCriteria = $criteria;

		return $this->collTbturmas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Tboferta is new, it will return
	 * an empty collection; or if this Tboferta has previously
	 * been saved, it will retrieve related Tbturmas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Tboferta.
	 */
	public function getTbturmasJoinTbdisciplina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTbturmas === null) {
			if ($this->isNew()) {
				$this->collTbturmas = array();
			} else {

				$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

				$this->collTbturmas = TbturmaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TbturmaPeer::ID_OFERTA, $this->id_oferta);

			if (!isset($this->lastTbturmaCriteria) || !$this->lastTbturmaCriteria->equals($criteria)) {
				$this->collTbturmas = TbturmaPeer::doSelectJoinTbdisciplina($criteria, $con, $join_behavior);
			}
		}
		$this->lastTbturmaCriteria = $criteria;

		return $this->collTbturmas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTbfilacalouross) {
				foreach ((array) $this->collTbfilacalouross as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbfilas) {
				foreach ((array) $this->collTbfilas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertacoordenadors) {
				foreach ((array) $this->collTbofertacoordenadors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbofertahorarios) {
				foreach ((array) $this->collTbofertahorarios as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTbturmas) {
				foreach ((array) $this->collTbturmas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTbfilacalouross = null;
		$this->collTbfilas = null;
		$this->collTbofertacoordenadors = null;
		$this->collTbofertahorarios = null;
		$this->collTbturmas = null;
			$this->aTbperiodo = null;
			$this->aTbturno = null;
			$this->aTbcursoRelatedByCodCurso = null;
			$this->aTbcursoRelatedByCodCursoDestino = null;
			$this->aTbdisciplina = null;
			$this->aTbsala = null;
			$this->aTbprofessorRelatedByIdMatriculaProf = null;
			$this->aTbprofessorRelatedByIdMatriculaProf2 = null;
			$this->aTbsetor = null;
			$this->aTbofertasituacao = null;
			$this->aTbpolos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTboferta:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTboferta::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTboferta
