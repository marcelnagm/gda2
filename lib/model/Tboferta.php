<?php

/**
 * Skeleton subclass for representing a row from the 'tboferta' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Tue May  4 12:14:40 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Tboferta extends BaseTboferta {

    public function save(PropelPDO $con = null) {
        $criteria = new Criteria();

        if ($this->isNew()) {
            $this->setIdSituacao(1);
            if (!isset($this->dt_inicio)) {
                $this->setDtInicio($this->getTbperiodo()->getDtInicio());
            }
            if (!isset($this->dt_fim)) {
                $this->setDtFim($this->getTbperiodo()->getDtFim());
            }
            if (!isset($this->cod_curso_destino)) {
                $this->setCodCursoDestino($this->getCodCurso());
            }
        }

        if ($this->getIdSituacao() == 3) {
            $criteria->add(TbfilaPeer::ID_OFERTA, $this->getIdOferta());
            $var = new Tbfila();
            foreach (TbfilaPeer::doSelect($criteria) as $var) {
//                if (in_array($var->getIdSituacao(), array(1))) {
                $var->setIdSituacao(9);
                $var->save();
//                }
            }
        }

        $criteria->clear();
        $criteria->add(TbturmaPeer::ID_OFERTA, $this->getIdOferta());
        $turma = new Tbturma();
        $turma = TbturmaPeer::doSelectOne($criteria);

        if ($turma != null && !$this->isNew()) {
            $criteria->clear();
            $criteria->add(TbturmaProfessorPeer::ID_TURMA, $turma->getIdTurma());
            TbturmaProfessorPeer::doDelete($criteria);

            $prof = new TbturmaProfessor();
            $prof->setMatriculaProf($this->getIdMatriculaProf());
            $prof->setIdTurma($turma->getIdTurma());
            $prof->save();

            $prof = new TbturmaProfessor();
            $prof->setMatriculaProf($this->getIdMatriculaProf2());
            $prof->setIdTurma($turma->getIdTurma());
            $prof->save();
        }

        Log::save($this);
        parent::save($con);
    }

    function __toString() {
        $disciplina = ($this->getTbdisciplina()) ? $this->getTbdisciplina()->getDescricao() : '';
        return $this->getCodDisciplina() . "-" . $this->getTurma() . " / " . $disciplina . " / " . $this->getTbperiodo();
    }

    function getTbofertahorarios($criteria = null, PropelPDO $con = null) {
        if ($criteria === null) {
            $criteria = new Criteria(TbofertaPeer::DATABASE_NAME);
            $criteria->addAscendingOrderByColumn(TbofertahorarioPeer::DIA);
        }
        return parent::getTbofertahorarios($criteria, $con);
    }

    function getSolicitacoesPendentes() {
        $criteria = new Criteria();
        $criteria->add(TbfilaPeer::ID_SITUACAO, array(0), Criteria::IN);
        return parent::countTbfilas($criteria);
    }

    function getSolicitacoes() {
        return parent::countTbfilas();
    }

    public function getMatriculados() {
        $criteria = new Criteria();
        $criteria->add(TbturmaPeer::ID_OFERTA, $this->getIdOferta());

        $criteria->clear();
        $criteria->add(TbturmaAlunoPeer::ID_TURMA, TbturmaPeer::doSelectOne($criteria)->getIdTurma());
        return TbturmaAlunoPeer::doCount($criteria);
    }

    function getSolicitacoesAceitas() {
        $criteria = new Criteria();
        $criteria->add(TbfilaPeer::ID_SITUACAO, 1);
        $criteria->add(TbfilaPeer::ID_OFERTA, $this->getIdOferta());
        return TbfilaPeer::doCount($criteria);
    }

    function getChDisciplina() {
        return ($this->getTbdisciplina() instanceof Tbdisciplina) ? $this->getTbdisciplina()->getCh() : '';
    }

    function getVagasRemanescentes() {
        $criteria = new Criteria();
        $criteria->add(TbfilaPeer::ID_SITUACAO, array(1), Criteria::IN);
        $temp = parent::getVagas() - parent::countTbfilas($criteria);
        return $temp <= 0 ? 0 : $temp;
    }

    function getAlunosMatriculados() {

        $contador_alunos = 0;
        $turmas = $this->getTbturmas();

        foreach ($turmas as $turma) {
            $contador_alunos += $turma->getQtdeAlunos();
        }

        return $contador_alunos;
    }

    public function getDias() {
        $criteria = new Criteria();
        $criteria->add(TbofertahorarioPeer::ID_OFERTA, $this->getIdOferta());
        $criteria->addAscendingOrderByColumn(TbofertahorarioPeer::DIA);
        $result = TbofertahorarioPeer::doSelect($criteria);
        $key = new Tbofertahorario();
        $enviar = '';
        foreach ($result as $key) {
            $enviar .= $key->__toString() . "\n";
        }
        return $enviar;
    }

    public function delete(PropelPDO $con = null) {


        foreach ($this->getTbofertahorarios() as $coord) {
            $coord->delete();
        }
        foreach ($this->getTbofertacoordenadors() as $coord) {
            $coord->delete();
        }
        parent::delete($con);
    }

    /**
     * Retorno <b>false</b> para horário em conflito com outra disciplina e
     * <b>true</b> para horário sem conflito
     * @param <tbofertahorario> $horario
     * @return <boolean>
     */
    public function checaHorarios() {
        foreach ($this->getTbofertahorarios() as $horario) {
            if (!$this->verificaHorario($horario)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Retorno <b>false</b> para horário em conflito em outra disciplina e
     * <b>true</b> para horário sem conflito
     * @param <tbofertahorario> $horario
     * @return <boolean>
     */
    public function verificaHorario($horario) {


        if ($this->getTbsala()->getDescricao() != 'Não definida') {
            $sql = 'SELECT tbofertahorario.ID_OFERTA FROM tbofertahorario, tboferta WHERE tboferta.ID_SALA=' . $horario->getTboferta()->getIdSala() . 'AND tboferta.ID_PERIODO=' . $horario->getTboferta()->getIdPeriodo() . 'AND tbofertahorario.ID_OFERTA=tboferta.ID_OFERTA AND tbofertahorario.dia =' . $horario->getDia() . 'AND (
                                ( tbofertahorario.HORA_INICIO >= \'' . $horario->getHoraInicio() . '\' AND  tbofertahorario.HORA_INICIO <= \'' . $horario->getHoraFim() . '\' )
                              AND
                                (   tbofertahorario.HORA_FIM >= \'' . $horario->getHoraInicio() . '\' AND tbofertahorario.HORA_FIM <= \'' . $horario->getHoraFim() . '\' )

	) ';
            if (!$this->isNew()) {
                $sql .= 'AND tboferta.id_oferta !=' . $this->getIdOferta();
            }

            $con = Propel::getConnection();
            $stmt = $con->prepare($sql);
            $stmt->execute();
            if ($stmt->rowCount() == 0) {
                return true;
            } else {
                $ofertas = array();
                for ($i = 0; $i < $stmt->rowCount(); $i++) {
                    $line = $stmt->fetch();
                    $ofertas[] = $line[0];
                }
                sfContext::getInstance()->getUser()->setAttribute('oferta_horario_erro', $ofertas);
                false;
            }
        } else {
            return true;
        }
    }

    public function setTurma($v) {
        parent::setTurma(strtoupper($v));
    }

    public function getTbprofessor() {
        return $this->getTbprofessorRelatedByIdMatriculaProf() . ' ' . $this->getTbprofessorRelatedByIdMatriculaProf2();
    }

    public function criaTurma() {


//try{
        $criteria = new Criteria();
        $criteria->add(TbturmaPeer::ID_OFERTA, $this->getIdOferta());
        if (TbturmaPeer::doCount($criteria) == 0) {
            sfContext::getInstance()->getUser()->setFlash('notice', 'turma criada');
        } else {
//            throw new Exception('Turma já criada');
            sfContext::getInstance()->getUser()->setFlash('error', 'Esta oferta ja possui turma criada');
            return false;
        }
        $turma = new Tbturma();
        $turma->setIdOferta($this->getIdOferta());
        $turma->setNNotas(1);
        $turma->save();

        $turma_professor = new TbturmaProfessor();
        $turma_professor->setIdTurma($turma->getIdTurma());
        $turma_professor->setTbprofessor($this->getTbprofessorRelatedByIdMatriculaProf());
        $turma_professor->save();

        if ($this->getIdMatriculaProf2() != '') {
            $turma_professor = new TbturmaProfessor();
            $turma_professor->setIdTurma($turma->getIdTurma());
            $turma_professor->setTbprofessor($this->getTbprofessorRelatedByIdMatriculaProf2());
            $turma_professor->save();
        }

        $criteria = new Criteria();
        $criteria->add(TbfilaPeer::ID_SITUACAO, 1);
        foreach ($this->getTbfilas($criteria) as $alunos) {
            $turma_aluno = new TbturmaAluno();
            $turma_aluno->setIdTurma($turma->getIdTurma());
            $turma_aluno->setMatricula($alunos->getMatricula());
            $turma_aluno->save();
        }
//}  catch (Exception $ex){
//
//}
    }

}

// Tboferta
