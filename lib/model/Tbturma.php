<?php

/**
 * Skeleton subclass for representing a row from the 'tbturma' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Wed May 12 08:42:49 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Tbturma extends BaseTbturma {

    /**
     * Sobrescreve o metodo __toString para ficar no padrao:
     * <ul><li>[cod_disciplina] + [turma] + [periodo]</li></ul>
     * @return string
     */
    public function __toString() {
        return $this->getTbdisciplina()->getCodDisciplinaMasked() . "-" . $this->getTurma() . " / " . $this->getTbperiodo();
    }

    /**
     * Define as notas e as salva no banco de dados
     */
    public function transferirNotasHist() {
        $this->setNotasNoHistorico(!$this->getNotasNoHistorico());
        $this->save();
    }

    /**
     * Remove as notas do historico
     */
    private function retirarNotasHistorico() {

//        $con = Propel::getConnection();
//        try {
//            $sql = "DELETE FROM tbhistorico WHERE id_periodo = :id_periodo AND cod_disciplina = :cod_disciplina AND matricula IN (SELECT matricula FROM tbturma_aluno WHERE id_turma = :id_turma)";
//            $stmt = $con->prepare($sql);
//            $stmt->bindValue('id_periodo', $this->getIdPeriodo());
//            $stmt->bindValue('cod_disciplina', $this->getCodDisciplina());
//            $stmt->bindValue('id_turma', $this->getIdTurma());
//            $stmt->execute();

        $nota = new TbturmaAluno();
        foreach ($this->getTbturmaAlunos() as $nota) {
            $criteria = new Criteria();
            $criteria->add(TbhistoricoPeer::ID_PERIODO, $this->getIdPeriodo());
            $criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->getCodDisciplina());
            $criteria->add(TbhistoricoPeer::MATRICULA, $nota->getMatricula());
            $criteria->add(TbhistoricoPeer::ID_CONCEITO, array(13,7,6), Criteria::NOT_IN);
            //se existir mais de 0 remover todos.
            if (TbhistoricoPeer::doCount($criteria) > 0) {
                foreach (TbhistoricoPeer::doSelect($criteria) as $hist) {
                    $hist->delete();
                }
            }
        }



//        } catch (Exception $exc) {
//            throw new Exception($this->getCodDisciplina() . "-" . $this->getTurma() . ": " . $exc->getMessage());
//        }
    }

    /**
     * Transfere Notas da turma para o histórico
     */
    private function transferirNotasHistorico() {

//        $con = Propel::getConnection();
//        try {
//            $id = $this->getCodDisciplina() == 'ST999' ? 9 : 'id_conceito';
//            $sql = "INSERT INTO tbhistorico(id_periodo,matricula,cod_disciplina,faltas,media,id_conceito)
//                            SELECT id_periodo,matricula,cod_disciplina,faltas,media_final," . $id . "
//                            FROM tbturma_aluno JOIN tbturma USING (id_turma)
//                            WHERE id_turma = ?";
//            $stmt = $con->prepare($sql);
//            $stmt->bindParam(1, $this->getIdTurma());
//            $stmt->execute();

        $nota = new TbturmaAluno();
        foreach ($this->getTbturmaAlunos() as $nota) {
            $criteria = new Criteria();
            $criteria->add(TbhistoricoPeer::ID_PERIODO, $this->getIdPeriodo());
            $criteria->add(TbhistoricoPeer::COD_DISCIPLINA, $this->getCodDisciplina());
            $criteria->add(TbhistoricoPeer::MATRICULA, $nota->getMatricula());
            $criteria->add(TbhistoricoPeer::ID_CONCEITO, $nota->getIdConceito());
            $criteria->add(TbhistoricoPeer::MEDIA, $nota->getMediaFinal());
            //Se não existir a nota adiciona
            if (TbhistoricoPeer::doCount($criteria) == 0) {
                $historico = new Tbhistorico();
                $historico->setMatricula($nota->getMatricula());
                $historico->setIdPeriodo($this->getIdPeriodo());
                $historico->setCodDisciplina($this->getCodDisciplina());
                $historico->setMedia($nota->getMediaFinal());
                $historico->setFaltas($nota->getFaltas());
                $historico->setIdConceito($this->getCodDisciplina() == 'ST999' ? 9 : $nota->getIdConceito());
                $historico->save();
            }
        }



//        } catch (Exception $exc) {
//            throw new Exception($this->getCodDisciplina() . "-" . $this->getTurma() . ": " . $exc->getMessage());
//        }
    }

    /**
     * Sobrescreve o metodo setNotasNoHistorico para remover as notas se elas ja<br>
     * existem no historico, para evitar duplicacoes. Se nao existirem notas no<br>
     * historico, ele transfere as notas da turma para o historico.
     * @param array $value
     * as notas dos alunos na turma
     */
    public function setNotasNoHistorico($value) {
        # retirar/transferir as notas do historico
        if (!$this->isNew() || $this->getQtdeAlunos() != 0) {
            if ($this->getNotasNoHistorico() && $value == false) {
                $this->retirarNotasHistorico();
            } else if ($this->getNotasNoHistorico() == false && $value) {
                $this->transferirNotasHistorico();
            }
        }
        parent::setNotasNoHistorico($value);
    }

    /**
     * Sobrescreve o metodo setNNotas, para substituir valores vazios por null<br>
     * @param string $v
     * n_notas
     */
    public function setNNotas($v) {
        $v = ($v != '') ? sprintf('%d', $v) : null;
        parent::setNNotas($v);
    }

    /**
     * Retorna o numero de alunos na turma<br>
     * @return int
     */
    public function getQtdeAlunos() {

        return $this->countTbturmaAlunos();
    }

    /**
     * Sobrescreve o metodo getTbturmaAlunos, para retornar uma array com <br>
     * elementos do tipo TbturmaAlunos, ordenados por nome<br>
     * @param Criteria $criteria
     * @param PropelPDO $con
     * @return array
     */
    public function getTbturmaAlunos($criteria = null, PropelPDO $con = null) {
        if ($criteria == null) {
            $criteria = new Criteria();
            $criteria->addJoin(TbturmaAlunoPeer::MATRICULA, TbalunoPeer::MATRICULA, Criteria::LEFT_JOIN);
            $criteria->addAscendingOrderByColumn(TbalunoPeer::NOME);
        }
        return parent::getTbturmaAlunos($criteria, $con);
    }

    /**
     * Chamada ao banco de dados para verificar a porcentagem de faltas do aluno<br>
     * na turma<br>
     * @return int
     */
    public function getPorcentagemPreenchido() {

        $turmaAlunos = $this->getTbturmaAlunos();

        $faltas = 0;
        $notas = 0;

        $con = Propel::getConnection();
        $sql = "SELECT (SELECT count(faltas) FROM tbturma_aluno WHERE id_turma = :id) as faltas, (SELECT count(valor) FROM tbturma_nota tn,tbturma_aluno ta WHERE ta.id_aluno=tn.id_aluno AND id_turma = :id) as notas";
        $stmt = $con->prepare($sql);
        $stmt->bindValue('id', $this->getIdTurma());
        $rs = $stmt->execute();

        list($faltas, $notas) = $stmt->fetch();

        $alunos = $this->countTbturmaAlunos();
        $n_notas = $this->getNNotas();

        $total = ( $alunos + ($alunos * $n_notas) ); # faltas + total de notas

        $preenchido = $faltas + $notas;

        $porcentagem = ($preenchido * 100) / $total;

        return round($porcentagem);
    }

    /**
     * Remove esta turma, alunos, professores e sumulas relacionadas a
     * esta ela e redefine as filas e as ofertas
     */
    public function removerTurma() {

        $this->atualizaSituacao(9);

        foreach ($this->getTbturmaAlunos() as $turma) {
            $turma->delete();
        }

        foreach ($this->getTbturmaSumulas() as $turmaSumulas) {
            $turmaSumulas->delete();
        }
        foreach ($this->getTbturmaProfessors() as $turmaProfessors) {
            $turmaProfessors->delete();
        }               

        $oferta = $this->getTboferta();
        $oferta->setIdSituacao(3);
        $oferta->save();

//        $this->delete();
    }

    /**
     * Remove todos os alunos desta turma
     */
    public function removeTurmaAlunos() {
//        $turma = new TbturmaAluno();
//        $turmaAlunos = $this->getTbturmaAlunos();
        foreach ($this->getTbturmaAlunos() as $turma) {
            $turma->delete();
        }
    }

    /**
     * Define a situacao das filas relacionadas a essa turma<br>
     * @param int $situacao 
     * a situacao para ser definida, padrao = '9'
     */
    public function atualizaSituacao($situacao = '9') {
        $fila = new Tbfila();
        $criteria = new Criteria();
        $criteria->add(TbfilaPeer::ID_SITUACAO,1);
        $filaAlunos = $this->getTboferta()->getTbfilas($criteria);
        foreach ($filaAlunos as $fila) {
            $fila->setIdSituacao($situacao);
            $fila->save();
        }
    }

    /**
     * Retorna os professores dessa turma<br>
     * @return Tbturmaprofessors
     */
    public function getProfessores() {
        return $this->getTbturmaProfessors();
    }

    /**
     * Retorna o numero de vagas da turma<br>
     * @return int
     */
    public function getVagas() {
        return $this->getTboferta()->getVagas();
    }

    /**
     * Retorna a situacao da turma<br>
     * @return Tbofertasituacao
     */
    public function getSituacao() {
        return $this->getTboferta()->getTbofertasituacao();
    }

    /**
     * Retorna os alunos associados a essa turma<br>
     * @return array
     */
    public function getALunos() {
        $retorno = array();

        $alunos = $this->getTbturmaAlunos();
        foreach ($alunos as $aluno) {
            $retorno[] = $aluno->getTbaluno();
        }
        return $retorno;
    }

    /**
     * Sobrescreve o metodo save para atualizar os atributos created_by e updated_by,<br>
     * e verifica se os atributos de turma, cod_disciplina e idperiodo estão corretos
     * <br>
     * @param PropelPDO $con
     */
    public function save(PropelPDO $con = null) {
        if ($this->getTboferta() != null){
            $this->setTurma($this->getTboferta()->getTurma());
        }
        if ($this->getTboferta() != null){
            $this->setCodDisciplina($this->getTboferta()->getCodDisciplina());
        }
        if ($this->getTboferta() != null){
            $this->setIdPeriodo($this->getTboferta()->getIdPeriodo());
        }

//        $i = 0;
//        foreach($this->getTbturmaProfessors() as $prof) {
//            $array[$i] = $prof->getMatriculaProf();
//            $i++;
//        }
//        $this->getTboferta()->setIdMatriculaProf($array[0]);
//        $this->getTboferta()->setIdMatriculaProf2($array[1]);

        Log::save($this);
        parent::save($con);
    }

    /**
     * Retorna os alunos (regulares e especiais) que estao matriculados na turma
     * <br>
     * @return array
     */
    public function getListTbturmaAlunos() {
        $c = new Criteria();
        $c->add(TbturmaAlunoPeer::ID_TURMA, $this->getIdTurma());
        $c->addJoin(TbturmaAlunoPeer::MATRICULA, TbalunoPeer::MATRICULA);
//        $situacoes_matricula = array(
//            0, // Aluno Regular
//            12, // Aluno Especial
//        );
//        $situacoes_matricula = sfConfig::get('app_situacoes_matricula_turma', $situacoes_matricula);
//        $c->add(TbalunoPeer::ID_SITUACAO, $situacoes_matricula, Criteria::IN);
        $c->addAscendingOrderByColumn(TbalunoPeer::NOME);
        return TbturmaAlunoPeer::doSelectJoinTbaluno($c);
    }

    public function delete(PropelPDO $con = null) {

        foreach ($this->getTbturmaAlunos() as $aluno) {
            $aluno->delete();
        }

        foreach ($this->getTbturmaProfessors() as $prof) {
            $prof->delete();
        }
        foreach ($this->getTbturmaSumulas() as $prof) {
            $prof->delete();
        }


        parent::delete($con);
    }

}

// Tbturma
