<?php

/**
 * Skeleton subclass for performing query and update operations on the 'tbaluno' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Tue May  4 12:14:29 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class TbalunoPeer extends BaseTbalunoPeer {

    private static $fieldsAlter = array('IdPessoa', 'Matricula', 'Nome', 'Celular', 'Email', 'FoneResidencial', 'Foto', 'IdNecesEspecial', 'DtNascimento', 'Naturalidade', 'UfNascimento', 'Nacionalidade', 'Sexo', 'EstadoCivil', 'Titulo', 'TituloZona', 'TituloSecao', 'Rg', 'RgDtExped', 'RgOrgExped', 'Cpf', 'Reservista', 'Pai', 'Mae', 'TblogradouroRelatedByCep', 'Numero', 'Complemento', 'IdVersaoCurso', 'IdTipoIngresso', 'DtIngresso', 'IdSituacao', 'DtSituacao', 'IdDestino', 'Id2grau', 'AnoConcl2grau', 'Id3grau', 'AnoConcl3grau', 'IdTrabalho', 'CepTrabalho', 'FoneTrabalho', 'RamalTrabalho', 'MediaGeral', 'ChEletivaCursada', 'ChEletivaSolicitada', 'ChObrigCursada', 'ChObrigSolicitada', 'ChTotal', 'CreatedAt', 'UpdatedAt', 'CreatedBy', 'UpdatedBy', 'IdAntigo', 'IdRaca',);

    const JubilandoPorPrazoMax = "SELECT matricula from (select matricula,descricao,dt_ingresso,  to_date(EXTRACT(day from date (dt_ingresso) ) || '/' || EXTRACT(month from date (dt_ingresso) ) || '/' || (CAST(replace(prazo_max ,',','.')as real) + EXTRACT(year from date (dt_ingresso) ) ), 'DD MM YYYY') AS max  from tbcursoversao AS A,tbaluno AS B where A.situacao like 'ATIV%' and B.id_versao_curso = A.id_versao_curso AND id_situacao = 0 ) AS C where C.max < now()";
    const JubilandoPorReprovacoes = "select matricula from ( select matricula,cod_disciplina,count(cod_disciplina) as num from tbhistorico where matricula in (select matricula from tbaluno where id_situacao = 0) and id_conceito in (2,3) group by cod_disciplina,matricula) as A where A.num >=4 ;";
    const JubilandoPorTrancamento = "SELECT temp.mat from (SELECT tbaluno.matricula as mat,COUNT(cod_disciplina ) AS cont FROM   public.tbaluno,   public.tbhistorico WHERE   tbhistorico.matricula = tbaluno.matricula AND   tbhistorico.cod_disciplina = 'ST999' AND   tbaluno.id_situacao = 0 GROUP BY cod_disciplina,tbaluno.matricula ) AS temp where cont >=4;";
    const FormandoPorCH = "SELECT tbaluno.matricula FROM  tbaluno, tbcursoversao WHERE   tbaluno.id_versao_curso = tbcursoversao.id_versao_curso and   tbaluno.ch_obrig_cursada + tbaluno.ch_obrig_solicitada >= tbcursoversao.ch_obr and   tbaluno.ch_eletiva_cursada + tbaluno.ch_eletiva_solicitada >= tbcursoversao.ch_eletiva and   tbaluno.id_situacao = 0 ";

    public static function doSelect(Criteria $criteria, PropelPDO $con = null) {
        $criteria->addAscendingOrderByColumn(self::NOME);
        return parent::doSelect($criteria, $con);
    }

    static public function getFieldNamesAlter() {
        return self::$fieldsAlter;
    }

    public static function getArrayIdRemover() {
        return array(2, 3, 4, 6, 7, 8, 9, 10, 15, 16, 18);
    }

    public static function getProvaveisFormandosLetras($id_periodo) {
        $provaveis_formandos = array();

        $criteria = new Criteria();
        $criteria->add(TbalunoPeer::ID_SITUACAO, 0);
        $criteria->addJoin(TbalunoPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO);
        $criteria->add(TbcursoversaoPeer::DESCRICAO, 'LETRAS - LITERATURA%', Criteria::LIKE);
        $criteria->add(TbalunoPeer::MATRICULA, 'matricula IN (SELECT matricula from tbaluno,tbcursoversao where id_situacao = 0 AND porcentagem_ch_cursada(matricula) >=50 AND tbcursoversao.descricao like \'LETRAS - LITERATURA%\' AND tbcursoversao.id_versao_curso = tbaluno.id_versao_curso)', Criteria::CUSTOM);
        $criteria->add(TbcursoversaoPeer::SITUACAO, 'ATIVO', Criteria::EQUAL);
        $criteria->add(TbalunoPeer::MATRICULA);
        $result = TbalunoPeer::doSelect($criteria);

        $aluno = new Tbaluno();
        foreach ($result as $aluno) {
            $discplinas_cursar = $aluno->getDisciplinasACursar($id_periodo);
            if (count($discplinas_cursar) == 0) {
                $provaveis_formandos[] = $aluno->getMatricula();
            }
        }
        return $provaveis_formandos;
    }

    public static function getProvaveisFormandosGeografia($id_periodo) {
        $provaveis_formandos = array();

        $criteria = new Criteria();
        $criteria->add(TbalunoPeer::ID_SITUACAO, 0);
        $criteria->addJoin(TbalunoPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO);
        $criteria->add(TbcursoversaoPeer::DESCRICAO, 'GEOGRAFIA %', Criteria::LIKE);
        $criteria->add(TbalunoPeer::MATRICULA, 'matricula IN (SELECT matricula from tbaluno,tbcursoversao where id_situacao = 0 AND porcentagem_ch_cursada(matricula) >=50 AND tbcursoversao.id_versao_curso = tbaluno.id_versao_curso)', Criteria::CUSTOM);
        $criteria->add(TbcursoversaoPeer::SITUACAO, 'ATIVO', Criteria::EQUAL);
        $criteria->add(TbalunoPeer::MATRICULA);
        $result = TbalunoPeer::doSelect($criteria);

        $aluno = new Tbaluno();
        foreach ($result as $aluno) {
            $discplinas_cursar = $aluno->getDisciplinasACursar($id_periodo);
            if (count($discplinas_cursar) == 0) {
                $provaveis_formandos[] = $aluno->getMatricula();
            }
        }
        return $provaveis_formandos;
    }

    public static function getProvaveisFormandosPorDisciplinas($id_periodo, $com_fila, $grau = null) {
        $sql_pfd1 = "SELECT matricula, id_versao_curso
                        FROM tbaluno
                        WHERE porcentagem_ch_cursada(matricula) > 75
                            AND id_situacao = 0 ";
        if ($grau != null) {
            $sql_pfd1 = "SELECT matricula, id_versao_curso
                        FROM tbaluno
                            JOIN tbcursoversao using (id_versao_curso)
                            JOIN tbcurso using (cod_curso)
                        WHERE porcentagem_ch_cursada(tbaluno.matricula) > 75
                            AND tbaluno.id_situacao = 0
                            AND tbcurso.id_nivel = $grau ";
        }
        $sql = "SELECT A.matricula
                FROM ($sql_pfd1) as A,
                    tbcursoversao
                WHERE get_disciplinas_a_cursar(A.matricula, $id_periodo, $com_fila) = 0
                AND get_ch_eletiva(A.matricula, $id_periodo, $com_fila) >= tbcursoversao.ch_eletiva
                AND tbcursoversao.id_versao_curso = A.id_versao_curso;";
        return TbalunoPeer::getAlunos($sql);
    }

    public static function getProvaveisFormandos($id_periodo, $grau = null, $com_fila = false, $cursos = null, $only_formandos = false) {
        
        $criteria = new Criteria();

        if ($only_formandos) {
            $sql_pkm = "
                SELECT tbaluno.matricula
                FROM
                    tbaluno JOIN tbcursoversao using (id_versao_curso)
                    JOIN tbcurso using (cod_curso)
                WHERE
                    get_ch_obr(tbaluno.matricula, $id_periodo, true) >= (tbcursoversao.ch_obr)
                    AND get_disciplinas_a_cursar(tbaluno.matricula, $id_periodo, $com_fila) = 0
                    AND get_ch_eletiva(tbaluno.matricula, $id_periodo, true) >= (tbcursoversao.ch_eletiva)
                    AND tbaluno.id_versao_curso not in (81,74,0)
                    AND tbaluno.id_situacao = 0 ";
            if ($grau != null) {
                $sql_pkm .= " AND tbcurso.id_nivel = $grau ";
            }
            $pksMatriculas = TbalunoPeer::getAlunos($sql_pkm);
            $criteria->add(TbalunoPeer::MATRICULA, $pksMatriculas, Criteria::IN);
        } else {
            $sql_pkm1 = "
                SELECT tbaluno.matricula
                FROM
                    tbaluno JOIN tbcursoversao using (id_versao_curso)
                    JOIN tbcurso using (cod_curso)
                WHERE
                    get_ch_obr(tbaluno.matricula, $id_periodo, true) >= (tbcursoversao.ch_obr)
                    AND get_ch_eletiva(tbaluno.matricula, $id_periodo, true) >= (tbcursoversao.ch_eletiva)
                    AND tbaluno.id_situacao = 0 ";


            if ($grau != null) {
                $criteria->addJoin(TbalunoPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO);
                $criteria->addJoin(TbcursoversaoPeer::COD_CURSO, TbcursoPeer::COD_CURSO);
                $criteria->add(TbcursoPeer::ID_NIVEL, $grau);
                $sql_pkm1 .= " AND tbcurso.id_nivel = $grau ";
            }

            if ($cursos != null) {
                $criteria->add(TbcursoversaoPeer::COD_CURSO, $cursos, Criteria::IN);
            }

            $criteria->add(TbalunoPeer::ID_VERSAO_CURSO, array('81','74','0'), Criteria::NOT_IN);


            $pksMatriculas2 = array();
            $pksMatriculas3 = array();

            $pksMatriculas1 = TbalunoPeer::getAlunos($sql_pkm1);
            $pksMatriculas2 = TbalunoPeer::getProvaveisFormandosPorDisciplinas($id_periodo, $com_fila, $grau);
            $pksMatriculas3 = TbalunoPeer::getProvaveisFormandosLetras($id_periodo);
            $pksMatriculas4 = TbalunoPeer::getProvaveisFormandosGeografia($id_periodo);

            /*  Fim Provavel Formando por carga horÃ¡ria */
            /*  Provavel Formando por curriculo de disciplinas */


            $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas1, Criteria::IN);
            $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas2, Criteria::IN);
            $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas3, Criteria::IN);
            $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas4, Criteria::IN);
            $criteria->add(TbcursoversaoPeer::CH_ELETIVA, 'tbcursoversao.ch_eletiva <= CAST(get_ch_eletiva(tbaluno.matricula,' . $id_periodo . ',' . $com_fila . ') AS INTEGER)', Criteria::CUSTOM);
        }
            $criteria->addAscendingOrderByColumn(TbcursoversaoPeer::DESCRICAO);
            $criteria->addAscendingOrderByColumn(TbalunoPeer::NOME);
//        $criteria->setDistinct();
        return TbalunoPeer::doSelectJoinTbcursoversao($criteria);
    }

    /**
     *
     * @param <type> $sql Utilize as Constantes dentro de tbalunoPeer para obter os tipos de alunos
     * @return <integer> Array de matriculas
     */
    public static function getAlunos($sql) {

        #pega matriculas de provaveis 'jubilandos' por trancamento de semetre
        $pksMatriculas = array();
        $con = Propel::getConnection();
        $stmt = $con->prepare($sql);
        $stmt->execute();
        for ($i = 0; $i < $stmt->rowCount(); $i++) {
            $line = $stmt->fetch();
            $pksMatriculas[] = $line[0];
        }

        return $pksMatriculas;
    }

    public static function getAbandonoDeCurso($cod_curso, $periodos, $metodo, $ingresso = null) {

        #pega matriculas de provaveis 'jubilandos' por trancamento de semetre
        $pksMatriculas1 = array();
        $pksMatriculas2 = array();
        $pksMatriculas3 = array();
        $pksMatriculas4 = array();

        if ($metodo == 'jubilamento' || $metodo == 'all') {
            $pksMatriculas1 = TbalunoPeer::getAlunos(TbalunoPeer::JubilandoPorReprovacoes);
            $pksMatriculas2 = TbalunoPeer::getAlunos(TbalunoPeer::JubilandoPorTrancamento);
            $pksMatriculas3 = TbalunoPeer::getAlunos(TbalunoPeer::JubilandoPorPrazoMax);
        }


        # aluno

        $periodo_1 = TbperiodoPeer::retrieveByPK($periodos[0]);
        $periodo_2 = TbperiodoPeer::retrieveByPK($periodos[1]);

        if ($metodo == 'abandono' || $metodo == 'all') {

            $sql =
//            'SELECT a.matricula from tbfila as f join tbaluno as a on a.matricula=f.matricula where
//                    (select count(f.matricula) from tbfila as f join tboferta as o on o.id_oferta=f.id_oferta where
//                    o.id_periodo=' . $periodo_1->getIdPeriodo() . ')=0 and
//                    (select count(f.matricula) from tbfila as f join tboferta as o on o.id_oferta=f.id_oferta where
//                    o.id_periodo=' . $periodo_2->getIdPeriodo() . ')=0
//                    and a.id_situacao = 0';
                    'select matricula from (SELECT matricula,get_fila_periodos(' . $periodo_1->getIdPeriodo() . ',' . $periodo_2->getIdPeriodo() . ',matricula) as cont from (SELECT tbaluno.matricula from tbaluno where id_situacao = 0 )
as A) AS B where cont =0';
            $pksMatriculas4 = TbalunoPeer::getAlunos($sql);
        }

        $criteria = new Criteria();
        if (count($cod_curso)) {
            $criteria->add(TbcursoversaoPeer::COD_CURSO, $cod_curso, Criteria::IN);
        }

        if (count($ingresso)) {
            $criteria->add(TbalunoPeer::ID_TIPO_INGRESSO, $ingresso, Criteria::IN);
        }


        $criteria->add(TbalunoPeer::MATRICULA, $pksMatriculas1, Criteria::IN);
        $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas2, Criteria::IN);
        $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas3, Criteria::IN);
        $criteria->addOr(TbalunoPeer::MATRICULA, $pksMatriculas4, Criteria::IN);
//        $criteria->addJoin(TbalunoPeer::ID_VERSAO_CURSO, TbcursoversaoPeer::ID_VERSAO_CURSO);
        $criteria->addAscendingOrderByColumn(TbcursoversaoPeer::DESCRICAO);
//        $criteria->add(TbalunoPeer::DT_INGRESSO, $periodo_2->getDtInicio(), Criteria::LESS_EQUAL);



        return array(
            'list' => TbalunoPeer::doSelectJoinTbcursoversao($criteria),
            'reprovacoes' => $pksMatriculas1,
            'trancamento' => $pksMatriculas2,
            'prazomaximo' => $pksMatriculas3,
            'abandono' => $pksMatriculas4,
            );
    }

    public static function MatriculaCorrige(/* Tbaluno */ $aluno) {

        //versoes de curso que adicionam final a matricula
        $array1 = array('113', '63', '59', '60', '173', '166', '21');
        $array2 = array('112');
        $array3 = array('111');

        if (in_array($aluno->getIdVersaoCurso(), $array1)) {
            $aluno->setMatricula($aluno->getMatricula() . '1');
        }
        if (in_array($aluno->getIdVersaoCurso(), $array2)) {
            $aluno->setMatricula($aluno->getMatricula() . '2');
        }
        if (in_array($aluno->getIdVersaoCurso(), $array3)) {
            $aluno->setMatricula($aluno->getMatricula() . '3');
        }

        //vestibular
        if (in_array($aluno->getIdTipoIngresso(), array(2,31,32,33,34,35,36))) {
            $aluno->setMatricula('1' . $aluno->getMatricula());
        //enem
        } else if (in_array($aluno->getIdTipoIngresso(), array(24,28,29,30))) {
            $aluno->setMatricula('2' . $aluno->getMatricula());
        //graduado
        } else if ($aluno->getIdTipoIngresso() == 5) {
            $aluno->setMatricula('3' . $aluno->getMatricula());
        //tranferencia
        } else if ($aluno->getIdTipoIngresso() == 13) {
            $aluno->setMatricula('4' . $aluno->getMatricula());
        //PSEI
        } else if ($aluno->getIdTipoIngresso() == 22) {
            $aluno->setMatricula('5' . $aluno->getMatricula());
        }


        return $aluno;
    }

}

// TbalunoPeer
