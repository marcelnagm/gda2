<?php

/**
 * Skeleton subclass for performing query and update operations on the 'tbperiodo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Tue May  4 12:14:41 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class TbperiodoPeer extends BaseTbperiodoPeer {

    public static function doSelect(Criteria $criteria, PropelPDO $con = null) {
        $criteria->addDescendingOrderByColumn(self::ANO);
        $criteria->addDescendingOrderByColumn(self::SEMESTRE);
        $criteria->addDescendingOrderByColumn(self::PERIODO);
        return parent::doSelect($criteria, $con);
    }

    public static function getSemestreAtualFila($aluno) {
        $criteria = new Criteria();
        $criteria->add(TbperiodoPeer::DT_INICIO_FILA, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM_FILA, date('Y-m-d'), Criteria::GREATER_EQUAL);
        $criteria->add(TbperiodoPeer::ID_NIVEL, $aluno->gettbcurso()->getIdNivel());
        $periodo = TbperiodoPeer::doSelectOne($criteria);
        if (!isset($periodo)) {
            $criteria->clear();
            $criteria->add(TbperiodoPeer::DT_INICIO_AJUSTE_FILA, date('Y-m-d'), Criteria::LESS_EQUAL);
            $criteria->add(TbperiodoPeer::DT_FIM_AJUSTE_FILA, date('Y-m-d'), Criteria::GREATER_EQUAL);
            $criteria->add(TbperiodoPeer::ID_NIVEL, $aluno->gettbcurso()->getIdNivel());
            $periodo = TbperiodoPeer::doSelectOne($criteria);
            if (!isset($periodo)) {
                return null;
            }
        }

        return $periodo;
    }

    public static function getSemestreAtualTrancamento($aluno) {
        $criteria = new Criteria();
        $criteria->add(TbperiodoPeer::DT_INICIO_TRANCAMENTO, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM_TRANCAMENTO, date('Y-m-d'), Criteria::GREATER_EQUAL);
        $criteria->add(TbperiodoPeer::ID_NIVEL, $aluno->gettbcurso()->getIdNivel());
        $periodo = TbperiodoPeer::doSelectOne($criteria);
        if (!isset($periodo)) {
            return null;
        }
        return $periodo;
    }

    public static function getSemestreAtualResultadoFila($aluno) {
        $criteria = new Criteria();
        $criteria->add(TbperiodoPeer::DT_INICIO_RESULTADO, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM_RESULTADO, date('Y-m-d'), Criteria::GREATER_EQUAL);
        $criteria->add(TbperiodoPeer::ID_NIVEL, $aluno->gettbcurso()->getIdNivel());
        $periodo = TbperiodoPeer::doSelectOne($criteria);
        if (!isset($periodo)) {
            $criteria->clear();
            $criteria->add(TbperiodoPeer::DT_INICIO_AJUSTE_RESULTADO, date('Y-m-d'), Criteria::LESS_EQUAL);
            $criteria->add(TbperiodoPeer::DT_FIM_AJUSTE_RESULTADO, date('Y-m-d'), Criteria::GREATER_EQUAL);
            $criteria->add(TbperiodoPeer::ID_NIVEL, $aluno->gettbcurso()->getIdNivel());
            $periodo = TbperiodoPeer::doSelectOne($criteria);
            if (!isset($periodo)) {
                return null;
            }
        }

        return $periodo;
    }

    public static function getSemestreAtualOferta($pessoa = null) {
        $criteria = new Criteria();

        $criteria->add(TbperiodoPeer::DT_INICIO_OFERTA, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM_OFERTA, date('Y-m-d'), Criteria::GREATER_EQUAL);
        if (isset($pessoa)) {
            $criteria->add(TbperiodoPeer::ID_NIVEL, $pessoa->gettbcurso()->getIdNivel());
        } else {
            $criteria->add(TbperiodoPeer::ID_NIVEL, 1);
        }
        $criteria->addDescendingOrderByColumn(TbperiodoPeer::ID_PERIODO);

        return TbperiodoPeer::doSelectOne($criteria);
    }

    public static function getSemestreAtualOfertaCadastro($pessoa) {
        $criteria = new Criteria();
        $criteria->add(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM_OFERTA_CADASTRO, date('Y-m-d'), Criteria::GREATER_EQUAL);
        $criteria->add(TbperiodoPeer::ID_NIVEL, $pessoa->getTbcurso()->getIdNivel());
        $periodo = TbperiodoPeer::doSelectOne($criteria);
        if (!isset($periodo)) {
            $criteria->clear();
            $criteria->add(TbperiodoPeer::DT_INICIO_AJUSTE, date('Y-m-d'), Criteria::LESS_EQUAL);
            $criteria->add(TbperiodoPeer::DT_FIM_AJUSTE, date('Y-m-d'), Criteria::GREATER_EQUAL);
            $criteria->add(TbperiodoPeer::ID_NIVEL, $pessoa->getTbcurso()->getIdNivel());
            $periodo = TbperiodoPeer::doSelectOne($criteria);
        }
        return $periodo;
    }

    public static function getSemestreAtualOfertaView($pessoa) {
        $criteria = new Criteria();
        $criteria->add(TbperiodoPeer::DT_INICIO_OFERTA_CADASTRO, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM_NOTAS, date('Y-m-d'), Criteria::GREATER_EQUAL);
        $criteria->add(TbperiodoPeer::ID_NIVEL, $pessoa->gettbcurso()->getIdNivel());
        $criteria->addDescendingOrderByColumn(TbperiodoPeer::ID_PERIODO);

        return TbperiodoPeer::doSelectOne($criteria);
    }

    public static function getSemestreAtual($pessoa = null) {
        $criteria = new Criteria();
        $criteria->add(TbperiodoPeer::DT_INICIO, date('Y-m-d'), Criteria::LESS_EQUAL);
        $criteria->add(TbperiodoPeer::DT_FIM, date('Y-m-d'), Criteria::GREATER_EQUAL);
        if (isset($pessoa)) {
            $criteria->add(TbperiodoPeer::ID_NIVEL, $pessoa->gettbcurso()->getIdNivel());
        } else {
            $criteria->add(TbperiodoPeer::ID_NIVEL, 1);
        }
        return TbperiodoPeer::doSelectOne($criteria);
    }
    
    public static function getLastSemestreAtual($pessoa = null) {
        $criteria = new Criteria();
        if (isset($pessoa)) {
            $criteria->add(TbperiodoPeer::ID_NIVEL, $pessoa->gettbcurso()->getIdNivel());
        } else {
            $criteria->add(TbperiodoPeer::ID_NIVEL, 1);
        }
        $criteria->addDescendingOrderByColumn(TbperiodoPeer::ID_PERIODO);
        return TbperiodoPeer::doSelectOne($criteria);
    }

}

// TbperiodoPeer
