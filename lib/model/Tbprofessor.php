<?php

include_once 'Log.class.php';
/**
 * Skeleton subclass for representing a row from the 'tbprofessor' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Tue May  4 12:14:43 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Tbprofessor extends BaseTbprofessor {
    
    public function __toString() {

//        $nome = utf8_encode($this->getNome());
//        $setor = $this->getTbsetor();
//        if($setor != '') {
//            $chars = sfConfig::get('app_tostring_method_chars',30);
//            if (strlen($setor) > $chars) {
//                $setor = substr($setor, 0, $chars)."...";
//            }
//            $nome .= " (".utf8_encode($setor).")";
//        }
//
//        return $nome;

        return (string) $this->getNomeJoinMatricula();
        
    }

    public function getDisciplinasMinistradas(){
           $criteria = new Criteria();
                $criteria->add(TbturmaProfessorPeer::MATRICULA_PROF, $this->getMatriculaProf(), Criteria::EQUAL);
                $criteria->addJoin(TbturmaPeer::ID_TURMA,  TbturmaProfessorPeer::ID_TURMA);
                $criteria->addJoin(TbturmaPeer::ID_OFERTA,  TbofertaPeer::ID_OFERTA);
                $criteria->addAscendingOrderByColumn(TbofertaPeer::ID_PERIODO);
                $disciplinas = TbturmaPeer::doSelect($criteria);

                $temp1 = array();
                $temp2 = array();
                $linha = 0;
                $materia = new Tbdisciplina();
                $periodo = new Tbperiodo();
                $disciplina = new Tbturma();
                foreach ($disciplinas as $disciplina) {
                    $materia = $disciplina->getTbdisciplina();
                    $perido = $disciplina->getTboferta()->getTbperiodo();
                    $temp1[$linha] = array($materia->getCodDisciplina(), $disciplina->getTurma(), $materia->getDescricao(), $perido->getAnoSemestrePeriodo(), $materia->getCh());
                    $linha++;
                }

                $criteria->clear();
                $criteria->add(TbofertaPeer::ID_MATRICULA_PROF, $this->getMatriculaProf(), Criteria::EQUAL);
                $criteria->addJoin(TbperiodoPeer::ID_PERIODO, TbofertaPeer::ID_PERIODO);
                $criteria->addAscendingOrderByColumn(TbofertaPeer::ID_PERIODO);
                $disciplinas = TbofertaPeer::doSelect($criteria);

                $disciplina = new Tboferta();
                $linha = 0;
                foreach ($disciplinas as $disciplina) {
                    $materia = $disciplina->getTbdisciplina();
                    $perido = $disciplina->getTbperiodo();
                    $temp2[$linha] = array($materia->getCodDisciplina(), $disciplina->getTurma(), $materia->getDescricao(), $perido->getAnoSemestrePeriodo(), $materia->getCh());
                    $linha++;
                }

                $criteria->clear();
                $criteria->add(TbofertaPeer::ID_MATRICULA_PROF2, $this->getMatriculaProf(), Criteria::EQUAL);
                $criteria->addJoin(TbperiodoPeer::ID_PERIODO, TbofertaPeer::ID_PERIODO);
                $criteria->addAscendingOrderByColumn(TbofertaPeer::ID_PERIODO);
                $disciplinas = TbofertaPeer::doSelect($criteria);
                $criteria->addOr(TbofertaPeer::ID_MATRICULA_PROF2, $this->getMatriculaProf(), Criteria::EQUAL);
                foreach ($disciplinas as $disciplina) {
                    $materia = $disciplina->getTbdisciplina();
                    $perido = $disciplina->getTbperiodo();
                    $temp2[$linha] = array($materia->getCodDisciplina(), $disciplina->getTurma(), $materia->getDescricao(), $perido->getAnoSemestrePeriodo(), $materia->getCh());
                    $linha++;
                }
                
                return array_merge(array_diff($temp1, $temp2), $temp2);
    }

    public function TrocarCoordenador($matricula_prof){

        $oferta = new Tbofertacoordenador();
        foreach ($this->getTbofertacoordenadors() as $oferta){
            $oferta->setMatriculaProf($matricula_prof);
            $oferta->save();
        }

        $coordenador = new Tbcoordenadorcurso();
        foreach ($this->getTbcoordenadorcursos() as $coordenador){
            $coordenador->setMatriculaProf($matricula_prof);
            $coordenador->save();
        }
        
        $this->setCoordenador(false);
        $this->save();
        
        $temp = TbprofessorPeer::retrieveByPK($matricula_prof);
        $temp->setCoordenador(true);
        $temp->save();

        

    }

          public function save(PropelPDO $con = null) {
        Log::save($this);
        parent::save($con);
    }

    public function  getNomeJoinMatricula(){
        return $this->getNome();// . ' (' . $this->getSiape() . ')';
    }

} // Tbprofessor
