<?php


/**
 * This class defines the structure of the 'tbprofessor' table.
 *
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * Mon Mar 16 17:38:55 2015
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class TbprofessorTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.TbprofessorTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('tbprofessor');
		$this->setPhpName('Tbprofessor');
		$this->setClassname('Tbprofessor');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		$this->setPrimaryKeyMethodInfo('tbpessoa_id_pessoa_seq');
		// columns
		$this->addColumn('ID_PESSOA', 'IdPessoa', 'INTEGER', true, null, null);
		$this->addPrimaryKey('MATRICULA_PROF', 'MatriculaProf', 'INTEGER', true, null, null);
		$this->addColumn('CPF', 'Cpf', 'VARCHAR', false, 11, null);
		$this->addColumn('SIAPE', 'Siape', 'INTEGER', true, null, null);
		$this->addColumn('NOME', 'Nome', 'VARCHAR', false, 100, null);
		$this->addColumn('CELULAR', 'Celular', 'VARCHAR', false, 15, null);
		$this->addColumn('FONE_RESIDENCIAL', 'FoneResidencial', 'VARCHAR', false, 15, null);
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', false, 100, null);
		$this->addColumn('FOTO', 'Foto', 'BLOB', false, null, null);
		$this->addForeignKey('ID_NECES_ESPECIAL', 'IdNecesEspecial', 'VARCHAR', 'tbnecesespecial', 'ID_NECES_ESPECIAL', false, 255, null);
		$this->addForeignKey('COD_CURSO', 'CodCurso', 'INTEGER', 'tbcurso', 'COD_CURSO', false, null, null);
		$this->addForeignKey('ID_TIPO_VINCULO', 'IdTipoVinculo', 'INTEGER', 'tbproftipovinculo', 'ID_TIPO_VINCULO', false, null, null);
		$this->addForeignKey('ID_FORMACAO', 'IdFormacao', 'INTEGER', 'tbformacao', 'ID_FORMACAO', false, null, null);
		$this->addForeignKey('ID_PROF_SIT', 'IdProfSit', 'INTEGER', 'tbprofessorsituacao', 'ID_SITUACAO', false, null, null);
		$this->addForeignKey('ID_SETOR', 'IdSetor', 'VARCHAR', 'tbsetor', 'ID_SETOR', false, 255, null);
		$this->addColumn('COORDENADOR', 'Coordenador', 'BOOLEAN', true, null, false);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'DATE', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'DATE', false, null, null);
		$this->addColumn('CREATED_BY', 'CreatedBy', 'VARCHAR', false, 20, null);
		$this->addColumn('UPDATED_BY', 'UpdatedBy', 'VARCHAR', false, 20, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Tbnecesespecial', 'Tbnecesespecial', RelationMap::MANY_TO_ONE, array('id_neces_especial' => 'id_neces_especial', ), null, null);
    $this->addRelation('Tbcurso', 'Tbcurso', RelationMap::MANY_TO_ONE, array('cod_curso' => 'cod_curso', ), null, null);
    $this->addRelation('Tbproftipovinculo', 'Tbproftipovinculo', RelationMap::MANY_TO_ONE, array('id_tipo_vinculo' => 'id_tipo_vinculo', ), null, null);
    $this->addRelation('Tbformacao', 'Tbformacao', RelationMap::MANY_TO_ONE, array('id_formacao' => 'id_formacao', ), null, null);
    $this->addRelation('Tbprofessorsituacao', 'Tbprofessorsituacao', RelationMap::MANY_TO_ONE, array('id_prof_sit' => 'id_situacao', ), null, null);
    $this->addRelation('Tbsetor', 'Tbsetor', RelationMap::MANY_TO_ONE, array('id_setor' => 'id_setor', ), null, null);
    $this->addRelation('TbofertaRelatedByIdMatriculaProf', 'Tboferta', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'id_matricula_prof', ), null, null);
    $this->addRelation('TbofertaRelatedByIdMatriculaProf2', 'Tboferta', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'id_matricula_prof2', ), null, null);
    $this->addRelation('Tbofertacoordenador', 'Tbofertacoordenador', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'matricula_prof', ), null, null);
    $this->addRelation('Tbcoordenadorcurso', 'Tbcoordenadorcurso', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'matricula_prof', ), null, null);
    $this->addRelation('Tbprofessorsenha', 'Tbprofessorsenha', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'matricula_prof', ), null, null);
    $this->addRelation('Tbprofessorticket', 'Tbprofessorticket', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'matricula_prof', ), null, null);
    $this->addRelation('TbturmaProfessor', 'TbturmaProfessor', RelationMap::ONE_TO_MANY, array('matricula_prof' => 'matricula_prof', ), 'CASCADE', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // TbprofessorTableMap
